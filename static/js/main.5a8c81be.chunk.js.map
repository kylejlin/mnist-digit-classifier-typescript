{"version":3,"sources":["workers/networkTester.ts","workers/networkTrainer.ts","matrix.ts","data/index.ts","data/mnist.ts","network/utils.ts","network/networks/ch3crossEntropyL2.ts","network/networkFactory.ts","workerMessages.ts","networkSerializer.ts","state.ts","stateSavers.ts","workers/networkTester.importable.js","workers/networkTrainer.importable.js","networkServices.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","Matrix","rows","columns","data","this","Float64Array","from","size","i","Math","random","length","some","row","Error","JSON","stringify","flat","entries","slice","n","other","TypeError","subtractInto","clone","out","thisData","otherData","outData","outSize","multiplyInto","zeros","thisRows","otherColumns","thisColumns","outColumns","thisR","otherC","dot","thisC","transposeInto","r","c","f","applyElementwiseInto","name","thisSize","decimals","entryStrings","Array","rowMajorOrderEntries","map","entry","toFixed","entryStringLengths","s","maxLength","max","topAndBottomBorder","repeat","str","leftpad","minLength","fillCharacter","diff","Idx3FileFormat","offset","requiredValue","Idx1FileFormat","getLabeledImages","imagesBuffer","labelsBuffer","images","buffer","bytes","Uint8Array","actual","getInt32MsbFirst","expected","toString","assertIdx3MagicNumberIsCorrect","numberOfImages","imagesParsed","firstPixelIndex","vectorEntries","j","matrix","columnVector","getImages","labels","assertIdx1MagicNumberIsCorrect","numberOfLabels","firstLabelIndex","getLabels","labeledImages","inputs","label","convertLabelToVector","image","fill","outputs","location","self","TRAINING_IMAGES_URL","url","resolve","href","TRAINING_LABELS_URL","TEST_IMAGES_URL","TEST_LABELS_URL","trainingImagesProm","getArrayBuffer","trainingLabelsProm","testImagesProm","testLabelsProm","fetch","then","response","status","arrayBuffer","statusText","text","getErrorMessage","errorMessage","Promise","reject","mnistProm","all","trainingImagesBuffer","trainingLabelsBuffer","testImagesBuffer","testLabelsBuffer","training","test","divideIntoMiniBatches","trainingData","miniBatchSize","arr","exclMax","floor","temp","shuffle","miniBatches","push","argmax","maxIndex","value","Chapter3CrossEntropyL2Network","sizes","log","layers","weights","biases","outputLayer","inputLayer","outputLayerSize","inputLayerSize","randomUniform","network","hyperParams","testData","batchSize","epochs","learningRate","trainingDataSize","epoch","miniBatch","getAverageGradients","regularizationRate","weightGradients","biasGradients","mutMultiplyScalar","mutSubtract","undefined","accuracyRate","getZeroMatricesForWeightGradients","getZeroMatricesForBiasGradients","imageGradients","getGradients","mutAdd","matrices","weightMatrix","biasMatrix","performForwardPass","weightedSums","activations","errors","lastLayerError","getLastLayerError","immutMultiply","immutTranspose","error","mutHadamard","immutApplyElementwise","sigmaPrime","weightedSum","sigma","actualOutput","expectedOutput","immutSubtract","correctClassifications","correct","total","z","exp","sigmaZ","WorkerMessageType","networkFactory","fromSizes","fromWeightsAndBiases","serializeNetwork","getWeights","getBiases","entryCount","weightMatrixSize","biasMatrixSize","cursor","weightMatrixEntries","set","biasMatrixEntries","getEntries","numberOfBytesForSizes","Uint32Array","BYTES_PER_ELEMENT","ArrayBuffer","uints","deserializeNetwork","numberOfLayers","layerSizes","fromRowMajorOrderEntries","toArray","subarray","floats","StateType","Draggable","LocalStorageKeys","NetworkTesterWorker","NetworkTrainerWorker","trainNetwork","listeners","worker","addEventListener","event","message","messageType","TrainingEpochCompleteNotification","onEpochComplete","notifyListenersOfEpochCompletion","TerminateTrainingResponse","updatedNetwork","networkBuffer","onTerminate","terminate","notifyListenersOfTermination","start","StartTrainingRequest","postMessage","TerminateTrainingRequest","testNetwork","onComplete","notifyListenersOfTestingCompletion","StartTestingRequest","imageSaver","stateStr","localStorage","getItem","CustomImages","option","none","decodeBytes","byteVectors","imageBytes","u8Matrix","encodeBytes","setItem","networkSaver","NeuralNetwork","numberOfBytes","toU32","charCodeAt","code","byte","u8s","u16s","ceil","String","fromCharCode","App","props","viewImageCanvasRef","customImageInputRef","cropImageCanvasRef","state","match","mnist","stateType","CreateNetwork","hiddenLayerSizeInputValues","previousNetwork","NetworkMainMenu","React","createRef","bindMethods","window","app","onCreateNetworkClick","bind","onTrainClick","onTestClick","onViewClick","onResetClick","onBatchSizeInputValueChange","onEpochsInputValueChange","onLearningRateInputValueChange","onRegularizationRateInputValueChange","onStartTrainingClick","onTrainerTerminate","onExitHyperParameterMenuClick","onStopTrainingClick","onTestMenuExitClick","onExitViewMenuClick","onPreviousImageClick","onNextImageClick","onCustomImageInputChange","enterCropMenu","onCropImageCanvasPointerDown","onCropImageCanvasPointerMove","onCropImageCanvasPointerUp","onShouldInvertInputChange","onDarknessThresholdChange","onCustomImageLabelInputValueChange","onDeleteCustomImageClick","onAddCustomImageClick","setState","newState","MnistLoadingError","saveState","customImages","renderCreateNetworkMenu","renderNetworkMainMenu","HyperParameterMenu","renderHyperParameterMenu","TrainingInProgress","renderTrainingInProgressMenu","Test","renderTestMenu","View","renderViewMenu","Crop","renderCropMenu","renderMnistLoadingErrorScreen","className","onClick","cancelNetworkReset","addLayerBelow","hiddenLayerIndex","layerIndex","key","type","isPositiveIntStr","onChange","e","changeLayerSizeValue","target","deleteLayer","disabled","join","batchSizeInputValue","epochsInputValue","isPositiveNumStr","learningRateInputValue","regularizationRateInputValue","epochAccuracyRates","sort","a","b","rate","err","ok","viewedImage","getViewedImage","guess","outputActivations","maxConfidence","confidence","digit","guessDigit","viewedIndex","ref","accept","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","hoveredOverDraggable","draggable","TopLeftCorner","BottomRightCorner","TopRightCorner","BottomLeftCorner","EntireSquare","onMouseDown","onTouchStart","checked","shouldInvertImage","darknessThreshold","min","step","isDigit","labelInputValue","ifSome","canvas","current","width","height","ctx","getContext","imageData","Uint8ClampedArray","lightness","ImageData","getImageData","putImageData","paintImage","adjustedCropSquare","pendingCropAdjustment","cropSquare","adjustment","applyPendingAdjustment","paintImageAndCropSquare","uploadedImage","changedLayerIndex","newValue","concat","expectState","every","hiddenLayerSizes","networkTester","updateState","result","updateOrUpdater","unwrapOr","networkTrainer","prevState","ifErr","tester","newIndex","file","input","files","reader","FileReader","readAsDataURL","readFileAsDataUrl","img","document","createElement","src","getAverageDarkness","x","y","square","getLocalPointerCoordinates","rect","getBoundingClientRect","scale","localRadius","CropMenuConfig","GlobalCornerHandleRadius","optDragged","hypot","dragged","startX","startY","currentX","currentY","oldAdjustment","updatedAdjustment","getHoveredOverDraggable","updatedCropSquare","newThreshold","newImage","shouldInvert","imageSmoothingEnabled","drawImage","invertContext","srcCtx","fillStyle","fillRect","applyWhiteBackground","getU8Matrix","getCustomImage","updatedCustomImages","newImageIndex","customImageIndex","newCustomImages","Component","Number","isFinite","OverlayColor","CropSquareColor","CropSquareLineWidth","crop","clearRect","cropBottom","cropRight","paintOverlay","compressed","pixels","averageLightness","applyGrayscale","lightnessThreshold","roundedLightness","applyDarknessThreshold","cropAndCompress","paintCompressedImage","strokeStyle","lineWidth","strokeRect","drawCropSquareCircle","moveTo","beginPath","arc","PI","closePath","boundingRect","clientX","clientY","touches","getGlobalPointerCoordinates","xScale","yScale","left","top","canvasWidth","canvasHeight","preserveSize","maxX","maxY","maxSize","transformBackIntoBoundsIfNeeded","isCornerAdjustment","corner","getDiagonal","clampToTopLeft","clampToTopRight","clampToBottomRight","clampToBottomLeft","clamp","right","bottom","applyPendingCornerAdjustmentToRect","dx","dy","applyTranslation","applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare","roundedDarkness","totalLightness","numberOfPixels","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5a8c81be.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"437d0d9fd9a20a53a5b4.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"a7810764e9cd9debd0d1.worker.js\");\n};","export class Matrix {\n  static randomUniform(rows: number, columns: number): Matrix {\n    const size = rows * columns;\n    const data = new Float64Array(size);\n    for (let i = 0; i < size; i++) {\n      data[i] = Math.random() * 2 - 1;\n    }\n    return new Matrix(rows, columns, data);\n  }\n\n  static zeros(rows: number, columns: number): Matrix {\n    const data = new Float64Array(rows * columns);\n    return new Matrix(rows, columns, data);\n  }\n\n  static fromRows(rows: number[][]): Matrix {\n    const columns = rows[0].length;\n    if (rows.some((row) => row.length !== columns)) {\n      throw new Error(\n        \"Cannot create a matrix from a jagged array: \" + JSON.stringify(rows)\n      );\n    }\n\n    return new Matrix(rows.length, columns, rows.flat());\n  }\n\n  static columnVector(entries: number[]): Matrix {\n    return new Matrix(entries.length, 1, entries);\n  }\n\n  static fromRowMajorOrderEntries(\n    rows: number,\n    columns: number,\n    entries: ArrayLike<number>\n  ): Matrix {\n    if (entries.length !== rows * columns) {\n      throw new Error(\n        \"Expected \" +\n          rows * columns +\n          \" entries but instead got \" +\n          entries.length +\n          \".\"\n      );\n    }\n\n    return new Matrix(rows, columns, entries);\n  }\n\n  public readonly rows: number;\n  public readonly columns: number;\n  private data: Float64Array;\n\n  private constructor(rows: number, columns: number, data: ArrayLike<number>) {\n    this.rows = rows;\n    this.columns = columns;\n    this.data = data instanceof Float64Array ? data : Float64Array.from(data);\n  }\n\n  clone(): Matrix {\n    return new Matrix(this.rows, this.columns, this.data.slice());\n  }\n\n  mutMultiplyScalar(n: number): this {\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] *= n;\n    }\n    return this;\n  }\n\n  mutAdd(other: Matrix): this {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] += other.data[i];\n    }\n\n    return this;\n  }\n\n  mutSubtract(other: Matrix): this {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] -= other.data[i];\n    }\n\n    return this;\n  }\n\n  immutSubtract(other: Matrix): Matrix {\n    return this.subtractInto(other, this.clone());\n  }\n\n  subtractInto(other: Matrix, out: Matrix): Matrix {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const otherData = other.data;\n    const outData = out.data;\n    const outSize = outData.length;\n    for (let i = 0; i < outSize; i++) {\n      outData[i] = thisData[i] - otherData[i];\n    }\n    return out;\n  }\n\n  immutMultiply(other: Matrix): Matrix {\n    return this.multiplyInto(other, Matrix.zeros(this.rows, other.columns));\n  }\n\n  multiplyInto(other: Matrix, out: Matrix): Matrix {\n    if (this.columns !== other.rows) {\n      throw new TypeError(\n        \"Cannot multiply a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix with a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    if (!(this.rows === out.rows && other.columns === out.columns)) {\n      throw new TypeError(\n        \"Cannot multiply a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix with a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const otherData = other.data;\n    const outData = out.data;\n    const thisRows = this.rows;\n    const otherColumns = other.columns;\n    const thisColumns = this.columns;\n    const outColumns = out.columns;\n\n    for (let thisR = 0; thisR < thisRows; thisR++) {\n      for (let otherC = 0; otherC < otherColumns; otherC++) {\n        let dot = 0;\n        for (let thisC = 0; thisC < thisColumns; thisC++) {\n          dot +=\n            thisData[thisR * thisColumns + thisC] *\n            otherData[thisC * otherColumns + otherC];\n        }\n        outData[thisR * outColumns + otherC] = dot;\n      }\n    }\n    return out;\n  }\n\n  mutHadamard(other: Matrix): this {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot take the Hadamard product of a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix and a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] *= other.data[i];\n    }\n    return this;\n  }\n\n  immutTranspose(): Matrix {\n    return this.transposeInto(\n      new Matrix(this.columns, this.rows, new Float64Array(this.data.length))\n    );\n  }\n\n  transposeInto(out: Matrix): Matrix {\n    if (!(this.rows === out.columns && this.columns === out.rows)) {\n      throw new Error(\n        \"Cannot transpose a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const thisRows = this.rows;\n    const thisColumns = this.columns;\n    const outData = out.data;\n    const outColumns = out.columns;\n\n    for (let r = 0; r < thisRows; r++) {\n      for (let c = 0; c < thisColumns; c++) {\n        outData[c * outColumns + r] = thisData[r * thisColumns + c];\n      }\n    }\n    return out;\n  }\n\n  rowMajorOrderEntries(): ArrayLike<number> {\n    return this.data;\n  }\n\n  immutApplyElementwise(f: (entry: number) => number): Matrix {\n    return this.applyElementwiseInto(f, this.clone());\n  }\n\n  applyElementwiseInto(f: (entry: number) => number, out: Matrix): Matrix {\n    if (!(this.rows === out.rows && this.columns === out.columns)) {\n      throw new TypeError(\n        \"Cannot apply \" +\n          f.name +\n          \" elementwise on a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix. Matrices must have the same dimensions.\"\n      );\n    }\n\n    const thisData = this.data;\n    const outData = out.data;\n    const outSize = outData.length;\n    for (let i = 0; i < outSize; i++) {\n      outData[i] = f(thisData[i]);\n    }\n    return out;\n  }\n\n  setToZero(): void {\n    const thisData = this.data;\n    const thisSize = thisData.length;\n    for (let i = 0; i < thisSize; i++) {\n      thisData[i] = 0;\n    }\n  }\n\n  print(decimals: number): string {\n    const entries = Array.from(this.rowMajorOrderEntries());\n    const entryStrings = entries.map((entry) => entry.toFixed(decimals));\n    const entryStringLengths = entryStrings.map((s) => s.length);\n    const maxLength = Math.max(...entryStringLengths);\n\n    const topAndBottomBorder = \"-\".repeat(\n      this.columns * (maxLength + \" | \".length) - \" | \".length\n    );\n\n    let str = topAndBottomBorder + \"\\n\";\n\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        str +=\n          leftpad(entryStrings[r * this.columns + c], maxLength, \" \") + \" | \";\n      }\n\n      str = str.slice(0, -\" | \".length);\n\n      str += \"\\n\";\n    }\n\n    str += topAndBottomBorder;\n    return str;\n  }\n}\n\nfunction leftpad(s: string, minLength: number, fillCharacter: string): string {\n  const diff = minLength - s.length;\n  if (diff <= 0) {\n    return s;\n  }\n\n  return fillCharacter.repeat(diff) + s;\n}\n","import { Matrix } from \"../matrix\";\n\nexport interface LabeledImage {\n  rows: number;\n  columns: number;\n  inputs: Matrix;\n  label: number;\n}\n\nexport interface VectorLabeledImage {\n  rows: number;\n  columns: number;\n  inputs: Matrix;\n  outputs: Matrix;\n}\n\ninterface ImageMatrix {\n  rows: number;\n  columns: number;\n  matrix: Matrix;\n}\n\nexport interface AccuracyRate {\n  correct: number;\n  total: number;\n}\n\nconst Idx3FileFormat = {\n  MagicNumber: { offset: 0, requiredValue: 0x00000803 },\n  NumberOfImages: { offset: 4 },\n  NumberOfRows: { offset: 8 },\n  NumberOfColumns: { offset: 12 },\n} as const;\n\nconst Idx1FileFormat = {\n  MagicNumber: { offset: 0, requiredValue: 0x00000801 },\n  NumberOfLabels: { offset: 4 },\n} as const;\n\nexport function getLabeledImages(\n  imagesBuffer: ArrayBuffer,\n  labelsBuffer: ArrayBuffer\n): LabeledImage[] {\n  const images = getImages(imagesBuffer);\n  const labels = getLabels(labelsBuffer);\n\n  if (images.length !== labels.length) {\n    throw new Error(\n      \"There are \" +\n        images.length +\n        \" images, but \" +\n        labels.length +\n        \" labels. There must be the same amount of images and labels.\"\n    );\n  }\n\n  const labeledImages: LabeledImage[] = new Array(images.length);\n  for (let i = 0; i < images.length; i++) {\n    const { rows, columns, matrix } = images[i];\n    labeledImages[i] = { rows, columns, inputs: matrix, label: labels[i] };\n  }\n  return labeledImages;\n}\n\nfunction getImages(buffer: ArrayBuffer): ImageMatrix[] {\n  const bytes = new Uint8Array(buffer);\n\n  assertIdx3MagicNumberIsCorrect(bytes);\n\n  const numberOfImages = getInt32MsbFirst(\n    bytes,\n    Idx3FileFormat.NumberOfImages.offset\n  );\n  const rows = getInt32MsbFirst(bytes, Idx3FileFormat.NumberOfRows.offset);\n  const columns = getInt32MsbFirst(\n    bytes,\n    Idx3FileFormat.NumberOfColumns.offset\n  );\n  const size = rows * columns;\n\n  let imagesParsed = 0;\n  const images: ImageMatrix[] = new Array(numberOfImages);\n  const firstPixelIndex = Idx3FileFormat.NumberOfColumns.offset + 4;\n\n  while (imagesParsed < numberOfImages) {\n    const vectorEntries: number[] = new Array(size);\n    for (let j = 0; j < size; j++) {\n      vectorEntries[j] = bytes[firstPixelIndex + imagesParsed * size + j] / 255;\n    }\n\n    images[imagesParsed] = {\n      rows,\n      columns,\n      matrix: Matrix.columnVector(vectorEntries),\n    };\n    imagesParsed++;\n  }\n\n  return images;\n}\n\nfunction assertIdx3MagicNumberIsCorrect(bytes: Uint8Array): void {\n  const actual = getInt32MsbFirst(bytes, Idx3FileFormat.MagicNumber.offset);\n  const expected = Idx3FileFormat.MagicNumber.requiredValue;\n  if (actual !== expected) {\n    throw new Error(\n      \"The first 4 bytes of an idx3 file must be 0x\" +\n        expected.toString(16) +\n        \", but the first 4 bytes of the provided file were 0x\" +\n        actual.toString(16)\n    );\n  }\n}\n\nfunction getInt32MsbFirst(bytes: Uint8Array, offset: number): number {\n  return (\n    (bytes[offset] << 24) |\n    (bytes[offset + 1] << 16) |\n    (bytes[offset + 2] << 8) |\n    bytes[offset + 3]\n  );\n}\n\nfunction getLabels(buffer: ArrayBuffer): number[] {\n  const bytes = new Uint8Array(buffer);\n\n  assertIdx1MagicNumberIsCorrect(bytes);\n\n  const numberOfLabels = getInt32MsbFirst(\n    bytes,\n    Idx1FileFormat.NumberOfLabels.offset\n  );\n  const labels: number[] = new Array(numberOfLabels);\n  const firstLabelIndex = Idx1FileFormat.NumberOfLabels.offset + 4;\n  for (let i = 0; i < numberOfLabels; i++) {\n    labels[i] = bytes[firstLabelIndex + i];\n  }\n  return labels;\n}\n\nfunction assertIdx1MagicNumberIsCorrect(bytes: Uint8Array): void {\n  const actual = getInt32MsbFirst(bytes, Idx1FileFormat.MagicNumber.offset);\n  const expected = Idx1FileFormat.MagicNumber.requiredValue;\n  if (actual !== expected) {\n    throw new Error(\n      \"The first 4 bytes of an idx1 file must be 0x\" +\n        expected.toString(16) +\n        \", but the first 4 bytes of the provided file were 0x\" +\n        actual.toString(16)\n    );\n  }\n}\n\nexport function convertLabelToVector(image: LabeledImage): VectorLabeledImage {\n  const entries: number[] = new Array(10).fill(0);\n  entries[image.label] = 1;\n  const outputs = Matrix.columnVector(entries);\n  return {\n    rows: image.rows,\n    columns: image.columns,\n    inputs: image.inputs,\n    outputs,\n  };\n}\n","import url from \"url\";\nimport {\n  convertLabelToVector,\n  getLabeledImages,\n  LabeledImage,\n  VectorLabeledImage,\n} from \".\";\n\nexport interface MnistData {\n  training: VectorLabeledImage[];\n  test: LabeledImage[];\n}\n\ndeclare const self: { location: Window[\"location\"] };\n\nconst { location } = self;\n\nconst TRAINING_IMAGES_URL = url.resolve(\n  location.href,\n  \"./assets/train60k-images-idx3-ubyte\"\n);\nconst TRAINING_LABELS_URL = url.resolve(\n  location.href,\n  \"./assets/train60k-labels-idx1-ubyte\"\n);\nconst TEST_IMAGES_URL = url.resolve(\n  location.href,\n  \"./assets/test10k-images-idx3-ubyte\"\n);\nconst TEST_LABELS_URL = url.resolve(\n  location.href,\n  \"./assets/test10k-labels-idx1-ubyte\"\n);\nconst trainingImagesProm: Promise<ArrayBuffer> = getArrayBuffer(\n  TRAINING_IMAGES_URL\n);\nconst trainingLabelsProm: Promise<ArrayBuffer> = getArrayBuffer(\n  TRAINING_LABELS_URL\n);\nconst testImagesProm: Promise<ArrayBuffer> = getArrayBuffer(TEST_IMAGES_URL);\nconst testLabelsProm: Promise<ArrayBuffer> = getArrayBuffer(TEST_LABELS_URL);\n\nfunction getArrayBuffer(url: string): Promise<ArrayBuffer> {\n  return fetch(url).then((response) => {\n    if (200 <= response.status && response.status <= 299) {\n      return response.arrayBuffer();\n    } else {\n      return getErrorMessage(response).then((errorMessage) =>\n        Promise.reject(\n          new Error(\n            \"Tried to fetch \" +\n              url +\n              \" but got the following error: \" +\n              errorMessage\n          )\n        )\n      );\n    }\n  });\n}\n\nfunction getErrorMessage(response: Response): Promise<string> {\n  const { status, statusText } = response;\n  return response\n    .text()\n    .then((text) => status + \" (\" + statusText + \"): \" + text);\n}\n\nexport const mnistProm: Promise<MnistData> = Promise.all([\n  trainingImagesProm,\n  trainingLabelsProm,\n  testImagesProm,\n  testLabelsProm,\n]).then(\n  ([\n    trainingImagesBuffer,\n    trainingLabelsBuffer,\n    testImagesBuffer,\n    testLabelsBuffer,\n  ]) => {\n    return {\n      training: getLabeledImages(\n        trainingImagesBuffer,\n        trainingLabelsBuffer\n      ).map(convertLabelToVector),\n      test: getLabeledImages(testImagesBuffer, testLabelsBuffer),\n    };\n  }\n);\n","import { MatrixMap } from \".\";\nimport { VectorLabeledImage } from \"../data\";\n\nexport interface Gradients {\n  weightGradients: MatrixMap;\n  biasGradients: MatrixMap;\n}\n\nexport function divideIntoMiniBatches(\n  trainingData: VectorLabeledImage[],\n  miniBatchSize: number\n): VectorLabeledImage[][] {\n  shuffle(trainingData);\n  const miniBatches: VectorLabeledImage[][] = [];\n  for (let i = 0; i < trainingData.length; i += miniBatchSize) {\n    miniBatches.push(trainingData.slice(i, i + miniBatchSize));\n  }\n  return miniBatches;\n}\n\nfunction shuffle(arr: unknown[]): void {\n  const SHUFFLE_TIMES = 512;\n\n  for (let n = 0; n < SHUFFLE_TIMES; n++) {\n    for (let i = arr.length - 1; i >= 1; i--) {\n      let j = randInt(i + 1);\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n}\n\nfunction randInt(exclMax: number): number {\n  return Math.floor(Math.random() * exclMax);\n}\n\nexport function argmax(arr: ArrayLike<number>): number {\n  let maxIndex = 0;\n  let max = arr[maxIndex];\n  for (let i = 1; i < arr.length; i++) {\n    const value = arr[i];\n    if (value > max) {\n      max = value;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n","import {\n  MatrixMap,\n  Network,\n  StochasticGradientDescentHyperParameters,\n  WeightedSumsAndActivations,\n} from \"..\";\nimport { AccuracyRate, LabeledImage, VectorLabeledImage } from \"../../data\";\nimport { DeepReadonly } from \"../../deepReadonly\";\nimport { Matrix } from \"../../matrix\";\nimport { argmax, divideIntoMiniBatches, Gradients } from \"../utils\";\n\n/** Cross-entropy cost, sigmoid activation, L2 regularization */\nexport class Chapter3CrossEntropyL2Network implements Network {\n  private layers: number;\n  private weights: MatrixMap;\n  private biases: MatrixMap;\n  private log: (accuracyRate: AccuracyRate, epoch: number) => void;\n\n  public readonly sizes: number[];\n\n  static fromWeightsAndBiases(weights: MatrixMap, biases: MatrixMap): Network {\n    const sizes = [weights[1].columns];\n    for (let i = 1; i < weights.length; i++) {\n      sizes.push(weights[i].rows);\n    }\n\n    const network = new Chapter3CrossEntropyL2Network(sizes);\n\n    for (let i = 1; i < weights.length; i++) {\n      network.weights[i] = weights[i];\n      network.biases[i] = biases[i];\n    }\n\n    return network;\n  }\n\n  constructor(\n    sizes: number[],\n    log?: (accuracyRate: AccuracyRate, epoch: number) => void\n  ) {\n    this.layers = sizes.length;\n\n    this.weights = [];\n    this.biases = [];\n    for (let outputLayer = 1; outputLayer < sizes.length; outputLayer++) {\n      const inputLayer = outputLayer - 1;\n      const outputLayerSize = sizes[outputLayer];\n      const inputLayerSize = sizes[inputLayer];\n      this.weights[outputLayer] = Matrix.randomUniform(\n        outputLayerSize,\n        inputLayerSize\n      );\n      this.biases[outputLayer] = Matrix.randomUniform(outputLayerSize, 1);\n    }\n\n    this.log = log || (() => {});\n\n    this.sizes = sizes;\n  }\n\n  stochasticGradientDescent(\n    trainingData: VectorLabeledImage[],\n    hyperParams: StochasticGradientDescentHyperParameters,\n    testData?: LabeledImage[]\n  ): void {\n    const { batchSize, epochs, learningRate } = hyperParams;\n    const trainingDataSize = trainingData.length;\n\n    for (let epoch = 0; epoch < epochs; epoch++) {\n      const miniBatches = divideIntoMiniBatches(trainingData, batchSize);\n      for (const miniBatch of miniBatches) {\n        const { weightGradients, biasGradients } = this.getAverageGradients(\n          miniBatch,\n          hyperParams.regularizationRate,\n          trainingDataSize\n        );\n\n        for (let i = 1; i < this.layers; i++) {\n          weightGradients[i].mutMultiplyScalar(learningRate);\n          biasGradients[i].mutMultiplyScalar(learningRate);\n\n          this.weights[i].mutSubtract(weightGradients[i]);\n          this.biases[i].mutSubtract(biasGradients[i]);\n        }\n      }\n\n      if (testData !== undefined) {\n        const accuracyRate = this.test(testData);\n        this.log(accuracyRate, epoch);\n      }\n    }\n  }\n\n  private getAverageGradients(\n    miniBatch: VectorLabeledImage[],\n    regularizationRate: number,\n    trainingDataSize: number\n  ): Gradients {\n    const weightGradients = this.getZeroMatricesForWeightGradients();\n    const biasGradients = this.getZeroMatricesForBiasGradients();\n\n    for (const image of miniBatch) {\n      const imageGradients = this.getGradients(\n        image,\n        regularizationRate,\n        trainingDataSize\n      );\n      for (let i = 1; i < this.layers; i++) {\n        weightGradients[i].mutAdd(imageGradients.weightGradients[i]);\n        biasGradients[i].mutAdd(imageGradients.biasGradients[i]);\n      }\n    }\n\n    for (let i = 1; i < this.layers; i++) {\n      weightGradients[i].mutMultiplyScalar(1 / miniBatch.length);\n      biasGradients[i].mutMultiplyScalar(1 / miniBatch.length);\n    }\n\n    return { weightGradients, biasGradients };\n  }\n\n  private getZeroMatricesForWeightGradients(): MatrixMap {\n    const matrices: MatrixMap = [];\n    for (let i = 1; i < this.layers; i++) {\n      const weightMatrix = this.weights[i];\n      matrices[i] = Matrix.zeros(weightMatrix.rows, weightMatrix.columns);\n    }\n    return matrices;\n  }\n\n  private getZeroMatricesForBiasGradients(): MatrixMap {\n    const matrices: MatrixMap = [];\n    for (let i = 1; i < this.layers; i++) {\n      const biasMatrix = this.biases[i];\n      matrices[i] = Matrix.zeros(biasMatrix.rows, biasMatrix.columns);\n    }\n    return matrices;\n  }\n\n  private getGradients(\n    image: VectorLabeledImage,\n    regularizationRate: number,\n    trainingDataSize: number\n  ): Gradients {\n    const { weightedSums, activations } = this.performForwardPass(image.inputs);\n    const errors: MatrixMap = [];\n    const weightGradients: MatrixMap = [];\n    const biasGradients: MatrixMap = [];\n\n    const lastLayerError = this.getLastLayerError(\n      activations[this.layers - 1],\n      image.outputs\n    );\n\n    errors[this.layers - 1] = lastLayerError;\n    weightGradients[this.layers - 1] = lastLayerError\n      .immutMultiply(activations[this.layers - 2].immutTranspose())\n      .mutAdd(\n        this.weights[this.layers - 1]\n          .clone()\n          .mutMultiplyScalar(regularizationRate / trainingDataSize)\n      );\n\n    biasGradients[this.layers - 1] = lastLayerError;\n\n    for (let i = this.layers - 2; i >= 1; i--) {\n      const error = this.weights[i + 1]\n        .immutTranspose()\n        .immutMultiply(errors[i + 1]);\n      error.mutHadamard(weightedSums[i].immutApplyElementwise(sigmaPrime));\n\n      errors[i] = error;\n      weightGradients[i] = error\n        .immutMultiply(activations[i - 1].immutTranspose())\n        .mutAdd(\n          this.weights[i]\n            .clone()\n            .mutMultiplyScalar(regularizationRate / trainingDataSize)\n        );\n      biasGradients[i] = error;\n    }\n\n    return { weightGradients, biasGradients };\n  }\n\n  performForwardPass(inputs: Matrix): WeightedSumsAndActivations {\n    const weightedSums: MatrixMap = [];\n    const activations: MatrixMap = [inputs];\n\n    for (let outputLayer = 1; outputLayer < this.layers; outputLayer++) {\n      const inputLayer = outputLayer - 1;\n      const weightedSum = this.weights[outputLayer].immutMultiply(\n        activations[inputLayer]\n      );\n      weightedSum.mutAdd(this.biases[outputLayer]);\n      weightedSums[outputLayer] = weightedSum;\n      activations[outputLayer] = weightedSum.immutApplyElementwise(sigma);\n    }\n    return { weightedSums, activations };\n  }\n\n  private getLastLayerError(\n    actualOutput: Matrix,\n    expectedOutput: Matrix\n  ): Matrix {\n    return actualOutput.immutSubtract(expectedOutput);\n  }\n\n  test(testData: LabeledImage[]): AccuracyRate {\n    let correctClassifications = 0;\n    for (const image of testData) {\n      const { activations } = this.performForwardPass(image.inputs);\n      const prediction = argmax(\n        activations[this.layers - 1].rowMajorOrderEntries()\n      );\n      if (prediction === image.label) {\n        correctClassifications++;\n      }\n    }\n    return { correct: correctClassifications, total: testData.length };\n  }\n\n  getWeights(): DeepReadonly<MatrixMap> {\n    return this.weights;\n  }\n\n  getBiases(): DeepReadonly<MatrixMap> {\n    return this.biases;\n  }\n}\n\nfunction sigma(z: number): number {\n  return 1 / (1 + Math.exp(-z));\n}\n\nfunction sigmaPrime(z: number): number {\n  const sigmaZ = sigma(z);\n  return sigmaZ * (1 - sigmaZ);\n}\n","import { MatrixMap, Network } from \".\";\nimport { Chapter3CrossEntropyL2Network } from \"./networks/ch3crossEntropyL2\";\n\nexport interface NetworkFactory {\n  fromSizes(sizes: number[]): Network;\n  fromWeightsAndBiases(weights: MatrixMap, biases: MatrixMap): Network;\n}\n\n/**\n * At any given time, the entire web app uses one and only\n * one neural network implementation.\n *\n * All other files will depend on `networkFactory`, which will\n * allow me to easily change which network I'm using by changing\n * only one variable.\n * Otherwise, if I wanted to change from using `NetworkX`\n * to `NetworkY`, I would have to go through the entire src\n * folder and replace every occurrence of `NetworkX` with\n * `NetworkY`.\n */\nexport const networkFactory: NetworkFactory = {\n  fromSizes(sizes: number[]): Network {\n    return new Chapter3CrossEntropyL2Network(sizes);\n  },\n  fromWeightsAndBiases(weights: MatrixMap, biases: MatrixMap): Network {\n    return Chapter3CrossEntropyL2Network.fromWeightsAndBiases(weights, biases);\n  },\n};\n","import { AccuracyRate } from \"./data\";\nimport { StochasticGradientDescentHyperParameters } from \"./network\";\n\nexport enum WorkerMessageType {\n  StartTrainingRequest,\n  TrainingEpochCompleteNotification,\n  TerminateTrainingRequest,\n  TerminateTrainingResponse,\n\n  StartTestingRequest,\n  TestCompleteNotification,\n}\n\nexport type NetworkTrainerRequest =\n  | StartTrainingRequest\n  | TerminateTrainingRequest;\n\nexport type NetworkTrainerNotification =\n  | TrainingEpochCompleteNotification\n  | TerminateTrainingResponse;\n\nexport interface StartTrainingRequest {\n  messageType: WorkerMessageType.StartTrainingRequest;\n\n  networkBuffer: ArrayBuffer;\n  hyperParams: StochasticGradientDescentHyperParameters;\n}\n\nexport interface TrainingEpochCompleteNotification {\n  messageType: WorkerMessageType.TrainingEpochCompleteNotification;\n\n  accuracyRate: AccuracyRate;\n  epoch: number;\n}\n\nexport interface TerminateTrainingRequest {\n  messageType: WorkerMessageType.TerminateTrainingRequest;\n}\n\nexport interface TerminateTrainingResponse {\n  messageType: WorkerMessageType.TerminateTrainingResponse;\n\n  networkBuffer: ArrayBuffer;\n}\n\nexport interface StartTestingRequest {\n  messageType: WorkerMessageType.StartTestingRequest;\n\n  networkBuffer: ArrayBuffer;\n}\n\nexport interface TestCompleteNotification {\n  messageType: WorkerMessageType.TestCompleteNotification;\n  accuracyRate: AccuracyRate;\n}\n","import { Matrix } from \"./matrix\";\nimport { MatrixMap, Network } from \"./network\";\nimport { networkFactory } from \"./network/networkFactory\";\n\nexport function serializeNetwork(network: Network): ArrayBuffer {\n  const entries = getEntries(network);\n\n  const numberOfBytesForSizes =\n    (1 + network.sizes.length) * Uint32Array.BYTES_PER_ELEMENT;\n\n  const buffer = new ArrayBuffer(\n    numberOfBytesForSizes + entries.length * entries.BYTES_PER_ELEMENT\n  );\n\n  const uints = new Uint32Array(\n    buffer,\n    0,\n    numberOfBytesForSizes / Uint32Array.BYTES_PER_ELEMENT\n  );\n\n  uints[0] = network.sizes.length;\n\n  for (let i = 0; i < network.sizes.length; i++) {\n    uints[1 + i] = network.sizes[i];\n  }\n\n  const floats = new Float64Array(buffer, numberOfBytesForSizes);\n  floats.set(entries);\n\n  return buffer;\n}\n\nfunction getEntries(network: Network): Float64Array {\n  const weights = network.getWeights();\n  const biases = network.getBiases();\n\n  let entryCount = 0;\n\n  for (let i = 1; i < weights.length; i++) {\n    const weightMatrix = weights[i];\n    const weightMatrixSize = weightMatrix.rows * weightMatrix.columns;\n    entryCount += weightMatrixSize;\n\n    const biasMatrix = biases[i];\n    const biasMatrixSize = biasMatrix.rows * biasMatrix.columns;\n    entryCount += biasMatrixSize;\n  }\n\n  const entries = new Float64Array(entryCount);\n\n  let cursor = 0;\n  for (let i = 1; i < weights.length; i++) {\n    const weightMatrixEntries = weights[i].rowMajorOrderEntries();\n    entries.set(weightMatrixEntries, cursor);\n    cursor += weightMatrixEntries.length;\n\n    const biasMatrixEntries = biases[i].rowMajorOrderEntries();\n    entries.set(biasMatrixEntries, cursor);\n    cursor += biasMatrixEntries.length;\n  }\n\n  return entries;\n}\n\nexport function deserializeNetwork(buffer: ArrayBuffer): Network {\n  const numberOfLayers = new Uint32Array(buffer, 0, 1)[0];\n  const layerSizes = new Uint32Array(buffer, 4, numberOfLayers);\n  const entries = new Float64Array(\n    buffer.slice(Uint32Array.BYTES_PER_ELEMENT * (1 + numberOfLayers))\n  );\n\n  const weights: MatrixMap = [];\n  const biases: MatrixMap = [];\n\n  let cursor = 0;\n  for (let i = 1; i < layerSizes.length; i++) {\n    const outputLayerSize = layerSizes[i];\n    const inputLayerSize = layerSizes[i - 1];\n\n    {\n      const rows = outputLayerSize;\n      const columns = inputLayerSize;\n      const size = rows * columns;\n      weights[i] = Matrix.fromRowMajorOrderEntries(\n        rows,\n        columns,\n        toArray(entries.subarray(cursor, cursor + size))\n      );\n\n      cursor += size;\n    }\n\n    {\n      const rows = outputLayerSize;\n      biases[i] = Matrix.fromRowMajorOrderEntries(\n        rows,\n        1,\n        toArray(entries.subarray(cursor, cursor + rows))\n      );\n\n      cursor += rows;\n    }\n  }\n\n  return networkFactory.fromWeightsAndBiases(weights, biases);\n}\n\nfunction toArray(floats: Float64Array): number[] {\n  const arr = new Array(floats.length);\n  for (let i = 0; i < floats.length; i++) {\n    arr[i] = floats[i];\n  }\n  return arr;\n}\n","import { Option, Result } from \"rusty-ts\";\nimport { AccuracyRate } from \"./data\";\nimport { MnistData } from \"./data/mnist\";\nimport { Network } from \"./network\";\nimport { NetworkTester, NetworkTrainer } from \"./networkServices\";\nimport { Matrix } from \"./matrix\";\n\nexport type AppState =\n  | CreateNetworkState\n  | NetworkMainMenuState\n  | HyperParameterMenuState\n  | TrainingInProgressState\n  | TestState\n  | ViewState\n  | CropState\n  | MnistLoadingErrorState;\n\nexport enum StateType {\n  CreateNetwork,\n  NetworkMainMenu,\n  HyperParameterMenu,\n  TrainingInProgress,\n  Test,\n  View,\n  Crop,\n\n  MnistLoadingError,\n}\n\nexport interface StateMap {\n  [StateType.CreateNetwork]: CreateNetworkState;\n  [StateType.NetworkMainMenu]: NetworkMainMenuState;\n  [StateType.HyperParameterMenu]: HyperParameterMenuState;\n  [StateType.TrainingInProgress]: TrainingInProgressState;\n  [StateType.Test]: TestState;\n  [StateType.View]: ViewState;\n  [StateType.Crop]: CropState;\n\n  [StateType.MnistLoadingError]: MnistLoadingErrorState;\n}\n\nexport interface CreateNetworkState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.CreateNetwork;\n\n  hiddenLayerSizeInputValues: string[];\n  previousNetwork: Option<Network>;\n}\n\nexport interface NetworkMainMenuState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.NetworkMainMenu;\n\n  network: Network;\n}\n\nexport interface HyperParameterMenuState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.HyperParameterMenu;\n\n  network: Network;\n\n  batchSizeInputValue: string;\n  epochsInputValue: string;\n  learningRateInputValue: string;\n  regularizationRateInputValue: string;\n}\n\nexport interface TrainingInProgressState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.TrainingInProgress;\n\n  network: Network;\n\n  networkTrainer: NetworkTrainer;\n  epochAccuracyRates: EpochAccuracyRate[];\n}\n\nexport interface EpochAccuracyRate extends AccuracyRate {\n  epoch: number;\n}\n\nexport interface TestState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.Test;\n\n  network: Network;\n\n  accuracyRate: Result<AccuracyRate, NetworkTester>;\n}\n\nexport interface ViewState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.View;\n\n  network: Network;\n\n  viewedIndex: number;\n  customImages: CustomImage[];\n}\n\nexport interface CustomImage {\n  u8Matrix: Matrix;\n  label: number;\n}\n\nexport interface CropState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.Crop;\n\n  network: Network;\n  customImages: CustomImage[];\n\n  uploadedImage: HTMLImageElement;\n  darknessThreshold: number;\n  cropSquare: Square;\n  pendingCropAdjustment: Option<SquareAdjustment>;\n  hoveredOverDraggable: Option<Draggable>;\n  shouldInvertImage: boolean;\n  labelInputValue: string;\n}\n\nexport interface Square {\n  x: number;\n  y: number;\n  size: number;\n}\n\nexport interface SquareAdjustment {\n  dragged: Draggable;\n  startX: number;\n  startY: number;\n  currentX: number;\n  currentY: number;\n}\n\nexport enum Draggable {\n  TopLeftCorner,\n  TopRightCorner,\n  BottomRightCorner,\n  BottomLeftCorner,\n\n  EntireSquare,\n}\n\nexport type Corner =\n  | Draggable.TopLeftCorner\n  | Draggable.TopRightCorner\n  | Draggable.BottomRightCorner\n  | Draggable.BottomLeftCorner;\n\nexport interface MnistLoadingErrorState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.MnistLoadingError;\n\n  errorMessage: string;\n}\n","import { Option, option } from \"rusty-ts\";\nimport { Matrix } from \"./matrix\";\nimport { Network } from \"./network\";\nimport { CustomImage } from \"./state\";\nimport { deserializeNetwork, serializeNetwork } from \"./networkSerializer\";\n\nexport interface StateSaver<T> {\n  getState(): Option<T>;\n  saveState(state: T): void;\n}\n\nenum LocalStorageKeys {\n  CustomImages = \"CustomImages\",\n  NeuralNetwork = \"NeuralNetwork\",\n}\n\n// 28*28 pixels plus 1 label\nconst BYTES_PER_IMAGE = 28 * 28 + 1;\n\nexport const imageSaver: StateSaver<CustomImage[]> = {\n  getState(): Option<CustomImage[]> {\n    const stateStr = localStorage.getItem(LocalStorageKeys.CustomImages);\n    if (stateStr === null) {\n      return option.none();\n    } else {\n      const bytes = decodeBytes(stateStr);\n\n      if (bytes.length % BYTES_PER_IMAGE !== 0) {\n        throw new Error(\n          \"Cannot decode image bytes because there are \" +\n            bytes.length +\n            \" bytes, and that number is not a multiple of 784.\"\n        );\n      }\n\n      const numberOfImages = bytes.length / BYTES_PER_IMAGE;\n\n      const byteVectors: CustomImage[] = new Array(numberOfImages);\n      for (let i = 0; i < numberOfImages; i++) {\n        const imageBytes = bytes.subarray(\n          i * BYTES_PER_IMAGE,\n          i * BYTES_PER_IMAGE + 784\n        );\n        const u8Matrix = Matrix.columnVector(toArray(imageBytes));\n        byteVectors[i] = { u8Matrix, label: bytes[i * BYTES_PER_IMAGE + 784] };\n      }\n      return option.some(byteVectors);\n    }\n  },\n\n  saveState(images: CustomImage[]): void {\n    const bytes = new Uint8Array(images.length * BYTES_PER_IMAGE);\n    for (let i = 0; i < images.length; i++) {\n      const image = images[i];\n      bytes.set(image.u8Matrix.rowMajorOrderEntries(), i * BYTES_PER_IMAGE);\n      bytes[i * BYTES_PER_IMAGE + 784] = image.label;\n    }\n\n    const stateStr = encodeBytes(bytes);\n    localStorage.setItem(LocalStorageKeys.CustomImages, stateStr);\n  },\n};\n\nexport const networkSaver: StateSaver<Network> = {\n  getState(): Option<Network> {\n    const stateStr = localStorage.getItem(LocalStorageKeys.NeuralNetwork);\n    if (stateStr === null) {\n      return option.none();\n    } else {\n      const bytes = decodeBytes(stateStr);\n      const network = deserializeNetwork(bytes.buffer);\n      return option.some(network);\n    }\n  },\n\n  saveState(network: Network): void {\n    const buffer = serializeNetwork(network);\n    const stateStr = encodeBytes(new Uint8Array(buffer));\n    localStorage.setItem(LocalStorageKeys.NeuralNetwork, stateStr);\n  },\n};\n\nfunction decodeBytes(str: string): Uint8Array {\n  const numberOfBytes = toU32((str.charCodeAt(0) << 16) | str.charCodeAt(1));\n  const bytes = new Uint8Array(numberOfBytes);\n\n  for (let i = 0; i < numberOfBytes; i++) {\n    const code = str.charCodeAt(2 + Math.floor(i / 2));\n\n    const byte = i % 2 === 0 ? code >>> 8 : code;\n\n    bytes[i] = byte;\n  }\n  return bytes;\n}\n\nfunction toU32(n: number): number {\n  const arr = new Uint32Array(1);\n  arr[0] = n;\n  return arr[0];\n}\n\nfunction toArray(u8s: Uint8Array): number[] {\n  const arr: number[] = new Array(u8s.length);\n  for (let i = 0; i < u8s.length; i++) {\n    arr[i] = u8s[i];\n  }\n  return arr;\n}\n\nfunction encodeBytes(bytes: Uint8Array): string {\n  const numberOfBytes = bytes.length;\n  const u16s = new Array(Math.ceil(numberOfBytes / 2));\n\n  for (let i = 0; i < bytes.length; i++) {\n    const byte = bytes[i];\n    if (i % 2 === 0) {\n      u16s[i / 2] = byte << 8;\n    } else {\n      u16s[(i - 1) / 2] |= byte;\n    }\n  }\n\n  return String.fromCharCode(\n    numberOfBytes >>> 16,\n    numberOfBytes & 0b0000_0000_0000_0000_1111_1111_1111_1111,\n    ...u16s\n  );\n}\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport NetworkTesterWorker from \"worker-loader!./networkTester\";\n\nexport default NetworkTesterWorker;\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport NetworkTrainerWorker from \"worker-loader!./networkTrainer\";\n\nexport default NetworkTrainerWorker;\n","import { AccuracyRate } from \"./data\";\nimport { Network, StochasticGradientDescentHyperParameters } from \"./network\";\nimport { deserializeNetwork, serializeNetwork } from \"./networkSerializer\";\nimport {\n  NetworkTrainerNotification,\n  StartTestingRequest,\n  StartTrainingRequest,\n  TerminateTrainingRequest,\n  TerminateTrainingResponse,\n  TestCompleteNotification,\n  TrainingEpochCompleteNotification,\n  WorkerMessageType,\n} from \"./workerMessages\";\nimport NetworkTesterWorker from \"./workers/networkTester.importable\";\nimport NetworkTrainerWorker from \"./workers/networkTrainer.importable\";\n\nexport interface NetworkTrainer {\n  start(): void;\n  terminate(): void;\n}\n\nexport interface NetworkTester {\n  start(): void;\n  terminate(): void;\n}\n\nexport interface NetworkTrainerListeners {\n  onEpochComplete(accuracyRate: AccuracyRate, epoch: number): void;\n  onTerminate(network: Network): void;\n}\n\nexport interface NetworkTesterListeners {\n  onComplete(rate: AccuracyRate): void;\n}\n\nexport function trainNetwork(\n  network: Network,\n  hyperParams: StochasticGradientDescentHyperParameters,\n  listeners: NetworkTrainerListeners\n): NetworkTrainer {\n  const worker = new NetworkTrainerWorker();\n\n  worker.addEventListener(\"message\", (event) => {\n    const { data } = event;\n    if (data !== null && \"object\" === typeof data && \"messageType\" in data) {\n      const message: NetworkTrainerNotification = data;\n      switch (message.messageType) {\n        case WorkerMessageType.TrainingEpochCompleteNotification:\n          notifyListenersOfEpochCompletion(message);\n          break;\n        case WorkerMessageType.TerminateTrainingResponse:\n          notifyListenersOfTermination(message);\n          break;\n\n        default: {\n          // Force exhaustive matching\n\n          // eslint-disable-next-line\n          const unreachable: never = message;\n        }\n      }\n    }\n  });\n\n  return { start: startTraining, terminate: stopTrainingAfterThisEpoch };\n\n  function notifyListenersOfEpochCompletion(\n    message: TrainingEpochCompleteNotification\n  ): void {\n    listeners.onEpochComplete(message.accuracyRate, message.epoch);\n  }\n\n  function notifyListenersOfTermination(\n    message: TerminateTrainingResponse\n  ): void {\n    const updatedNetwork = deserializeNetwork(message.networkBuffer);\n    listeners.onTerminate(updatedNetwork);\n\n    worker.terminate();\n  }\n\n  function startTraining(): void {\n    const message: StartTrainingRequest = {\n      messageType: WorkerMessageType.StartTrainingRequest,\n      networkBuffer: serializeNetwork(network),\n      hyperParams,\n    };\n    worker.postMessage(message, [message.networkBuffer]);\n  }\n\n  function stopTrainingAfterThisEpoch(): void {\n    const message: TerminateTrainingRequest = {\n      messageType: WorkerMessageType.TerminateTrainingRequest,\n    };\n    worker.postMessage(message);\n  }\n}\n\nexport function testNetwork(\n  network: Network,\n  listeners: NetworkTesterListeners\n): NetworkTrainer {\n  const worker = new NetworkTesterWorker();\n\n  worker.addEventListener(\"message\", (event) => {\n    const { data } = event;\n    if (data !== null && \"object\" === typeof data && \"messageType\" in data) {\n      const message: TestCompleteNotification = data;\n      notifyListenersOfTestingCompletion(message);\n    }\n  });\n\n  return { start: startTesting, terminate: terminateWorker };\n\n  function notifyListenersOfTestingCompletion(\n    message: TestCompleteNotification\n  ): void {\n    listeners.onComplete(message.accuracyRate);\n\n    worker.terminate();\n  }\n\n  function startTesting(): void {\n    const message: StartTestingRequest = {\n      messageType: WorkerMessageType.StartTestingRequest,\n      networkBuffer: serializeNetwork(network),\n    };\n    worker.postMessage(message, [message.networkBuffer]);\n  }\n\n  function terminateWorker(): void {\n    worker.terminate();\n  }\n}\n","import React from \"react\";\nimport { option, Option, result } from \"rusty-ts\";\nimport \"./App.css\";\nimport { AccuracyRate, LabeledImage } from \"./data\";\nimport { MnistData, mnistProm } from \"./data/mnist\";\nimport { Matrix } from \"./matrix\";\nimport { Network, StochasticGradientDescentHyperParameters } from \"./network\";\nimport { testNetwork, trainNetwork } from \"./networkServices\";\nimport {\n  AppState,\n  Corner,\n  CreateNetworkState,\n  CropState,\n  CustomImage,\n  Draggable,\n  HyperParameterMenuState,\n  MnistLoadingErrorState,\n  NetworkMainMenuState,\n  Square,\n  SquareAdjustment,\n  StateMap,\n  StateType,\n  TestState,\n  TrainingInProgressState,\n  ViewState,\n} from \"./state\";\nimport { imageSaver, networkSaver } from \"./stateSavers\";\nimport { networkFactory } from \"./network/networkFactory\";\n\ninterface Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface CornerAdjustment extends SquareAdjustment {\n  dragged: Corner;\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  private viewImageCanvasRef: React.RefObject<HTMLCanvasElement>;\n  private customImageInputRef: React.RefObject<HTMLInputElement>;\n  private cropImageCanvasRef: React.RefObject<HTMLCanvasElement>;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = getInitialState();\n\n    this.viewImageCanvasRef = React.createRef();\n    this.customImageInputRef = React.createRef();\n    this.cropImageCanvasRef = React.createRef();\n\n    this.bindMethods();\n\n    (window as any).app = this;\n  }\n\n  bindMethods(): void {\n    this.onCreateNetworkClick = this.onCreateNetworkClick.bind(this);\n    this.onTrainClick = this.onTrainClick.bind(this);\n    this.onTestClick = this.onTestClick.bind(this);\n    this.onViewClick = this.onViewClick.bind(this);\n    this.onResetClick = this.onResetClick.bind(this);\n    this.onBatchSizeInputValueChange = this.onBatchSizeInputValueChange.bind(\n      this\n    );\n    this.onEpochsInputValueChange = this.onEpochsInputValueChange.bind(this);\n    this.onLearningRateInputValueChange = this.onLearningRateInputValueChange.bind(\n      this\n    );\n    this.onRegularizationRateInputValueChange = this.onRegularizationRateInputValueChange.bind(\n      this\n    );\n    this.onStartTrainingClick = this.onStartTrainingClick.bind(this);\n    this.onEpochComplete = this.onEpochComplete.bind(this);\n    this.onTrainerTerminate = this.onTrainerTerminate.bind(this);\n    this.onExitHyperParameterMenuClick = this.onExitHyperParameterMenuClick.bind(\n      this\n    );\n    this.onStopTrainingClick = this.onStopTrainingClick.bind(this);\n    this.onTestMenuExitClick = this.onTestMenuExitClick.bind(this);\n    this.onExitViewMenuClick = this.onExitViewMenuClick.bind(this);\n    this.onPreviousImageClick = this.onPreviousImageClick.bind(this);\n    this.onNextImageClick = this.onNextImageClick.bind(this);\n    this.onCustomImageInputChange = this.onCustomImageInputChange.bind(this);\n    this.enterCropMenu = this.enterCropMenu.bind(this);\n    this.onCropImageCanvasPointerDown = this.onCropImageCanvasPointerDown.bind(\n      this\n    );\n    this.onCropImageCanvasPointerMove = this.onCropImageCanvasPointerMove.bind(\n      this\n    );\n    this.onCropImageCanvasPointerUp = this.onCropImageCanvasPointerUp.bind(\n      this\n    );\n    this.onShouldInvertInputChange = this.onShouldInvertInputChange.bind(this);\n    this.onDarknessThresholdChange = this.onDarknessThresholdChange.bind(this);\n    this.onCustomImageLabelInputValueChange = this.onCustomImageLabelInputValueChange.bind(\n      this\n    );\n    this.onDeleteCustomImageClick = this.onDeleteCustomImageClick.bind(this);\n    this.onAddCustomImageClick = this.onAddCustomImageClick.bind(this);\n  }\n\n  componentDidMount(): void {\n    mnistProm.then(\n      (mnist) => {\n        this.setState({ mnist: option.some(mnist) });\n      },\n\n      (error: Error) => {\n        const newState: MnistLoadingErrorState = {\n          mnist: option.none(),\n          stateType: StateType.MnistLoadingError,\n          errorMessage: error.message,\n        };\n        this.saveState(newState);\n      }\n    );\n  }\n\n  saveState(state: AppState): void {\n    this.setState(state);\n\n    if (\"network\" in state) {\n      const { network } = state;\n      networkSaver.saveState(network);\n    }\n\n    if (\"customImages\" in state) {\n      const { customImages } = state;\n      imageSaver.saveState(customImages);\n    }\n  }\n\n  render(): React.ReactElement {\n    const { state } = this;\n    switch (state.stateType) {\n      case StateType.CreateNetwork:\n        return this.renderCreateNetworkMenu(state);\n      case StateType.NetworkMainMenu:\n        return this.renderNetworkMainMenu(state);\n      case StateType.HyperParameterMenu:\n        return this.renderHyperParameterMenu(state);\n      case StateType.TrainingInProgress:\n        return this.renderTrainingInProgressMenu(state);\n      case StateType.Test:\n        return this.renderTestMenu(state);\n      case StateType.View:\n        return this.renderViewMenu(state);\n      case StateType.Crop:\n        return this.renderCropMenu(state);\n\n      case StateType.MnistLoadingError:\n        return this.renderMnistLoadingErrorScreen(state);\n    }\n  }\n\n  renderCreateNetworkMenu(state: CreateNetworkState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>\n          {state.previousNetwork.match({\n            none: () => \"Create network\",\n            some: () => \"Reset network\",\n          })}\n        </h1>\n\n        {state.previousNetwork.match({\n          none: () => null,\n          some: (network) => (\n            <button onClick={() => this.cancelNetworkReset(network)}>\n              Cancel\n            </button>\n          ),\n        })}\n\n        <h2>Layers:</h2>\n        <ol>\n          <li>\n            Input layer: 784 neurons\n            <button onClick={() => this.addLayerBelow(0, state)}>\n              Add layer below\n            </button>\n          </li>\n\n          {state.hiddenLayerSizeInputValues.map((value, hiddenLayerIndex) => {\n            const layerIndex = hiddenLayerIndex + 1;\n            return (\n              <li key={layerIndex}>\n                <label>\n                  Hidden layer:{\" \"}\n                  <input\n                    type=\"text\"\n                    className={isPositiveIntStr(value) ? \"\" : \"InvalidInput\"}\n                    value={value}\n                    onChange={(e) =>\n                      this.changeLayerSizeValue(\n                        layerIndex,\n                        e.target.value,\n                        state\n                      )\n                    }\n                  />{\" \"}\n                  neurons\n                </label>\n                <button onClick={() => this.addLayerBelow(layerIndex, state)}>\n                  Add layer below\n                </button>\n                <button onClick={() => this.deleteLayer(layerIndex, state)}>\n                  Delete layer\n                </button>\n              </li>\n            );\n          })}\n\n          <li>Output layer: 10 neurons</li>\n        </ol>\n\n        <button\n          onClick={this.onCreateNetworkClick}\n          disabled={state.hiddenLayerSizeInputValues.some(\n            (value) => !isPositiveIntStr(value)\n          )}\n        >\n          Create network\n        </button>\n      </div>\n    );\n  }\n\n  renderNetworkMainMenu(state: NetworkMainMenuState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Explore your neural network</h1>\n        <h2>Neurons in each layer: {state.network.sizes.join(\", \")}</h2>\n\n        <button onClick={this.onTrainClick}>Train</button>\n        <button onClick={this.onTestClick}>Test</button>\n        <button onClick={this.onViewClick}>View</button>\n        <button onClick={this.onResetClick}>Reset</button>\n      </div>\n    );\n  }\n\n  renderHyperParameterMenu(state: HyperParameterMenuState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Train (stochastic gradient descent)</h1>\n\n        <button onClick={this.onExitHyperParameterMenuClick}>Cancel</button>\n\n        <h2>Hyperparameters:</h2>\n\n        <label>\n          Batch size:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveIntStr(state.batchSizeInputValue) ? \"\" : \"InvalidInput\"\n            }\n            value={state.batchSizeInputValue}\n            onChange={this.onBatchSizeInputValueChange}\n          />\n        </label>\n\n        <label>\n          Epochs:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveIntStr(state.epochsInputValue) ? \"\" : \"InvalidInput\"\n            }\n            value={state.epochsInputValue}\n            onChange={this.onEpochsInputValueChange}\n          />\n        </label>\n\n        <label>\n          Learning rate:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveNumStr(state.learningRateInputValue)\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            value={state.learningRateInputValue}\n            onChange={this.onLearningRateInputValueChange}\n          />\n        </label>\n\n        <label>\n          Regularization rate:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveNumStr(state.regularizationRateInputValue)\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            value={state.regularizationRateInputValue}\n            onChange={this.onRegularizationRateInputValueChange}\n          />\n        </label>\n\n        <button\n          onClick={this.onStartTrainingClick}\n          disabled={\n            !(\n              isPositiveIntStr(state.batchSizeInputValue) &&\n              isPositiveIntStr(state.epochsInputValue) &&\n              isPositiveNumStr(state.learningRateInputValue) &&\n              isPositiveNumStr(state.regularizationRateInputValue)\n            )\n          }\n        >\n          Start\n        </button>\n      </div>\n    );\n  }\n\n  renderTrainingInProgressMenu(\n    state: TrainingInProgressState\n  ): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Training in progress...</h1>\n\n        <h2>Logs:</h2>\n        {state.epochAccuracyRates\n          .slice()\n          .sort((a, b) => a.epoch - b.epoch)\n          .map((rate) => (\n            <div key={rate.epoch}>\n              Epoch {rate.epoch}: {rate.correct} / {rate.total}\n            </div>\n          ))}\n\n        <button onClick={this.onStopTrainingClick}>\n          Stop training after current epoch\n        </button>\n      </div>\n    );\n  }\n\n  renderTestMenu(state: TestState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Test results:</h1>\n\n        {state.accuracyRate.match({\n          err: () => <p>Running tests...</p>,\n          ok: (rate) => (\n            <p>\n              {rate.correct} / {rate.total} correct\n            </p>\n          ),\n        })}\n\n        <button onClick={this.onTestMenuExitClick}>Back</button>\n      </div>\n    );\n  }\n\n  renderViewMenu(state: ViewState): React.ReactElement {\n    return state.mnist.match({\n      none: () => (\n        <div className=\"App\">\n          <p>Loading...</p>\n        </div>\n      ),\n      some: (mnist) => {\n        const viewedImage: LabeledImage = getViewedImage(state, mnist);\n        const guess = guessDigit(state.network, viewedImage.inputs);\n\n        return (\n          <div className=\"App\">\n            <h1>View classifications</h1>\n            <button onClick={this.onExitViewMenuClick}>Back</button>\n\n            <div>\n              <button onClick={this.onPreviousImageClick}>Previous</button>{\" \"}\n              Image {state.viewedIndex + 1} /{\" \"}\n              {mnist.test.length + state.customImages.length}{\" \"}\n              <button onClick={this.onNextImageClick}>Next</button>\n            </div>\n\n            <canvas ref={this.viewImageCanvasRef}></canvas>\n\n            <div\n              className={\n                guess.digit === viewedImage.label ? \"\" : \"IncorrectGuess\"\n              }\n            >\n              Guess: {guess.digit} ({(guess.confidence * 100).toFixed(2)}%\n              confident)\n            </div>\n\n            <div>Actual: {viewedImage.label}</div>\n\n            {state.viewedIndex >= mnist.test.length && (\n              <div>\n                <button onClick={this.onDeleteCustomImageClick}>\n                  Delete this image\n                </button>\n              </div>\n            )}\n\n            <div>\n              <label>\n                Upload your own image:{\" \"}\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  ref={this.customImageInputRef}\n                  onChange={this.onCustomImageInputChange}\n                />\n              </label>\n            </div>\n          </div>\n        );\n      },\n    });\n  }\n\n  renderCropMenu(state: CropState): React.ReactElement {\n    return (\n      <div\n        className=\"App\"\n        onMouseMove={this.onCropImageCanvasPointerMove}\n        onTouchMove={this.onCropImageCanvasPointerMove}\n        onMouseUp={this.onCropImageCanvasPointerUp}\n        onTouchEnd={this.onCropImageCanvasPointerUp}\n      >\n        <h1>Crop image</h1>\n\n        <div>\n          <canvas\n            ref={this.cropImageCanvasRef}\n            className={\n              \"CropImageCanvas WhiteBackground\" +\n              state.hoveredOverDraggable.match({\n                none: () => \"\",\n                some: (draggable): string => {\n                  switch (draggable) {\n                    case Draggable.TopLeftCorner:\n                    case Draggable.BottomRightCorner:\n                      return \" NwseResizeCursor\";\n                    case Draggable.TopRightCorner:\n                    case Draggable.BottomLeftCorner:\n                      return \" NeswResizeCursor\";\n                    case Draggable.EntireSquare:\n                      return \" MoveCursor\";\n                  }\n                },\n              })\n            }\n            onMouseDown={this.onCropImageCanvasPointerDown}\n            onTouchStart={this.onCropImageCanvasPointerDown}\n          ></canvas>\n        </div>\n\n        <div>\n          <label>\n            Invert{\" \"}\n            <input\n              type=\"checkbox\"\n              checked={state.shouldInvertImage}\n              onChange={this.onShouldInvertInputChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label>\n            Darkness threshold:{\" \"}\n            <input\n              type=\"range\"\n              value={state.darknessThreshold}\n              min={0}\n              max={1}\n              step={0.001}\n              onChange={this.onDarknessThresholdChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label>\n            Label:{\" \"}\n            <input\n              type=\"text\"\n              className={isDigit(state.labelInputValue) ? \"\" : \"InvalidInput\"}\n              value={state.labelInputValue}\n              onChange={this.onCustomImageLabelInputValueChange}\n            />\n          </label>\n        </div>\n\n        <button\n          disabled={!isDigit(state.labelInputValue)}\n          onClick={this.onAddCustomImageClick}\n        >\n          Add\n        </button>\n      </div>\n    );\n  }\n\n  renderMnistLoadingErrorScreen(\n    state: MnistLoadingErrorState\n  ): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Error loading MNIST data set:</h1>\n        <p>{state.errorMessage}</p>\n      </div>\n    );\n  }\n\n  componentDidUpdate(): void {\n    const { state } = this;\n    state.mnist.ifSome((mnist) => {\n      if (state.stateType === StateType.View) {\n        const canvas = this.viewImageCanvasRef.current;\n        if (canvas !== null) {\n          const viewedImage = getViewedImage(state, mnist);\n          paintImage(viewedImage, canvas);\n        }\n      } else if (state.stateType === StateType.Crop) {\n        const canvas = this.cropImageCanvasRef.current;\n        if (canvas !== null) {\n          const adjustedCropSquare = state.pendingCropAdjustment.match({\n            none: () => state.cropSquare,\n            some: (adjustment) => {\n              return applyPendingAdjustment(\n                state.cropSquare,\n                adjustment,\n                canvas.width,\n                canvas.height\n              );\n            },\n          });\n          paintImageAndCropSquare(\n            state.uploadedImage,\n            adjustedCropSquare,\n            canvas,\n            state.shouldInvertImage,\n            state.darknessThreshold\n          );\n        }\n      }\n    });\n  }\n\n  cancelNetworkReset(network: Network): void {\n    const newState: NetworkMainMenuState = {\n      mnist: this.state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network,\n    };\n    this.saveState(newState);\n  }\n\n  changeLayerSizeValue(\n    changedLayerIndex: number,\n    newValue: string,\n    state: CreateNetworkState\n  ): void {\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues.map(\n        (value, hiddenLayerIndex) => {\n          const layerIndex = hiddenLayerIndex + 1;\n          if (layerIndex === changedLayerIndex) {\n            return newValue;\n          } else {\n            return value;\n          }\n        }\n      ),\n    });\n  }\n\n  addLayerBelow(layerIndex: number, state: CreateNetworkState): void {\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues\n        .slice(0, layerIndex)\n        .concat([\"16\"], state.hiddenLayerSizeInputValues.slice(layerIndex)),\n    });\n  }\n\n  deleteLayer(layerIndex: number, state: CreateNetworkState): void {\n    const hiddenLayerIndex = layerIndex - 1;\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues\n        .slice(0, hiddenLayerIndex)\n        .concat(state.hiddenLayerSizeInputValues.slice(hiddenLayerIndex + 1)),\n    });\n  }\n\n  onCreateNetworkClick(): void {\n    const state = this.expectState(StateType.CreateNetwork);\n    if (state.hiddenLayerSizeInputValues.every(isPositiveIntStr)) {\n      const hiddenLayerSizes: number[] = state.hiddenLayerSizeInputValues.map(\n        (str) => +str\n      );\n      const layerSizes = [784, ...hiddenLayerSizes, 10];\n\n      const newState: NetworkMainMenuState = {\n        mnist: this.state.mnist,\n\n        stateType: StateType.NetworkMainMenu,\n\n        network: networkFactory.fromSizes(layerSizes),\n      };\n\n      this.saveState(newState);\n    }\n  }\n\n  expectState<T extends StateType>(stateType: T): StateMap[T] {\n    const { state } = this;\n    if (state.stateType === stateType) {\n      return state as StateMap[T];\n    }\n    throw new Error(\n      \"Expecting a state of type \" +\n        StateType[stateType] +\n        \" but got state of type \" +\n        StateType[state.stateType]\n    );\n  }\n\n  onTrainClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: HyperParameterMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.HyperParameterMenu,\n\n      network: state.network,\n\n      batchSizeInputValue: \"10\",\n      epochsInputValue: \"30\",\n      learningRateInputValue: \"0.5\",\n      regularizationRateInputValue: \"5.0\",\n    };\n    this.saveState(newState);\n  }\n\n  onTestClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n\n    const networkTester = testNetwork(state.network, {\n      onComplete: (accuracyRate) => {\n        this.updateState(StateType.Test, {\n          accuracyRate: result.ok(accuracyRate),\n        });\n      },\n    });\n\n    const newState: TestState = {\n      mnist: state.mnist,\n\n      stateType: StateType.Test,\n\n      network: state.network,\n\n      accuracyRate: result.err(networkTester),\n    };\n\n    this.saveState(newState);\n\n    networkTester.start();\n  }\n\n  updateState<T extends StateType>(\n    stateType: T,\n    updateOrUpdater:\n      | Partial<StateMap[T]>\n      | ((prevState: StateMap[T]) => Partial<StateMap[T]>)\n  ): void {\n    const { state } = this;\n    if (state.stateType === stateType) {\n      if (\"function\" === typeof updateOrUpdater) {\n        this.saveState({ ...state, ...updateOrUpdater(state as StateMap[T]) });\n      } else {\n        this.saveState({ ...state, ...updateOrUpdater });\n      }\n    }\n  }\n\n  onViewClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: ViewState = {\n      mnist: state.mnist,\n\n      stateType: StateType.View,\n\n      network: state.network,\n\n      viewedIndex: 0,\n      customImages: imageSaver.getState().unwrapOr([]),\n    };\n    this.saveState(newState);\n  }\n\n  onResetClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: CreateNetworkState = {\n      mnist: state.mnist,\n\n      stateType: StateType.CreateNetwork,\n\n      hiddenLayerSizeInputValues: [\"30\"],\n      previousNetwork: option.some(state.network),\n    };\n    this.saveState(newState);\n  }\n\n  onBatchSizeInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      batchSizeInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onEpochsInputValueChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      epochsInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onLearningRateInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      learningRateInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onRegularizationRateInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      regularizationRateInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onStartTrainingClick(): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n\n    const hyperParams: StochasticGradientDescentHyperParameters = {\n      batchSize: +state.batchSizeInputValue,\n      epochs: +state.epochsInputValue,\n      learningRate: +state.learningRateInputValue,\n      regularizationRate: +state.regularizationRateInputValue,\n    };\n\n    const networkTrainer = trainNetwork(state.network, hyperParams, {\n      onEpochComplete: this.onEpochComplete,\n\n      onTerminate: this.onTrainerTerminate,\n    });\n\n    const newState: TrainingInProgressState = {\n      mnist: state.mnist,\n\n      stateType: StateType.TrainingInProgress,\n\n      network: state.network,\n\n      networkTrainer,\n      epochAccuracyRates: [],\n    };\n\n    this.saveState(newState);\n\n    networkTrainer.start();\n  }\n\n  onEpochComplete(accuracyRate: AccuracyRate, epoch: number): void {\n    this.updateState(StateType.TrainingInProgress, (prevState) => ({\n      epochAccuracyRates: prevState.epochAccuracyRates.concat([\n        { ...accuracyRate, epoch },\n      ]),\n    }));\n  }\n\n  onTrainerTerminate(updatedNetwork: Network): void {\n    const state = this.expectState(StateType.TrainingInProgress);\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: updatedNetwork,\n    };\n    this.saveState(newState);\n  }\n\n  onExitHyperParameterMenuClick(): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onStopTrainingClick(): void {\n    const state = this.expectState(StateType.TrainingInProgress);\n    state.networkTrainer.terminate();\n  }\n\n  onTestMenuExitClick(): void {\n    const state = this.expectState(StateType.Test);\n\n    state.accuracyRate.ifErr((tester) => {\n      tester.terminate();\n    });\n\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onExitViewMenuClick(): void {\n    const state = this.expectState(StateType.View);\n\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onPreviousImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const numberOfImages = mnist.test.length + state.customImages.length;\n      const newIndex =\n        state.viewedIndex === 0 ? numberOfImages - 1 : state.viewedIndex - 1;\n      this.saveState({ ...state, viewedIndex: newIndex });\n    });\n  }\n\n  onNextImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const numberOfImages = mnist.test.length + state.customImages.length;\n      const newIndex =\n        state.viewedIndex === numberOfImages - 1 ? 0 : state.viewedIndex + 1;\n      this.saveState({ ...state, viewedIndex: newIndex });\n    });\n  }\n\n  onCustomImageInputChange(): void {\n    const input = this.customImageInputRef.current;\n    if (input !== null && input.files !== null && input.files.length > 0) {\n      readFileAsHtmlImage(input.files[0]).then(this.enterCropMenu);\n    }\n  }\n\n  enterCropMenu(uploadedImage: HTMLImageElement): void {\n    const state = this.expectState(StateType.View);\n    const newState: CropState = {\n      mnist: state.mnist,\n\n      stateType: StateType.Crop,\n\n      network: state.network,\n      customImages: state.customImages,\n\n      uploadedImage,\n      darknessThreshold: getAverageDarkness(uploadedImage),\n      cropSquare: {\n        x: 0,\n        y: 0,\n        size: Math.min(uploadedImage.width, uploadedImage.height),\n      },\n      pendingCropAdjustment: option.none(),\n      hoveredOverDraggable: option.none(),\n      shouldInvertImage: false,\n      labelInputValue: \"\",\n    };\n    this.saveState(newState);\n  }\n\n  onCropImageCanvasPointerDown(\n    event:\n      | React.MouseEvent<HTMLCanvasElement>\n      | React.TouchEvent<HTMLCanvasElement>\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const square = state.cropSquare;\n\n    const canvas = this.cropImageCanvasRef.current!;\n    const { x, y } = getLocalPointerCoordinates(event, canvas);\n    const rect = canvas.getBoundingClientRect();\n    const scale = canvas.width / rect.width;\n    const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n\n    const optDragged: Option<Draggable> = (() => {\n      if (Math.hypot(x - square.x, y - square.y) <= localRadius) {\n        return option.some(Draggable.TopLeftCorner);\n      } else if (\n        Math.hypot(x - (square.x + square.size), y - square.y) <= localRadius\n      ) {\n        return option.some(Draggable.TopRightCorner);\n      } else if (\n        Math.hypot(\n          x - (square.x + square.size),\n          y - (square.y + square.size)\n        ) <= localRadius\n      ) {\n        return option.some(Draggable.BottomRightCorner);\n      } else if (\n        Math.hypot(x - square.x, y - (square.y + square.size)) <= localRadius\n      ) {\n        return option.some(Draggable.BottomLeftCorner);\n      } else if (\n        x > square.x &&\n        x < square.x + square.size &&\n        y > square.y &&\n        y < square.y + square.size\n      ) {\n        return option.some(Draggable.EntireSquare);\n      } else {\n        return option.none();\n      }\n    })();\n\n    this.saveState({\n      ...state,\n      pendingCropAdjustment: optDragged.map((dragged) => ({\n        dragged,\n        startX: x,\n        startY: y,\n        currentX: x,\n        currentY: y,\n      })),\n    });\n  }\n\n  onCropImageCanvasPointerMove(\n    event: React.MouseEvent | React.TouchEvent\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const canvas = this.cropImageCanvasRef.current!;\n    const current = getLocalPointerCoordinates(event, canvas);\n\n    state.pendingCropAdjustment.match({\n      some: (oldAdjustment) => {\n        const updatedAdjustment: SquareAdjustment = {\n          ...oldAdjustment,\n          currentX: current.x,\n          currentY: current.y,\n        };\n\n        this.saveState({\n          ...state,\n          pendingCropAdjustment: option.some(updatedAdjustment),\n        });\n\n        const adjustedCropSquare = applyPendingAdjustment(\n          state.cropSquare,\n          updatedAdjustment,\n          canvas.width,\n          canvas.height\n        );\n        paintImageAndCropSquare(\n          state.uploadedImage,\n          adjustedCropSquare,\n          canvas,\n          state.shouldInvertImage,\n          state.darknessThreshold\n        );\n      },\n\n      none: () => {\n        const rect = canvas.getBoundingClientRect();\n        const scale = canvas.width / rect.width;\n        const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n        this.saveState({\n          ...state,\n          hoveredOverDraggable: getHoveredOverDraggable(\n            state.cropSquare,\n            current.x,\n            current.y,\n            localRadius\n          ),\n        });\n      },\n    });\n  }\n\n  onCropImageCanvasPointerUp(): void {\n    const state = this.expectState(StateType.Crop);\n    const canvas = this.cropImageCanvasRef.current!;\n    const updatedCropSquare = state.pendingCropAdjustment.match({\n      none: () => state.cropSquare,\n      some: (adjustment) =>\n        applyPendingAdjustment(\n          state.cropSquare,\n          adjustment,\n          canvas.width,\n          canvas.height\n        ),\n    });\n\n    this.saveState({\n      ...state,\n      pendingCropAdjustment: option.none(),\n      cropSquare: updatedCropSquare,\n    });\n  }\n\n  onShouldInvertInputChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Crop);\n    const newState: CropState = {\n      ...state,\n      shouldInvertImage: event.target.checked,\n    };\n    this.saveState(newState);\n  }\n\n  onDarknessThresholdChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Crop);\n    const newThreshold = +event.target.value;\n    const newState: CropState = { ...state, darknessThreshold: newThreshold };\n    this.saveState(newState);\n    paintImageAndCropSquare(\n      state.uploadedImage,\n      state.cropSquare,\n      this.cropImageCanvasRef.current!,\n      state.shouldInvertImage,\n      newThreshold\n    );\n  }\n\n  onCustomImageLabelInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const newState: CropState = {\n      ...state,\n      labelInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onAddCustomImageClick(): void {\n    const state = this.expectState(StateType.Crop);\n\n    if (!isDigit(state.labelInputValue)) {\n      return;\n    }\n\n    state.mnist.ifSome((mnist) => {\n      const label = +state.labelInputValue;\n      const newImage = getCustomImage(\n        state,\n        label,\n        state.shouldInvertImage,\n        state.darknessThreshold\n      );\n      const updatedCustomImages = state.customImages.concat([newImage]);\n      const newImageIndex = mnist.test.length + updatedCustomImages.length - 1;\n      const newState: ViewState = {\n        mnist: state.mnist,\n\n        stateType: StateType.View,\n\n        network: state.network,\n\n        viewedIndex: newImageIndex,\n        customImages: updatedCustomImages,\n      };\n      this.saveState(newState);\n    });\n  }\n\n  onDeleteCustomImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const customImageIndex = state.viewedIndex - mnist.test.length;\n      const newCustomImages = state.customImages\n        .slice(0, customImageIndex)\n        .concat(state.customImages.slice(customImageIndex + 1));\n      const newState: ViewState = {\n        ...state,\n        customImages: newCustomImages,\n        viewedIndex: state.viewedIndex - 1,\n      };\n      this.saveState(newState);\n    });\n  }\n}\n\nfunction getInitialState(): AppState {\n  return networkSaver.getState().match({\n    none: (): CreateNetworkState => ({\n      mnist: option.none(),\n\n      stateType: StateType.CreateNetwork,\n\n      hiddenLayerSizeInputValues: [\"30\"],\n      previousNetwork: option.none(),\n    }),\n\n    some: (network): NetworkMainMenuState => ({\n      mnist: option.none(),\n\n      stateType: StateType.NetworkMainMenu,\n\n      network,\n    }),\n  });\n}\n\nfunction isPositiveIntStr(s: string): boolean {\n  return Number.isFinite(+s) && +s === Math.floor(+s) && +s > 0;\n}\n\nfunction isPositiveNumStr(s: string): boolean {\n  return Number.isFinite(+s) && +s > 0;\n}\n\nfunction getViewedImage(state: ViewState, mnist: MnistData): LabeledImage {\n  return state.viewedIndex < mnist.test.length\n    ? mnist.test[state.viewedIndex]\n    : normalizeU8Image(\n        state.customImages[state.viewedIndex - mnist.test.length]\n      );\n}\n\nfunction normalizeU8Image(image: CustomImage): LabeledImage {\n  return {\n    rows: 28,\n    columns: 28,\n    inputs: image.u8Matrix.immutApplyElementwise((x) => x / 255),\n    label: image.label,\n  };\n}\n\nfunction guessDigit(\n  network: Network,\n  inputs: Matrix\n): { digit: number; confidence: number } {\n  const { activations } = network.performForwardPass(inputs);\n  const outputActivations = activations[\n    activations.length - 1\n  ].rowMajorOrderEntries();\n\n  let maxIndex = 0;\n  let maxConfidence = outputActivations[maxIndex];\n  for (let i = 1; i < outputActivations.length; i++) {\n    const confidence = outputActivations[i];\n    if (confidence > maxConfidence) {\n      maxConfidence = confidence;\n      maxIndex = i;\n    }\n  }\n\n  return { digit: maxIndex, confidence: maxConfidence };\n}\n\nfunction paintImage(image: LabeledImage, canvas: HTMLCanvasElement): void {\n  canvas.width = image.columns;\n  canvas.height = image.rows;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  const imageData = getImageData(image);\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction getImageData(image: LabeledImage): ImageData {\n  const entries = image.inputs.rowMajorOrderEntries();\n  const imageBytes = new Uint8ClampedArray(entries.length * 4);\n  for (let i = 0; i < entries.length; i++) {\n    const lightness = 255 - Math.floor(entries[i] * 255);\n    imageBytes[i * 4] = lightness;\n    imageBytes[i * 4 + 1] = lightness;\n    imageBytes[i * 4 + 2] = lightness;\n    imageBytes[i * 4 + 3] = 255;\n  }\n  return new ImageData(imageBytes, image.columns, image.rows);\n}\n\nfunction readFileAsHtmlImage(file: File): Promise<HTMLImageElement> {\n  return readFileAsDataUrl(file).then(\n    (url) =>\n      new Promise((resolve, reject) => {\n        const img = document.createElement(\"img\");\n        img.src = url;\n        img.addEventListener(\"load\", () => resolve(img));\n        img.addEventListener(\"error\", reject);\n      })\n  );\n}\n\nfunction readFileAsDataUrl(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => resolve(reader.result as string));\n    reader.addEventListener(\"error\", () => reject(reader.error));\n    reader.readAsDataURL(file);\n  });\n}\n\nconst CropMenuConfig = {\n  OverlayColor: \"#000a\",\n\n  CropSquareColor: \"#08b\",\n  CropSquareLineWidth: 3,\n  GlobalCornerHandleRadius: 10,\n} as const;\n\nfunction paintImageAndCropSquare(\n  image: HTMLImageElement,\n  crop: Square,\n  canvas: HTMLCanvasElement,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): void {\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const rect = canvas.getBoundingClientRect();\n  const scale = canvas.width / rect.width;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(image, 0, 0);\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  paintOverlay();\n  paintCompressedImage();\n  paintCropSquare();\n\n  return;\n\n  function paintOverlay(): void {\n    const cropBottom = crop.y + crop.size;\n    const cropRight = crop.x + crop.size;\n    ctx.fillStyle = CropMenuConfig.OverlayColor;\n    ctx.fillRect(0, 0, canvas.width, crop.y);\n    ctx.fillRect(0, cropBottom, canvas.width, canvas.height - cropBottom);\n    ctx.fillRect(0, crop.y, crop.x, crop.size);\n    ctx.fillRect(cropRight, crop.y, canvas.width - cropRight, crop.size);\n  }\n\n  function paintCompressedImage(): void {\n    ctx.clearRect(crop.x, crop.y, crop.size, crop.size);\n\n    const compressed = cropAndCompress(\n      image,\n      crop,\n      shouldInvert,\n      darknessThreshold\n    );\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(compressed, crop.x, crop.y, crop.size, crop.size);\n  }\n\n  function paintCropSquare(): void {\n    ctx.strokeStyle = CropMenuConfig.CropSquareColor;\n    ctx.lineWidth = CropMenuConfig.CropSquareLineWidth;\n    ctx.strokeRect(crop.x, crop.y, crop.size, crop.size);\n\n    drawCropSquareCircle(crop.x, crop.y);\n    drawCropSquareCircle(crop.x + crop.size, crop.y);\n    drawCropSquareCircle(crop.x + crop.size, crop.y + crop.size);\n    drawCropSquareCircle(crop.x, crop.y + crop.size);\n  }\n\n  function drawCropSquareCircle(x: number, y: number): void {\n    const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n    ctx.moveTo(x, y);\n    ctx.beginPath();\n    ctx.arc(x, y, localRadius, 0, 2 * Math.PI);\n    ctx.closePath();\n\n    ctx.fillStyle = CropMenuConfig.CropSquareColor;\n    ctx.fill();\n  }\n}\n\nfunction applyWhiteBackground(srcCtx: CanvasRenderingContext2D): void {\n  const { width, height } = srcCtx.canvas;\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.fillStyle = \"#ffffff\";\n  ctx.fillRect(0, 0, width, height);\n  ctx.drawImage(srcCtx.canvas, 0, 0);\n\n  const imageData = ctx.getImageData(0, 0, width, height);\n  srcCtx.putImageData(imageData, 0, 0);\n}\n\nfunction getLocalPointerCoordinates(\n  event: React.MouseEvent | React.TouchEvent,\n  canvas: HTMLCanvasElement\n): { x: number; y: number } {\n  const boundingRect = canvas.getBoundingClientRect();\n  const { x, y } = getGlobalPointerCoordinates(event);\n  const xScale = canvas.width / boundingRect.width;\n  const yScale = canvas.height / boundingRect.height;\n  return {\n    x: xScale * (x - boundingRect.left),\n    y: yScale * (y - boundingRect.top),\n  };\n}\n\nfunction getGlobalPointerCoordinates(\n  event: React.MouseEvent | React.TouchEvent\n): { x: number; y: number } {\n  if (\"clientX\" in event) {\n    return { x: event.clientX, y: event.clientY };\n  } else {\n    return { x: event.touches[0].clientX, y: event.touches[0].clientY };\n  }\n}\n\nfunction applyPendingAdjustment(\n  square: Square,\n  adjustment: SquareAdjustment,\n  canvasWidth: number,\n  canvasHeight: number\n): Square {\n  const possiblyOutOfBounds = applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare(\n    square,\n    adjustment\n  );\n  return transformBackIntoBoundsIfNeeded(\n    possiblyOutOfBounds,\n    canvasWidth,\n    canvasHeight,\n    adjustment.dragged === Draggable.EntireSquare\n  );\n}\n\nfunction applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare(\n  square: Square,\n  adjustment: SquareAdjustment\n): Square {\n  if (isCornerAdjustment(adjustment)) {\n    const rect = {\n      x: square.x,\n      y: square.y,\n      width: square.size,\n      height: square.size,\n    };\n    const adjustedRect = applyPendingCornerAdjustmentToRect(rect, adjustment);\n    return clamp(adjustedRect, adjustment.dragged);\n  } else {\n    const dx = adjustment.currentX - adjustment.startX;\n    const dy = adjustment.currentY - adjustment.startY;\n    return applyTranslation(square, dx, dy);\n  }\n}\n\nfunction isCornerAdjustment(\n  adjustment: SquareAdjustment\n): adjustment is CornerAdjustment {\n  return adjustment.dragged !== Draggable.EntireSquare;\n}\n\nfunction applyPendingCornerAdjustmentToRect(\n  rect: Rect,\n  adjustment: CornerAdjustment\n): Rect {\n  const corner = adjustment.dragged;\n  const { currentX, currentY } = adjustment;\n\n  let left = rect.x;\n  let right = rect.x + rect.width;\n  let top = rect.y;\n  let bottom = rect.y + rect.height;\n\n  switch (corner) {\n    case Draggable.TopLeftCorner:\n      top = Math.min(currentY, bottom);\n      left = Math.min(currentX, right);\n      break;\n    case Draggable.TopRightCorner:\n      top = Math.min(currentY, bottom);\n      right = Math.max(currentX, left);\n      break;\n    case Draggable.BottomRightCorner:\n      bottom = Math.max(currentY, top);\n      right = Math.max(currentX, left);\n      break;\n    case Draggable.BottomLeftCorner:\n      bottom = Math.max(currentY, top);\n      left = Math.min(currentX, right);\n      break;\n  }\n\n  if (left > right) {\n    [left, right] = [right, left];\n  }\n  if (top > bottom) {\n    [top, bottom] = [bottom, top];\n  }\n\n  return {\n    x: left,\n    y: top,\n    width: right - left,\n    height: bottom - top,\n  };\n}\n\nfunction clamp(rect: Rect, dragged: Corner): Square {\n  const anchor = getDiagonal(dragged);\n  switch (anchor) {\n    case Draggable.TopLeftCorner:\n      return clampToTopLeft(rect);\n    case Draggable.TopRightCorner:\n      return clampToTopRight(rect);\n    case Draggable.BottomRightCorner:\n      return clampToBottomRight(rect);\n    case Draggable.BottomLeftCorner:\n      return clampToBottomLeft(rect);\n  }\n}\n\nfunction clampToTopLeft(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x, y, size };\n}\n\nfunction clampToTopRight(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x: width > height ? x + width - size : x, y, size };\n}\n\nfunction clampToBottomRight(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return {\n    x: width > height ? x + width - size : x,\n    y: height > width ? y + height - size : y,\n    size,\n  };\n}\n\nfunction clampToBottomLeft(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x, y: height > width ? y + height - size : y, size };\n}\n\nfunction getDiagonal(corner: Corner): Corner {\n  switch (corner) {\n    case Draggable.TopLeftCorner:\n      return Draggable.BottomRightCorner;\n    case Draggable.TopRightCorner:\n      return Draggable.BottomLeftCorner;\n    case Draggable.BottomRightCorner:\n      return Draggable.TopLeftCorner;\n    case Draggable.BottomLeftCorner:\n      return Draggable.TopRightCorner;\n  }\n}\n\nfunction applyTranslation(square: Square, dx: number, dy: number): Square {\n  return { x: square.x + dx, y: square.y + dy, size: square.size };\n}\n\nfunction getHoveredOverDraggable(\n  square: Square,\n  x: number,\n  y: number,\n  localRadius: number\n): Option<Draggable> {\n  if (Math.hypot(x - square.x, y - square.y) <= localRadius) {\n    return option.some(Draggable.TopLeftCorner);\n  } else if (\n    Math.hypot(x - (square.x + square.size), y - square.y) <= localRadius\n  ) {\n    return option.some(Draggable.TopRightCorner);\n  } else if (\n    Math.hypot(x - (square.x + square.size), y - (square.y + square.size)) <=\n    localRadius\n  ) {\n    return option.some(Draggable.BottomRightCorner);\n  } else if (\n    Math.hypot(x - square.x, y - (square.y + square.size)) <= localRadius\n  ) {\n    return option.some(Draggable.BottomLeftCorner);\n  } else if (\n    x > square.x &&\n    x < square.x + square.size &&\n    y > square.y &&\n    y < square.y + square.size\n  ) {\n    return option.some(Draggable.EntireSquare);\n  } else {\n    return option.none();\n  }\n}\n\nfunction transformBackIntoBoundsIfNeeded(\n  square: Square,\n  width: number,\n  height: number,\n  preserveSize: boolean\n): Square {\n  if (preserveSize) {\n    const { x, y, size } = square;\n\n    const maxX = width - size;\n    const maxY = height - size;\n\n    return {\n      x: Math.max(0, Math.min(x, maxX)),\n      y: Math.max(0, Math.min(y, maxY)),\n      size,\n    };\n  } else {\n    let { x, y, size } = square;\n\n    x = Math.max(0, Math.min(x, width));\n    y = Math.max(0, Math.min(y, height));\n\n    const maxSize = Math.min(width - x, height - y);\n    size = Math.min(size, maxSize);\n\n    return { x, y, size };\n  }\n}\n\nfunction cropAndCompress(\n  image: HTMLImageElement,\n  crop: Square,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): HTMLCanvasElement {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 28;\n  canvas.height = 28;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.drawImage(image, crop.x, crop.y, crop.size, crop.size, 0, 0, 28, 28);\n\n  applyGrayscale(ctx);\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  applyDarknessThreshold(ctx, darknessThreshold);\n\n  return canvas;\n}\n\nfunction invertContext(ctx: CanvasRenderingContext2D): void {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const bytes = imageData.data;\n  for (let i = 0; i < bytes.length; i += 4) {\n    bytes[i] = 255 - bytes[i];\n    bytes[i + 1] = 255 - bytes[i + 1];\n    bytes[i + 2] = 255 - bytes[i + 2];\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction applyGrayscale(ctx: CanvasRenderingContext2D): void {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const pixels = imageData.data;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const averageLightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    pixels[i] = averageLightness;\n    pixels[i + 1] = averageLightness;\n    pixels[i + 2] = averageLightness;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction applyDarknessThreshold(\n  ctx: CanvasRenderingContext2D,\n  darknessThreshold: number\n): void {\n  const lightnessThreshold = 1 - darknessThreshold;\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const pixels = imageData.data;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const averageLightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    const normalizedLightness = averageLightness / 255;\n    const roundedLightness = normalizedLightness < lightnessThreshold ? 0 : 255;\n    pixels[i] = roundedLightness;\n    pixels[i + 1] = roundedLightness;\n    pixels[i + 2] = roundedLightness;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction isDigit(s: string): boolean {\n  return /^\\d$/.test(s);\n}\n\nfunction getCustomImage(\n  state: CropState,\n  label: number,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): CustomImage {\n  const { cropSquare, uploadedImage } = state;\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 28;\n  canvas.height = 28;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(\n    uploadedImage,\n    cropSquare.x,\n    cropSquare.y,\n    cropSquare.size,\n    cropSquare.size,\n    0,\n    0,\n    28,\n    28\n  );\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  applyWhiteBackground(ctx);\n\n  const u8Matrix = getU8Matrix(\n    ctx.getImageData(0, 0, 28, 28),\n    darknessThreshold\n  );\n  return { u8Matrix, label };\n}\n\nfunction getU8Matrix(imageData: ImageData, darknessThreshold: number): Matrix {\n  const lightnessThreshold = 1 - darknessThreshold;\n\n  const { data } = imageData;\n  const u8s = new Array(data.length / 4);\n  for (let i = 0; i < data.length; i += 4) {\n    const averageLightness = Math.floor(\n      (data[i] + data[i + 1] + data[i + 2]) / 3\n    );\n    const normalizedLightness = averageLightness / 255;\n    const roundedLightness = normalizedLightness < lightnessThreshold ? 0 : 255;\n    const roundedDarkness = 255 - roundedLightness;\n    u8s[i / 4] = roundedDarkness;\n  }\n  return Matrix.columnVector(u8s);\n}\n\n/** Returns a float between 0 and 1. */\nfunction getAverageDarkness(image: HTMLImageElement): number {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.fillStyle = \"#ffffff\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  ctx.drawImage(image, 0, 0);\n\n  const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n  let totalLightness = 0;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const lightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    totalLightness += lightness;\n  }\n  const numberOfPixels = pixels.length / 4;\n  const averageLightness = Math.floor(totalLightness / numberOfPixels);\n  const averageDarkness = 255 - averageLightness;\n  return averageDarkness / 255;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { networkFactory } from \"./network/networkFactory\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n(window as any).networkFactory = networkFactory;\n"],"sourceRoot":""}