{"version":3,"sources":["workers/networkTester.ts","workers/networkTrainer.ts","matrix.ts","data/index.ts","data/mnist.ts","network/index.ts","random.ts","network/utils.ts","network/networks/ch3crossEntropyL2.ts","network/networkFactory.ts","workerMessages.ts","networkSerializer.ts","state.ts","stateSavers.ts","workers/networkTester.importable.js","workers/networkTrainer.importable.js","networkServices.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","Matrix","rows","columns","data","this","Float64Array","from","size","i","Math","random","initializer","map","length","some","row","Error","JSON","stringify","flat","entries","slice","n","out","thisData","outData","outSize","other","TypeError","subtractInto","clone","otherData","multiplyInto","zeros","thisRows","otherColumns","thisColumns","outColumns","thisR","otherC","dot","thisC","transposeInto","r","c","f","applyElementwiseInto","name","thisSize","decimals","entryStrings","Array","rowMajorOrderEntries","entry","toFixed","entryStringLengths","s","maxLength","max","topAndBottomBorder","repeat","str","leftpad","minLength","fillCharacter","diff","Idx3FileFormat","offset","requiredValue","Idx1FileFormat","getLabeledImages","imagesBuffer","labelsBuffer","images","buffer","bytes","Uint8Array","actual","getInt32MsbFirst","expected","toString","assertIdx3MagicNumberIsCorrect","numberOfImages","imagesParsed","firstPixelIndex","vectorEntries","j","matrix","columnVector","getImages","labels","assertIdx1MagicNumberIsCorrect","numberOfLabels","firstLabelIndex","getLabels","labeledImages","inputs","label","convertLabelToVector","image","fill","outputs","location","self","TRAINING_IMAGES_URL","url","resolve","href","TRAINING_LABELS_URL","TEST_IMAGES_URL","TEST_LABELS_URL","trainingImagesProm","getArrayBuffer","trainingLabelsProm","testImagesProm","testLabelsProm","fetch","then","response","status","arrayBuffer","statusText","text","getErrorMessage","errorMessage","Promise","reject","WeightInitializationMethod","mnistProm","all","trainingImagesBuffer","trainingLabelsBuffer","testImagesBuffer","testLabelsBuffer","training","test","uniformRandom","normalRandom","mean","variance","u1","u2","z1","sqrt","log","cos","PI","divideIntoMiniBatches","trainingData","miniBatchSize","arr","exclMax","floor","temp","shuffle","miniBatches","push","argmax","maxIndex","value","Chapter3CrossEntropyL2Network","weights","biases","numberOfLayers","temp_totalWeightGradients","temp_totalBiasGradients","temp_weightedSums","temp_activations","temp_errors","temp_weightGradients","temp_biasGradients","temp_transposedActivations","temp_weightCosts","temp_transposedWeights","temp_sigmaPrimeOfWeightedSums","layerSizes","getZeroMatrixMap","weightedSums","activations","outputLayer","transposedActivations","transposedWeights","initializationMethod","inputLayer","outputLayerSize","inputLayerSize","method","Uniform","LargeGaussian","SmallGaussian","initializeWeights","hyperParams","testData","batchSize","epochs","learningRate","trainingDataSize","epoch","miniBatch","getTotalGradients","regularizationRate","weightGradients","biasGradients","mutMultiplyScalar","mutSubtract","undefined","accuracyRate","resetTotalGradientTemps","totalWeightGradients","totalBiasGradients","getGradients","mutAdd","setToZero","performForwardPass","errors","lastLayerError","multiplyScalarInto","copyInto","error","mutHadamard","sigmaPrime","sigma","correctClassifications","correct","total","z","exp","sigmaZ","zeroMatrices","WorkerMessageType","networkFactory","fromLayerSizes","fromWeightsAndBiases","serializeNetwork","network","getWeights","getBiases","entryCount","weightMatrix","weightMatrixSize","biasMatrix","biasMatrixSize","cursor","weightMatrixEntries","set","biasMatrixEntries","getEntries","numberOfBytesForSizes","Uint32Array","BYTES_PER_ELEMENT","ArrayBuffer","uints","deserializeNetwork","fromRowMajorOrderEntries","toArray","subarray","floats","StateType","Draggable","LocalStorageKeys","NetworkTesterWorker","NetworkTrainerWorker","trainNetwork","listeners","worker","addEventListener","event","message","messageType","TrainingEpochCompleteNotification","onEpochComplete","notifyListenersOfEpochCompletion","TerminateTrainingResponse","updatedNetwork","networkBuffer","onTerminate","terminate","notifyListenersOfTermination","start","StartTrainingRequest","postMessage","TerminateTrainingRequest","testNetwork","onComplete","notifyListenersOfTestingCompletion","StartTestingRequest","imageSaver","stateStr","localStorage","getItem","CustomImages","option","none","decodeBytes","byteVectors","imageBytes","u8Matrix","encodeBytes","setItem","networkSaver","NeuralNetwork","numberOfBytes","toU32","charCodeAt","code","byte","u8s","u16s","ceil","String","fromCharCode","stringifyU16s","App","props","viewImageCanvasRef","customImageInputRef","cropImageCanvasRef","state","match","mnist","stateType","CreateNetwork","hiddenLayerSizeInputValues","weightInitializationMethod","previousNetwork","NetworkMainMenu","React","createRef","bindMethods","window","app","onWeightInitializationMethodChange","bind","onCreateNetworkClick","onTrainClick","onTestClick","onViewClick","onResetClick","onBatchSizeInputValueChange","onEpochsInputValueChange","onLearningRateInputValueChange","onRegularizationRateInputValueChange","onStartTrainingClick","onTrainerTerminate","onExitHyperParameterMenuClick","onStopTrainingClick","onTestMenuExitClick","onExitViewMenuClick","onPreviousImageClick","onNextImageClick","onCustomImageInputChange","enterCropMenu","onCropImageCanvasPointerDown","onCropImageCanvasPointerMove","onCropImageCanvasPointerUp","onShouldInvertInputChange","onDarknessThresholdChange","onCustomImageLabelInputValueChange","onDeleteCustomImageClick","onAddCustomImageClick","setState","newState","MnistLoadingError","saveState","customImages","renderCreateNetworkMenu","renderNetworkMainMenu","HyperParameterMenu","renderHyperParameterMenu","TrainingInProgress","renderTrainingInProgressMenu","Test","renderTestMenu","View","renderViewMenu","Crop","renderCropMenu","renderMnistLoadingErrorScreen","className","onClick","cancelNetworkReset","addLayerBelow","hiddenLayerIndex","layerIndex","key","type","isPositiveIntStr","onChange","e","changeLayerSizeValue","target","deleteLayer","disabled","join","batchSizeInputValue","epochsInputValue","isPositiveNumStr","learningRateInputValue","regularizationRateInputValue","epochAccuracyRates","sort","a","b","rate","err","ok","viewedImage","getViewedImage","guess","outputActivations","maxConfidence","confidence","digit","guessDigit","viewedIndex","ref","accept","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","hoveredOverDraggable","draggable","TopLeftCorner","BottomRightCorner","TopRightCorner","BottomLeftCorner","EntireSquare","onMouseDown","onTouchStart","checked","shouldInvertImage","darknessThreshold","min","step","isDigit","labelInputValue","ifSome","canvas","current","width","height","ctx","getContext","imageData","Uint8ClampedArray","lightness","ImageData","getImageData","putImageData","paintImage","adjustedCropSquare","pendingCropAdjustment","cropSquare","adjustment","applyPendingAdjustment","paintImageAndCropSquare","uploadedImage","changedLayerIndex","newValue","concat","expectState","every","hiddenLayerSizes","networkTester","updateState","result","updateOrUpdater","unwrapOr","networkTrainer","prevState","ifErr","tester","newIndex","file","input","files","reader","FileReader","readAsDataURL","readFileAsDataUrl","img","document","createElement","src","getAverageDarkness","x","y","square","getLocalPointerCoordinates","rect","getBoundingClientRect","scale","localRadius","CropMenuConfig","GlobalCornerHandleRadius","optDragged","hypot","dragged","startX","startY","currentX","currentY","oldAdjustment","updatedAdjustment","getHoveredOverDraggable","updatedCropSquare","newThreshold","newImage","shouldInvert","imageSmoothingEnabled","drawImage","invertContext","srcCtx","fillStyle","fillRect","applyWhiteBackground","getU8Matrix","getCustomImage","updatedCustomImages","newImageIndex","customImageIndex","newCustomImages","Component","Number","isFinite","immutApplyElementwise","OverlayColor","CropSquareColor","CropSquareLineWidth","crop","clearRect","cropBottom","cropRight","paintOverlay","compressed","pixels","averageLightness","applyGrayscale","lightnessThreshold","roundedLightness","applyDarknessThreshold","cropAndCompress","paintCompressedImage","strokeStyle","lineWidth","strokeRect","drawCropSquareCircle","moveTo","beginPath","arc","closePath","boundingRect","clientX","clientY","touches","getGlobalPointerCoordinates","xScale","yScale","left","top","canvasWidth","canvasHeight","preserveSize","maxX","maxY","maxSize","transformBackIntoBoundsIfNeeded","isCornerAdjustment","corner","getDiagonal","clampToTopLeft","clampToTopRight","clampToBottomRight","clampToBottomLeft","clamp","right","bottom","applyPendingCornerAdjustmentToRect","dx","dy","applyTranslation","applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare","roundedDarkness","totalLightness","numberOfPixels","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.535282b6.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"09657ec25337ad88b380.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"d93723539f32b8051de9.worker.js\");\n};","export class Matrix {\n  /** @deprecated Use `Matrix.fromEntryInitializer(rows, columns, uniformRng)` instead. */\n  static randomUniform(rows: number, columns: number): Matrix {\n    const size = rows * columns;\n    const data = new Float64Array(size);\n    for (let i = 0; i < size; i++) {\n      data[i] = Math.random() * 2 - 1;\n    }\n    return new Matrix(rows, columns, data);\n  }\n\n  static fromEntryInitializer(\n    rows: number,\n    columns: number,\n    initializer: () => number\n  ) {\n    const data = new Float64Array(rows * columns).map(initializer);\n    return new Matrix(rows, columns, data);\n  }\n\n  static zeros(rows: number, columns: number): Matrix {\n    const data = new Float64Array(rows * columns);\n    return new Matrix(rows, columns, data);\n  }\n\n  static fromRows(rows: number[][]): Matrix {\n    const columns = rows[0].length;\n    if (rows.some((row) => row.length !== columns)) {\n      throw new Error(\n        \"Cannot create a matrix from a jagged array: \" + JSON.stringify(rows)\n      );\n    }\n\n    return new Matrix(rows.length, columns, rows.flat());\n  }\n\n  static columnVector(entries: number[]): Matrix {\n    return new Matrix(entries.length, 1, entries);\n  }\n\n  static fromRowMajorOrderEntries(\n    rows: number,\n    columns: number,\n    entries: ArrayLike<number>\n  ): Matrix {\n    if (entries.length !== rows * columns) {\n      throw new Error(\n        \"Expected \" +\n          rows * columns +\n          \" entries but instead got \" +\n          entries.length +\n          \".\"\n      );\n    }\n\n    return new Matrix(rows, columns, entries);\n  }\n\n  public readonly rows: number;\n  public readonly columns: number;\n  private data: Float64Array;\n\n  private constructor(rows: number, columns: number, data: ArrayLike<number>) {\n    this.rows = rows;\n    this.columns = columns;\n    this.data = data instanceof Float64Array ? data : Float64Array.from(data);\n  }\n\n  clone(): Matrix {\n    return new Matrix(this.rows, this.columns, this.data.slice());\n  }\n\n  mutMultiplyScalar(n: number): this {\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] *= n;\n    }\n    return this;\n  }\n\n  multiplyScalarInto(n: number, out: Matrix): Matrix {\n    if (!(this.rows === out.rows && this.columns === out.columns)) {\n      throw new Error(\n        \"Cannot multiply a scalar \" +\n          n +\n          \" by a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix. The out matrix must have the same dimensions as this matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const outData = out.data;\n    const outSize = outData.length;\n    for (let i = 0; i < outSize; i++) {\n      outData[i] = n * thisData[i];\n    }\n    return out;\n  }\n\n  mutAdd(other: Matrix): this {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] += other.data[i];\n    }\n\n    return this;\n  }\n\n  mutSubtract(other: Matrix): this {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] -= other.data[i];\n    }\n\n    return this;\n  }\n\n  immutSubtract(other: Matrix): Matrix {\n    return this.subtractInto(other, this.clone());\n  }\n\n  subtractInto(other: Matrix, out: Matrix): Matrix {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const otherData = other.data;\n    const outData = out.data;\n    const outSize = outData.length;\n    for (let i = 0; i < outSize; i++) {\n      outData[i] = thisData[i] - otherData[i];\n    }\n    return out;\n  }\n\n  immutMultiply(other: Matrix): Matrix {\n    return this.multiplyInto(other, Matrix.zeros(this.rows, other.columns));\n  }\n\n  multiplyInto(other: Matrix, out: Matrix): Matrix {\n    if (this.columns !== other.rows) {\n      throw new TypeError(\n        \"Cannot multiply a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix with a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    if (!(this.rows === out.rows && other.columns === out.columns)) {\n      throw new TypeError(\n        \"Cannot multiply a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix with a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const otherData = other.data;\n    const outData = out.data;\n    const thisRows = this.rows;\n    const otherColumns = other.columns;\n    const thisColumns = this.columns;\n    const outColumns = out.columns;\n\n    for (let thisR = 0; thisR < thisRows; thisR++) {\n      for (let otherC = 0; otherC < otherColumns; otherC++) {\n        let dot = 0;\n        for (let thisC = 0; thisC < thisColumns; thisC++) {\n          dot +=\n            thisData[thisR * thisColumns + thisC] *\n            otherData[thisC * otherColumns + otherC];\n        }\n        outData[thisR * outColumns + otherC] = dot;\n      }\n    }\n    return out;\n  }\n\n  mutHadamard(other: Matrix): this {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot take the Hadamard product of a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix and a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] *= other.data[i];\n    }\n    return this;\n  }\n\n  immutTranspose(): Matrix {\n    return this.transposeInto(\n      new Matrix(this.columns, this.rows, new Float64Array(this.data.length))\n    );\n  }\n\n  transposeInto(out: Matrix): Matrix {\n    if (!(this.rows === out.columns && this.columns === out.rows)) {\n      throw new Error(\n        \"Cannot transpose a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const thisRows = this.rows;\n    const thisColumns = this.columns;\n    const outData = out.data;\n    const outColumns = out.columns;\n\n    for (let r = 0; r < thisRows; r++) {\n      for (let c = 0; c < thisColumns; c++) {\n        outData[c * outColumns + r] = thisData[r * thisColumns + c];\n      }\n    }\n    return out;\n  }\n\n  rowMajorOrderEntries(): ArrayLike<number> {\n    return this.data;\n  }\n\n  immutApplyElementwise(f: (entry: number) => number): Matrix {\n    return this.applyElementwiseInto(f, this.clone());\n  }\n\n  applyElementwiseInto(f: (entry: number) => number, out: Matrix): Matrix {\n    if (!(this.rows === out.rows && this.columns === out.columns)) {\n      throw new TypeError(\n        \"Cannot apply \" +\n          f.name +\n          \" elementwise on a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix. Matrices must have the same dimensions.\"\n      );\n    }\n\n    const thisData = this.data;\n    const outData = out.data;\n    const outSize = outData.length;\n    for (let i = 0; i < outSize; i++) {\n      outData[i] = f(thisData[i]);\n    }\n    return out;\n  }\n\n  copyInto(out: Matrix): Matrix {\n    if (!(this.rows === out.rows && this.columns === out.columns)) {\n      throw new Error(\n        \"Cannot copy a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix into a \" +\n          out.rows +\n          \"x\" +\n          out.columns +\n          \" matrix.\"\n      );\n    }\n\n    const thisData = this.data;\n    const outData = out.data;\n    const outSize = outData.length;\n    for (let i = 0; i < outSize; i++) {\n      outData[i] = thisData[i];\n    }\n    return out;\n  }\n\n  setToZero(): void {\n    const thisData = this.data;\n    const thisSize = thisData.length;\n    for (let i = 0; i < thisSize; i++) {\n      thisData[i] = 0;\n    }\n  }\n\n  print(decimals: number): string {\n    const entries = Array.from(this.rowMajorOrderEntries());\n    const entryStrings = entries.map((entry) => entry.toFixed(decimals));\n    const entryStringLengths = entryStrings.map((s) => s.length);\n    const maxLength = Math.max(...entryStringLengths);\n\n    const topAndBottomBorder = \"-\".repeat(\n      this.columns * (maxLength + \" | \".length) - \" | \".length\n    );\n\n    let str = topAndBottomBorder + \"\\n\";\n\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        str +=\n          leftpad(entryStrings[r * this.columns + c], maxLength, \" \") + \" | \";\n      }\n\n      str = str.slice(0, -\" | \".length);\n\n      str += \"\\n\";\n    }\n\n    str += topAndBottomBorder;\n    return str;\n  }\n}\n\nfunction leftpad(s: string, minLength: number, fillCharacter: string): string {\n  const diff = minLength - s.length;\n  if (diff <= 0) {\n    return s;\n  }\n\n  return fillCharacter.repeat(diff) + s;\n}\n","import { Matrix } from \"../matrix\";\n\nexport interface LabeledImage {\n  rows: number;\n  columns: number;\n  inputs: Matrix;\n  label: number;\n}\n\nexport interface VectorLabeledImage {\n  rows: number;\n  columns: number;\n  inputs: Matrix;\n  outputs: Matrix;\n}\n\ninterface ImageMatrix {\n  rows: number;\n  columns: number;\n  matrix: Matrix;\n}\n\nexport interface AccuracyRate {\n  correct: number;\n  total: number;\n}\n\nconst Idx3FileFormat = {\n  MagicNumber: { offset: 0, requiredValue: 0x00000803 },\n  NumberOfImages: { offset: 4 },\n  NumberOfRows: { offset: 8 },\n  NumberOfColumns: { offset: 12 },\n} as const;\n\nconst Idx1FileFormat = {\n  MagicNumber: { offset: 0, requiredValue: 0x00000801 },\n  NumberOfLabels: { offset: 4 },\n} as const;\n\nexport function getLabeledImages(\n  imagesBuffer: ArrayBuffer,\n  labelsBuffer: ArrayBuffer\n): LabeledImage[] {\n  const images = getImages(imagesBuffer);\n  const labels = getLabels(labelsBuffer);\n\n  if (images.length !== labels.length) {\n    throw new Error(\n      \"There are \" +\n        images.length +\n        \" images, but \" +\n        labels.length +\n        \" labels. There must be the same amount of images and labels.\"\n    );\n  }\n\n  const labeledImages: LabeledImage[] = new Array(images.length);\n  for (let i = 0; i < images.length; i++) {\n    const { rows, columns, matrix } = images[i];\n    labeledImages[i] = { rows, columns, inputs: matrix, label: labels[i] };\n  }\n  return labeledImages;\n}\n\nfunction getImages(buffer: ArrayBuffer): ImageMatrix[] {\n  const bytes = new Uint8Array(buffer);\n\n  assertIdx3MagicNumberIsCorrect(bytes);\n\n  const numberOfImages = getInt32MsbFirst(\n    bytes,\n    Idx3FileFormat.NumberOfImages.offset\n  );\n  const rows = getInt32MsbFirst(bytes, Idx3FileFormat.NumberOfRows.offset);\n  const columns = getInt32MsbFirst(\n    bytes,\n    Idx3FileFormat.NumberOfColumns.offset\n  );\n  const size = rows * columns;\n\n  let imagesParsed = 0;\n  const images: ImageMatrix[] = new Array(numberOfImages);\n  const firstPixelIndex = Idx3FileFormat.NumberOfColumns.offset + 4;\n\n  while (imagesParsed < numberOfImages) {\n    const vectorEntries: number[] = new Array(size);\n    for (let j = 0; j < size; j++) {\n      vectorEntries[j] = bytes[firstPixelIndex + imagesParsed * size + j] / 255;\n    }\n\n    images[imagesParsed] = {\n      rows,\n      columns,\n      matrix: Matrix.columnVector(vectorEntries),\n    };\n    imagesParsed++;\n  }\n\n  return images;\n}\n\nfunction assertIdx3MagicNumberIsCorrect(bytes: Uint8Array): void {\n  const actual = getInt32MsbFirst(bytes, Idx3FileFormat.MagicNumber.offset);\n  const expected = Idx3FileFormat.MagicNumber.requiredValue;\n  if (actual !== expected) {\n    throw new Error(\n      \"The first 4 bytes of an idx3 file must be 0x\" +\n        expected.toString(16) +\n        \", but the first 4 bytes of the provided file were 0x\" +\n        actual.toString(16)\n    );\n  }\n}\n\nfunction getInt32MsbFirst(bytes: Uint8Array, offset: number): number {\n  return (\n    (bytes[offset] << 24) |\n    (bytes[offset + 1] << 16) |\n    (bytes[offset + 2] << 8) |\n    bytes[offset + 3]\n  );\n}\n\nfunction getLabels(buffer: ArrayBuffer): number[] {\n  const bytes = new Uint8Array(buffer);\n\n  assertIdx1MagicNumberIsCorrect(bytes);\n\n  const numberOfLabels = getInt32MsbFirst(\n    bytes,\n    Idx1FileFormat.NumberOfLabels.offset\n  );\n  const labels: number[] = new Array(numberOfLabels);\n  const firstLabelIndex = Idx1FileFormat.NumberOfLabels.offset + 4;\n  for (let i = 0; i < numberOfLabels; i++) {\n    labels[i] = bytes[firstLabelIndex + i];\n  }\n  return labels;\n}\n\nfunction assertIdx1MagicNumberIsCorrect(bytes: Uint8Array): void {\n  const actual = getInt32MsbFirst(bytes, Idx1FileFormat.MagicNumber.offset);\n  const expected = Idx1FileFormat.MagicNumber.requiredValue;\n  if (actual !== expected) {\n    throw new Error(\n      \"The first 4 bytes of an idx1 file must be 0x\" +\n        expected.toString(16) +\n        \", but the first 4 bytes of the provided file were 0x\" +\n        actual.toString(16)\n    );\n  }\n}\n\nexport function convertLabelToVector(image: LabeledImage): VectorLabeledImage {\n  const entries: number[] = new Array(10).fill(0);\n  entries[image.label] = 1;\n  const outputs = Matrix.columnVector(entries);\n  return {\n    rows: image.rows,\n    columns: image.columns,\n    inputs: image.inputs,\n    outputs,\n  };\n}\n\nexport function convertVectorToLabel(image: VectorLabeledImage): LabeledImage {\n  return {\n    rows: image.rows,\n    columns: image.columns,\n    inputs: image.inputs,\n    label: getLabel(image),\n  };\n}\n\nfunction getLabel(image: VectorLabeledImage): number {\n  const entries = image.outputs.rowMajorOrderEntries();\n  for (let i = 0; i < entries.length; i++) {\n    if (entries[i] === 1) {\n      return i;\n    }\n  }\n  throw new Error(\"A VectorLabeledImage has an output vector without a 1.\");\n}\n","import url from \"url\";\nimport {\n  convertLabelToVector,\n  getLabeledImages,\n  LabeledImage,\n  VectorLabeledImage,\n} from \".\";\n\nexport interface MnistData {\n  training: VectorLabeledImage[];\n  test: LabeledImage[];\n}\n\ndeclare const self: { location: Window[\"location\"] };\n\nconst { location } = self;\n\nconst TRAINING_IMAGES_URL = url.resolve(\n  location.href,\n  \"./assets/train60k-images-idx3-ubyte\"\n);\nconst TRAINING_LABELS_URL = url.resolve(\n  location.href,\n  \"./assets/train60k-labels-idx1-ubyte\"\n);\nconst TEST_IMAGES_URL = url.resolve(\n  location.href,\n  \"./assets/test10k-images-idx3-ubyte\"\n);\nconst TEST_LABELS_URL = url.resolve(\n  location.href,\n  \"./assets/test10k-labels-idx1-ubyte\"\n);\nconst trainingImagesProm: Promise<ArrayBuffer> = getArrayBuffer(\n  TRAINING_IMAGES_URL\n);\nconst trainingLabelsProm: Promise<ArrayBuffer> = getArrayBuffer(\n  TRAINING_LABELS_URL\n);\nconst testImagesProm: Promise<ArrayBuffer> = getArrayBuffer(TEST_IMAGES_URL);\nconst testLabelsProm: Promise<ArrayBuffer> = getArrayBuffer(TEST_LABELS_URL);\n\nfunction getArrayBuffer(url: string): Promise<ArrayBuffer> {\n  return fetch(url).then((response) => {\n    if (200 <= response.status && response.status <= 299) {\n      return response.arrayBuffer();\n    } else {\n      return getErrorMessage(response).then((errorMessage) =>\n        Promise.reject(\n          new Error(\n            \"Tried to fetch \" +\n              url +\n              \" but got the following error: \" +\n              errorMessage\n          )\n        )\n      );\n    }\n  });\n}\n\nfunction getErrorMessage(response: Response): Promise<string> {\n  const { status, statusText } = response;\n  return response\n    .text()\n    .then((text) => status + \" (\" + statusText + \"): \" + text);\n}\n\nexport const mnistProm: Promise<MnistData> = Promise.all([\n  trainingImagesProm,\n  trainingLabelsProm,\n  testImagesProm,\n  testLabelsProm,\n]).then(\n  ([\n    trainingImagesBuffer,\n    trainingLabelsBuffer,\n    testImagesBuffer,\n    testLabelsBuffer,\n  ]) => {\n    return {\n      training: getLabeledImages(\n        trainingImagesBuffer,\n        trainingLabelsBuffer\n      ).map(convertLabelToVector),\n      test: getLabeledImages(testImagesBuffer, testLabelsBuffer),\n    };\n  }\n);\n","import { LabeledImage, VectorLabeledImage, AccuracyRate } from \"../data\";\nimport { Matrix } from \"../matrix\";\nimport { DeepReadonly } from \"../deepReadonly\";\n\nexport interface Network {\n  readonly layerSizes: number[];\n\n  stochasticGradientDescent(\n    trainingData: VectorLabeledImage[],\n    hyperparams: StochasticGradientDescentHyperParameters,\n    evaluationData?: LabeledImage[]\n  ): void;\n\n  performForwardPass(inputColumnVector: Matrix): WeightedSumsAndActivations;\n\n  test(testData: LabeledImage[]): AccuracyRate;\n\n  getWeights(): DeepReadonly<MatrixMap>;\n\n  getBiases(): DeepReadonly<MatrixMap>;\n}\n\nexport interface WeightedSumsAndActivations {\n  weightedSums: MatrixMap;\n  activations: MatrixMap;\n}\n\n/**\n * `MatrixMap` differs from `ArrayLike<Matrix>` in that\n * indices start at `1`. Because the input layer (layer\n * `0`) does not have a weight matrix or bias matrix,\n * `MatrixMap[0]` will be undefined.\n */\nexport interface MatrixMap {\n  [layer: number]: Matrix;\n  length: number;\n}\n\nexport enum WeightInitializationMethod {\n  Uniform = \"Uniform\",\n  LargeGaussian = \"LargeGaussian\",\n  SmallGaussian = \"SmallGaussian\",\n}\n\nexport interface StochasticGradientDescentHyperParameters {\n  batchSize: number;\n  epochs: number;\n  learningRate: number;\n  regularizationRate: number;\n}\n","/** Generates a random float on the interval [-1, 1). */\nexport function uniformRandom(): number {\n  return Math.random() * 2 - 1;\n}\n\n// https://en.wikipedia.org/wiki/Box-Muller_transform\nexport function normalRandom(mean: number = 0, variance: number = 1): number {\n  let u1 = 0;\n  let u2 = 0;\n\n  // Convert [0,1) to (0,1)\n  while (u1 === 0) {\n    u1 = Math.random();\n  }\n  while (u2 === 0) {\n    u2 = Math.random();\n  }\n\n  const z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n  return variance * z1 + mean;\n}\n","import { MatrixMap, WeightInitializationMethod } from \".\";\nimport { VectorLabeledImage } from \"../data\";\nimport { uniformRandom, normalRandom } from \"../random\";\n\nexport interface Gradients {\n  weightGradients: MatrixMap;\n  biasGradients: MatrixMap;\n}\n\nexport function divideIntoMiniBatches(\n  trainingData: VectorLabeledImage[],\n  miniBatchSize: number\n): VectorLabeledImage[][] {\n  shuffle(trainingData);\n  const miniBatches: VectorLabeledImage[][] = [];\n  for (let i = 0; i < trainingData.length; i += miniBatchSize) {\n    miniBatches.push(trainingData.slice(i, i + miniBatchSize));\n  }\n  return miniBatches;\n}\n\nfunction shuffle(arr: unknown[]): void {\n  const SHUFFLE_TIMES = 512;\n\n  for (let n = 0; n < SHUFFLE_TIMES; n++) {\n    for (let i = arr.length - 1; i >= 1; i--) {\n      let j = randInt(i + 1);\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n}\n\nfunction randInt(exclMax: number): number {\n  return Math.floor(Math.random() * exclMax);\n}\n\nexport function argmax(arr: ArrayLike<number>): number {\n  let maxIndex = 0;\n  let max = arr[maxIndex];\n  for (let i = 1; i < arr.length; i++) {\n    const value = arr[i];\n    if (value > max) {\n      max = value;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n\nexport function initializeWeights(\n  method: WeightInitializationMethod,\n  weights: MatrixMap\n): void {\n  for (let i = 1; i < weights.length; i++) {\n    const matrix = weights[i];\n    const initializer: () => number = (() => {\n      switch (method) {\n        case WeightInitializationMethod.Uniform:\n          return uniformRandom;\n        case WeightInitializationMethod.LargeGaussian:\n          return () => normalRandom(0, 1);\n        case WeightInitializationMethod.SmallGaussian:\n          return () => normalRandom(0, 1 / Math.sqrt(matrix.columns));\n      }\n    })();\n    matrix.applyElementwiseInto(initializer, matrix);\n  }\n}\n","import {\n  MatrixMap,\n  Network,\n  StochasticGradientDescentHyperParameters,\n  WeightedSumsAndActivations,\n  WeightInitializationMethod,\n} from \"..\";\nimport { AccuracyRate, LabeledImage, VectorLabeledImage } from \"../../data\";\nimport { DeepReadonly } from \"../../deepReadonly\";\nimport { Matrix } from \"../../matrix\";\nimport {\n  argmax,\n  divideIntoMiniBatches,\n  Gradients,\n  initializeWeights,\n} from \"../utils\";\n\n/** Cross-entropy cost, sigmoid activation, L2 regularization */\nexport class Chapter3CrossEntropyL2Network implements Network {\n  private numberOfLayers: number;\n  private weights: MatrixMap;\n  private biases: MatrixMap;\n  private log: (accuracyRate: AccuracyRate, epoch: number) => void;\n\n  private temp_totalWeightGradients: MatrixMap;\n  private temp_totalBiasGradients: MatrixMap;\n\n  private temp_weightedSums: MatrixMap;\n  private temp_activations: MatrixMap;\n\n  private temp_errors: MatrixMap;\n  private temp_weightGradients: MatrixMap;\n  private temp_biasGradients: MatrixMap;\n  private temp_transposedActivations: MatrixMap;\n  private temp_weightCosts: MatrixMap;\n  private temp_transposedWeights: MatrixMap;\n  private temp_sigmaPrimeOfWeightedSums: MatrixMap;\n\n  public readonly layerSizes: number[];\n\n  static fromWeightsAndBiases(weights: MatrixMap, biases: MatrixMap): Network {\n    return new Chapter3CrossEntropyL2Network(weights, biases);\n  }\n\n  static fromLayerSizes(\n    layerSizes: number[],\n    initializationMethod: WeightInitializationMethod,\n    log?: (accuracyRate: AccuracyRate, epoch: number) => void\n  ): Network {\n    const numberOfLayers = layerSizes.length;\n\n    const weights: MatrixMap = new Array(numberOfLayers);\n    const biases: MatrixMap = new Array(numberOfLayers);\n    for (let outputLayer = 1; outputLayer < numberOfLayers; outputLayer++) {\n      const inputLayer = outputLayer - 1;\n      const outputLayerSize = layerSizes[outputLayer];\n      const inputLayerSize = layerSizes[inputLayer];\n      weights[outputLayer] = Matrix.zeros(outputLayerSize, inputLayerSize);\n      biases[outputLayer] = Matrix.zeros(outputLayerSize, 1);\n    }\n\n    initializeWeights(initializationMethod, weights);\n\n    return new Chapter3CrossEntropyL2Network(weights, biases, log);\n  }\n\n  private constructor(\n    weights: MatrixMap,\n    biases: MatrixMap,\n    log?: (accuracyRate: AccuracyRate, epoch: number) => void\n  ) {\n    const layerSizes = [weights[1].columns];\n    for (let i = 1; i < weights.length; i++) {\n      layerSizes.push(weights[i].rows);\n    }\n\n    this.layerSizes = layerSizes;\n    this.numberOfLayers = layerSizes.length;\n    this.weights = weights;\n    this.biases = biases;\n    this.log = log || (() => {});\n\n    this.temp_totalWeightGradients = getZeroMatrixMap(weights);\n    this.temp_totalBiasGradients = getZeroMatrixMap(biases);\n\n    {\n      const weightedSums = [];\n      const activations = [Matrix.zeros(weights[1].columns, 1)];\n\n      for (\n        let outputLayer = 1;\n        outputLayer < this.numberOfLayers;\n        outputLayer++\n      ) {\n        weightedSums[outputLayer] = Matrix.zeros(weights[outputLayer].rows, 1);\n        activations[outputLayer] = Matrix.zeros(weights[outputLayer].rows, 1);\n      }\n\n      this.temp_weightedSums = weightedSums;\n      this.temp_activations = activations;\n    }\n\n    this.temp_errors = getZeroMatrixMap(this.temp_weightedSums);\n    this.temp_weightGradients = getZeroMatrixMap(weights);\n    this.temp_biasGradients = getZeroMatrixMap(biases);\n\n    {\n      const activations = this.temp_activations;\n      const transposedActivations: MatrixMap = new Array(activations.length);\n\n      for (\n        let outputLayer = 0;\n        outputLayer < activations.length;\n        outputLayer++\n      ) {\n        transposedActivations[outputLayer] = Matrix.zeros(\n          activations[outputLayer].columns,\n          activations[outputLayer].rows\n        );\n      }\n\n      this.temp_transposedActivations = transposedActivations;\n    }\n\n    this.temp_weightCosts = getZeroMatrixMap(this.temp_weightGradients);\n\n    {\n      const { weights } = this;\n      const transposedWeights: MatrixMap = new Array(weights.length);\n      for (let i = 1; i < weights.length; i++) {\n        transposedWeights[i] = Matrix.zeros(\n          weights[i].columns,\n          weights[i].rows\n        );\n      }\n      this.temp_transposedWeights = transposedWeights;\n    }\n\n    this.temp_sigmaPrimeOfWeightedSums = getZeroMatrixMap(\n      this.temp_weightedSums\n    );\n  }\n\n  stochasticGradientDescent(\n    trainingData: VectorLabeledImage[],\n    hyperParams: StochasticGradientDescentHyperParameters,\n    testData?: LabeledImage[]\n  ): void {\n    const { batchSize, epochs, learningRate } = hyperParams;\n    const trainingDataSize = trainingData.length;\n\n    for (let epoch = 0; epoch < epochs; epoch++) {\n      const miniBatches = divideIntoMiniBatches(trainingData, batchSize);\n      for (const miniBatch of miniBatches) {\n        const { weightGradients, biasGradients } = this.getTotalGradients(\n          miniBatch,\n          hyperParams.regularizationRate,\n          trainingDataSize\n        );\n\n        for (let i = 1; i < this.numberOfLayers; i++) {\n          weightGradients[i].mutMultiplyScalar(learningRate / miniBatch.length);\n          biasGradients[i].mutMultiplyScalar(learningRate / miniBatch.length);\n\n          this.weights[i].mutSubtract(weightGradients[i]);\n          this.biases[i].mutSubtract(biasGradients[i]);\n        }\n      }\n\n      if (testData !== undefined) {\n        const accuracyRate = this.test(testData);\n        this.log(accuracyRate, epoch);\n      }\n    }\n  }\n\n  private getTotalGradients(\n    miniBatch: VectorLabeledImage[],\n    regularizationRate: number,\n    trainingDataSize: number\n  ): Gradients {\n    const {\n      weightGradients: totalWeightGradients,\n      biasGradients: totalBiasGradients,\n    } = this.resetTotalGradientTemps();\n\n    for (const image of miniBatch) {\n      const { weightGradients, biasGradients } = this.getGradients(\n        image,\n        regularizationRate,\n        trainingDataSize\n      );\n      for (let i = 1; i < this.numberOfLayers; i++) {\n        totalWeightGradients[i].mutAdd(weightGradients[i]);\n        totalBiasGradients[i].mutAdd(biasGradients[i]);\n      }\n    }\n\n    return {\n      weightGradients: totalWeightGradients,\n      biasGradients: totalBiasGradients,\n    };\n  }\n\n  private resetTotalGradientTemps(): Gradients {\n    const numberOfLayers = this.layerSizes.length;\n    const weightGradients = this.temp_totalWeightGradients;\n    const biasGradients = this.temp_totalBiasGradients;\n    for (let i = 1; i < numberOfLayers; i++) {\n      weightGradients[i].setToZero();\n      biasGradients[i].setToZero();\n    }\n    return { weightGradients, biasGradients };\n  }\n\n  private getGradients(\n    image: VectorLabeledImage,\n    regularizationRate: number,\n    trainingDataSize: number\n  ): Gradients {\n    const { numberOfLayers } = this;\n\n    const { weightedSums, activations } = this.performForwardPass(image.inputs);\n    const errors = this.temp_errors;\n    const weightGradients = this.temp_weightGradients;\n    const biasGradients = this.temp_biasGradients;\n\n    const lastLayerError = activations[this.numberOfLayers - 1].subtractInto(\n      image.outputs,\n      errors[numberOfLayers - 1]\n    );\n\n    lastLayerError\n      .multiplyInto(\n        activations[numberOfLayers - 2].transposeInto(\n          this.temp_transposedActivations[numberOfLayers - 2]\n        ),\n        weightGradients[numberOfLayers - 1]\n      )\n      .mutAdd(\n        this.weights[numberOfLayers - 1].multiplyScalarInto(\n          regularizationRate / trainingDataSize,\n          this.temp_weightCosts[numberOfLayers - 1]\n        )\n      );\n\n    lastLayerError.copyInto(biasGradients[numberOfLayers - 1]);\n\n    for (let i = this.numberOfLayers - 2; i >= 1; i--) {\n      const error = this.weights[i + 1]\n        .transposeInto(this.temp_transposedWeights[i + 1])\n        .multiplyInto(errors[i + 1], errors[i])\n        .mutHadamard(\n          weightedSums[i].applyElementwiseInto(\n            sigmaPrime,\n            this.temp_sigmaPrimeOfWeightedSums[i]\n          )\n        );\n\n      error\n        .multiplyInto(\n          activations[i - 1].transposeInto(\n            this.temp_transposedActivations[i - 1]\n          ),\n          weightGradients[i]\n        )\n        .mutAdd(\n          this.weights[i].multiplyScalarInto(\n            regularizationRate / trainingDataSize,\n            this.temp_weightCosts[i]\n          )\n        );\n\n      error.copyInto(biasGradients[i]);\n    }\n\n    return { weightGradients, biasGradients };\n  }\n\n  performForwardPass(inputs: Matrix): WeightedSumsAndActivations {\n    const weightedSums = this.temp_weightedSums;\n    const activations = this.temp_activations;\n\n    activations[0] = inputs;\n\n    for (\n      let outputLayer = 1;\n      outputLayer < this.numberOfLayers;\n      outputLayer++\n    ) {\n      const inputLayer = outputLayer - 1;\n      const weightedSum = this.weights[outputLayer]\n        .multiplyInto(activations[inputLayer], weightedSums[outputLayer])\n        .mutAdd(this.biases[outputLayer]);\n      weightedSum.applyElementwiseInto(sigma, activations[outputLayer]);\n    }\n    return { weightedSums, activations };\n  }\n\n  test(testData: LabeledImage[]): AccuracyRate {\n    let correctClassifications = 0;\n    for (const image of testData) {\n      const { activations } = this.performForwardPass(image.inputs);\n      const prediction = argmax(\n        activations[this.numberOfLayers - 1].rowMajorOrderEntries()\n      );\n      if (prediction === image.label) {\n        correctClassifications++;\n      }\n    }\n    return { correct: correctClassifications, total: testData.length };\n  }\n\n  getWeights(): DeepReadonly<MatrixMap> {\n    return this.weights;\n  }\n\n  getBiases(): DeepReadonly<MatrixMap> {\n    return this.biases;\n  }\n}\n\nfunction sigma(z: number): number {\n  return 1 / (1 + Math.exp(-z));\n}\n\nfunction sigmaPrime(z: number): number {\n  const sigmaZ = sigma(z);\n  return sigmaZ * (1 - sigmaZ);\n}\n\nfunction getZeroMatrixMap(map: MatrixMap): MatrixMap {\n  const zeroMatrices: MatrixMap = [];\n  for (let i = 1; i < map.length; i++) {\n    const matrix = map[i];\n    zeroMatrices[i] = Matrix.zeros(matrix.rows, matrix.columns);\n  }\n  return zeroMatrices;\n}\n","import { MatrixMap, Network } from \".\";\nimport { Chapter3CrossEntropyL2Network } from \"./networks/ch3crossEntropyL2\";\nimport { WeightInitializationMethod } from \".\";\n\nexport interface NetworkFactory {\n  fromLayerSizes(\n    layerSizes: number[],\n    initializationMethod: WeightInitializationMethod\n  ): Network;\n  fromWeightsAndBiases(weights: MatrixMap, biases: MatrixMap): Network;\n}\n\n/**\n * At any given time, the entire web app uses one and only\n * one neural network implementation.\n *\n * All other files will depend on `networkFactory`, which will\n * allow me to easily change which network I'm using by changing\n * only one variable.\n * Otherwise, if I wanted to change from using `NetworkX`\n * to `NetworkY`, I would have to go through the entire src\n * folder and replace every occurrence of `NetworkX` with\n * `NetworkY`.\n */\nexport const networkFactory: NetworkFactory = {\n  fromLayerSizes(\n    layerSizes: number[],\n    initializationMethod: WeightInitializationMethod\n  ): Network {\n    return Chapter3CrossEntropyL2Network.fromLayerSizes(\n      layerSizes,\n      initializationMethod\n    );\n  },\n  fromWeightsAndBiases(weights: MatrixMap, biases: MatrixMap): Network {\n    return Chapter3CrossEntropyL2Network.fromWeightsAndBiases(weights, biases);\n  },\n};\n","import { AccuracyRate } from \"./data\";\nimport { StochasticGradientDescentHyperParameters } from \"./network\";\n\nexport enum WorkerMessageType {\n  StartTrainingRequest,\n  TrainingEpochCompleteNotification,\n  TerminateTrainingRequest,\n  TerminateTrainingResponse,\n\n  StartTestingRequest,\n  TestCompleteNotification,\n}\n\nexport type NetworkTrainerRequest =\n  | StartTrainingRequest\n  | TerminateTrainingRequest;\n\nexport type NetworkTrainerNotification =\n  | TrainingEpochCompleteNotification\n  | TerminateTrainingResponse;\n\nexport interface StartTrainingRequest {\n  messageType: WorkerMessageType.StartTrainingRequest;\n\n  networkBuffer: ArrayBuffer;\n  hyperParams: StochasticGradientDescentHyperParameters;\n}\n\nexport interface TrainingEpochCompleteNotification {\n  messageType: WorkerMessageType.TrainingEpochCompleteNotification;\n\n  accuracyRate: AccuracyRate;\n  epoch: number;\n}\n\nexport interface TerminateTrainingRequest {\n  messageType: WorkerMessageType.TerminateTrainingRequest;\n}\n\nexport interface TerminateTrainingResponse {\n  messageType: WorkerMessageType.TerminateTrainingResponse;\n\n  networkBuffer: ArrayBuffer;\n}\n\nexport interface StartTestingRequest {\n  messageType: WorkerMessageType.StartTestingRequest;\n\n  networkBuffer: ArrayBuffer;\n}\n\nexport interface TestCompleteNotification {\n  messageType: WorkerMessageType.TestCompleteNotification;\n  accuracyRate: AccuracyRate;\n}\n","import { Matrix } from \"./matrix\";\nimport { MatrixMap, Network } from \"./network\";\nimport { networkFactory } from \"./network/networkFactory\";\n\nexport function serializeNetwork(network: Network): ArrayBuffer {\n  const entries = getEntries(network);\n\n  const numberOfBytesForSizes =\n    (1 + network.layerSizes.length) * Uint32Array.BYTES_PER_ELEMENT;\n\n  const buffer = new ArrayBuffer(\n    numberOfBytesForSizes + entries.length * entries.BYTES_PER_ELEMENT\n  );\n\n  const uints = new Uint32Array(\n    buffer,\n    0,\n    numberOfBytesForSizes / Uint32Array.BYTES_PER_ELEMENT\n  );\n\n  uints[0] = network.layerSizes.length;\n\n  for (let i = 0; i < network.layerSizes.length; i++) {\n    uints[1 + i] = network.layerSizes[i];\n  }\n\n  const floats = new Float64Array(buffer, numberOfBytesForSizes);\n  floats.set(entries);\n\n  return buffer;\n}\n\nfunction getEntries(network: Network): Float64Array {\n  const weights = network.getWeights();\n  const biases = network.getBiases();\n\n  let entryCount = 0;\n\n  for (let i = 1; i < weights.length; i++) {\n    const weightMatrix = weights[i];\n    const weightMatrixSize = weightMatrix.rows * weightMatrix.columns;\n    entryCount += weightMatrixSize;\n\n    const biasMatrix = biases[i];\n    const biasMatrixSize = biasMatrix.rows * biasMatrix.columns;\n    entryCount += biasMatrixSize;\n  }\n\n  const entries = new Float64Array(entryCount);\n\n  let cursor = 0;\n  for (let i = 1; i < weights.length; i++) {\n    const weightMatrixEntries = weights[i].rowMajorOrderEntries();\n    entries.set(weightMatrixEntries, cursor);\n    cursor += weightMatrixEntries.length;\n\n    const biasMatrixEntries = biases[i].rowMajorOrderEntries();\n    entries.set(biasMatrixEntries, cursor);\n    cursor += biasMatrixEntries.length;\n  }\n\n  return entries;\n}\n\nexport function deserializeNetwork(buffer: ArrayBuffer): Network {\n  const numberOfLayers = new Uint32Array(buffer, 0, 1)[0];\n  const layerSizes = new Uint32Array(buffer, 4, numberOfLayers);\n  const entries = new Float64Array(\n    buffer.slice(Uint32Array.BYTES_PER_ELEMENT * (1 + numberOfLayers))\n  );\n\n  const weights: MatrixMap = [];\n  const biases: MatrixMap = [];\n\n  let cursor = 0;\n  for (let i = 1; i < layerSizes.length; i++) {\n    const outputLayerSize = layerSizes[i];\n    const inputLayerSize = layerSizes[i - 1];\n\n    {\n      const rows = outputLayerSize;\n      const columns = inputLayerSize;\n      const size = rows * columns;\n      weights[i] = Matrix.fromRowMajorOrderEntries(\n        rows,\n        columns,\n        toArray(entries.subarray(cursor, cursor + size))\n      );\n\n      cursor += size;\n    }\n\n    {\n      const rows = outputLayerSize;\n      biases[i] = Matrix.fromRowMajorOrderEntries(\n        rows,\n        1,\n        toArray(entries.subarray(cursor, cursor + rows))\n      );\n\n      cursor += rows;\n    }\n  }\n\n  return networkFactory.fromWeightsAndBiases(weights, biases);\n}\n\nfunction toArray(floats: Float64Array): number[] {\n  const arr = new Array(floats.length);\n  for (let i = 0; i < floats.length; i++) {\n    arr[i] = floats[i];\n  }\n  return arr;\n}\n","import { Option, Result } from \"rusty-ts\";\nimport { AccuracyRate } from \"./data\";\nimport { MnistData } from \"./data/mnist\";\nimport { Matrix } from \"./matrix\";\nimport { Network, WeightInitializationMethod } from \"./network\";\nimport { NetworkTester, NetworkTrainer } from \"./networkServices\";\n\nexport type AppState =\n  | CreateNetworkState\n  | NetworkMainMenuState\n  | HyperParameterMenuState\n  | TrainingInProgressState\n  | TestState\n  | ViewState\n  | CropState\n  | MnistLoadingErrorState;\n\nexport enum StateType {\n  CreateNetwork,\n  NetworkMainMenu,\n  HyperParameterMenu,\n  TrainingInProgress,\n  Test,\n  View,\n  Crop,\n\n  MnistLoadingError,\n}\n\nexport interface StateMap {\n  [StateType.CreateNetwork]: CreateNetworkState;\n  [StateType.NetworkMainMenu]: NetworkMainMenuState;\n  [StateType.HyperParameterMenu]: HyperParameterMenuState;\n  [StateType.TrainingInProgress]: TrainingInProgressState;\n  [StateType.Test]: TestState;\n  [StateType.View]: ViewState;\n  [StateType.Crop]: CropState;\n\n  [StateType.MnistLoadingError]: MnistLoadingErrorState;\n}\n\nexport interface CreateNetworkState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.CreateNetwork;\n\n  hiddenLayerSizeInputValues: string[];\n  weightInitializationMethod: WeightInitializationMethod;\n  previousNetwork: Option<Network>;\n}\nexport interface NetworkMainMenuState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.NetworkMainMenu;\n\n  network: Network;\n}\n\nexport interface HyperParameterMenuState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.HyperParameterMenu;\n\n  network: Network;\n\n  batchSizeInputValue: string;\n  epochsInputValue: string;\n  learningRateInputValue: string;\n  regularizationRateInputValue: string;\n}\n\nexport interface TrainingInProgressState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.TrainingInProgress;\n\n  network: Network;\n\n  networkTrainer: NetworkTrainer;\n  epochAccuracyRates: EpochAccuracyRate[];\n}\n\nexport interface EpochAccuracyRate extends AccuracyRate {\n  epoch: number;\n}\n\nexport interface TestState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.Test;\n\n  network: Network;\n\n  accuracyRate: Result<AccuracyRate, NetworkTester>;\n}\n\nexport interface ViewState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.View;\n\n  network: Network;\n\n  viewedIndex: number;\n  customImages: CustomImage[];\n}\n\nexport interface CustomImage {\n  u8Matrix: Matrix;\n  label: number;\n}\n\nexport interface CropState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.Crop;\n\n  network: Network;\n  customImages: CustomImage[];\n\n  uploadedImage: HTMLImageElement;\n  darknessThreshold: number;\n  cropSquare: Square;\n  pendingCropAdjustment: Option<SquareAdjustment>;\n  hoveredOverDraggable: Option<Draggable>;\n  shouldInvertImage: boolean;\n  labelInputValue: string;\n}\n\nexport interface Square {\n  x: number;\n  y: number;\n  size: number;\n}\n\nexport interface SquareAdjustment {\n  dragged: Draggable;\n  startX: number;\n  startY: number;\n  currentX: number;\n  currentY: number;\n}\n\nexport enum Draggable {\n  TopLeftCorner,\n  TopRightCorner,\n  BottomRightCorner,\n  BottomLeftCorner,\n\n  EntireSquare,\n}\n\nexport type Corner =\n  | Draggable.TopLeftCorner\n  | Draggable.TopRightCorner\n  | Draggable.BottomRightCorner\n  | Draggable.BottomLeftCorner;\n\nexport interface MnistLoadingErrorState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.MnistLoadingError;\n\n  errorMessage: string;\n}\n","import { Option, option } from \"rusty-ts\";\nimport { Matrix } from \"./matrix\";\nimport { Network } from \"./network\";\nimport { CustomImage } from \"./state\";\nimport { deserializeNetwork, serializeNetwork } from \"./networkSerializer\";\n\nexport interface StateSaver<T> {\n  getState(): Option<T>;\n  saveState(state: T): void;\n}\n\nenum LocalStorageKeys {\n  CustomImages = \"CustomImages\",\n  NeuralNetwork = \"NeuralNetwork\",\n}\n\n// 28*28 pixels plus 1 label\nconst BYTES_PER_IMAGE = 28 * 28 + 1;\n\nexport const imageSaver: StateSaver<CustomImage[]> = {\n  getState(): Option<CustomImage[]> {\n    const stateStr = localStorage.getItem(LocalStorageKeys.CustomImages);\n    if (stateStr === null) {\n      return option.none();\n    } else {\n      const bytes = decodeBytes(stateStr);\n\n      if (bytes.length % BYTES_PER_IMAGE !== 0) {\n        throw new Error(\n          \"Cannot decode image bytes because there are \" +\n            bytes.length +\n            \" bytes, and that number is not a multiple of 784.\"\n        );\n      }\n\n      const numberOfImages = bytes.length / BYTES_PER_IMAGE;\n\n      const byteVectors: CustomImage[] = new Array(numberOfImages);\n      for (let i = 0; i < numberOfImages; i++) {\n        const imageBytes = bytes.subarray(\n          i * BYTES_PER_IMAGE,\n          i * BYTES_PER_IMAGE + 784\n        );\n        const u8Matrix = Matrix.columnVector(toArray(imageBytes));\n        byteVectors[i] = { u8Matrix, label: bytes[i * BYTES_PER_IMAGE + 784] };\n      }\n      return option.some(byteVectors);\n    }\n  },\n\n  saveState(images: CustomImage[]): void {\n    const bytes = new Uint8Array(images.length * BYTES_PER_IMAGE);\n    for (let i = 0; i < images.length; i++) {\n      const image = images[i];\n      bytes.set(image.u8Matrix.rowMajorOrderEntries(), i * BYTES_PER_IMAGE);\n      bytes[i * BYTES_PER_IMAGE + 784] = image.label;\n    }\n\n    const stateStr = encodeBytes(bytes);\n    localStorage.setItem(LocalStorageKeys.CustomImages, stateStr);\n  },\n};\n\nexport const networkSaver: StateSaver<Network> = {\n  getState(): Option<Network> {\n    const stateStr = localStorage.getItem(LocalStorageKeys.NeuralNetwork);\n    if (stateStr === null) {\n      return option.none();\n    } else {\n      const bytes = decodeBytes(stateStr);\n      const network = deserializeNetwork(bytes.buffer);\n      return option.some(network);\n    }\n  },\n\n  saveState(network: Network): void {\n    const buffer = serializeNetwork(network);\n    const stateStr = encodeBytes(new Uint8Array(buffer));\n    localStorage.setItem(LocalStorageKeys.NeuralNetwork, stateStr);\n  },\n};\n\nfunction decodeBytes(str: string): Uint8Array {\n  const numberOfBytes = toU32((str.charCodeAt(0) << 16) | str.charCodeAt(1));\n  const bytes = new Uint8Array(numberOfBytes);\n\n  for (let i = 0; i < numberOfBytes; i++) {\n    const code = str.charCodeAt(2 + Math.floor(i / 2));\n\n    const byte = i % 2 === 0 ? code >>> 8 : code;\n\n    bytes[i] = byte;\n  }\n  return bytes;\n}\n\nfunction toU32(n: number): number {\n  const arr = new Uint32Array(1);\n  arr[0] = n;\n  return arr[0];\n}\n\nfunction toArray(u8s: Uint8Array): number[] {\n  const arr: number[] = new Array(u8s.length);\n  for (let i = 0; i < u8s.length; i++) {\n    arr[i] = u8s[i];\n  }\n  return arr;\n}\n\nfunction encodeBytes(bytes: Uint8Array): string {\n  const numberOfBytes = bytes.length;\n  const u16s = new Array(Math.ceil(numberOfBytes / 2));\n\n  for (let i = 0; i < bytes.length; i++) {\n    const byte = bytes[i];\n    if (i % 2 === 0) {\n      u16s[i / 2] = byte << 8;\n    } else {\n      u16s[(i - 1) / 2] |= byte;\n    }\n  }\n\n  return (\n    String.fromCharCode(\n      numberOfBytes >>> 16,\n      numberOfBytes & 0b0000_0000_0000_0000_1111_1111_1111_1111\n    ) + stringifyU16s(u16s)\n  );\n}\n\nfunction stringifyU16s(u16s: number[]): string {\n  try {\n    // This will crash in some browsers if\n    // `u16s` is too large.\n    return String.fromCharCode(...u16s);\n  } catch {\n    let out = \"\";\n\n    for (let i = 0; i < u16s.length; i++) {\n      out += String.fromCharCode(u16s[i]);\n    }\n\n    return out;\n  }\n}\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport NetworkTesterWorker from \"worker-loader!./networkTester\";\n\nexport default NetworkTesterWorker;\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport NetworkTrainerWorker from \"worker-loader!./networkTrainer\";\n\nexport default NetworkTrainerWorker;\n","import { AccuracyRate } from \"./data\";\nimport { Network, StochasticGradientDescentHyperParameters } from \"./network\";\nimport { deserializeNetwork, serializeNetwork } from \"./networkSerializer\";\nimport {\n  NetworkTrainerNotification,\n  StartTestingRequest,\n  StartTrainingRequest,\n  TerminateTrainingRequest,\n  TerminateTrainingResponse,\n  TestCompleteNotification,\n  TrainingEpochCompleteNotification,\n  WorkerMessageType,\n} from \"./workerMessages\";\nimport NetworkTesterWorker from \"./workers/networkTester.importable\";\nimport NetworkTrainerWorker from \"./workers/networkTrainer.importable\";\n\nexport interface NetworkTrainer {\n  start(): void;\n  terminate(): void;\n}\n\nexport interface NetworkTester {\n  start(): void;\n  terminate(): void;\n}\n\nexport interface NetworkTrainerListeners {\n  onEpochComplete(accuracyRate: AccuracyRate, epoch: number): void;\n  onTerminate(network: Network): void;\n}\n\nexport interface NetworkTesterListeners {\n  onComplete(rate: AccuracyRate): void;\n}\n\nexport function trainNetwork(\n  network: Network,\n  hyperParams: StochasticGradientDescentHyperParameters,\n  listeners: NetworkTrainerListeners\n): NetworkTrainer {\n  const worker = new NetworkTrainerWorker();\n\n  worker.addEventListener(\"message\", (event) => {\n    const { data } = event;\n    if (data !== null && \"object\" === typeof data && \"messageType\" in data) {\n      const message: NetworkTrainerNotification = data;\n      switch (message.messageType) {\n        case WorkerMessageType.TrainingEpochCompleteNotification:\n          notifyListenersOfEpochCompletion(message);\n          break;\n        case WorkerMessageType.TerminateTrainingResponse:\n          notifyListenersOfTermination(message);\n          break;\n\n        default: {\n          // Force exhaustive matching\n\n          // eslint-disable-next-line\n          const unreachable: never = message;\n        }\n      }\n    }\n  });\n\n  return { start: startTraining, terminate: stopTrainingAfterThisEpoch };\n\n  function notifyListenersOfEpochCompletion(\n    message: TrainingEpochCompleteNotification\n  ): void {\n    listeners.onEpochComplete(message.accuracyRate, message.epoch);\n  }\n\n  function notifyListenersOfTermination(\n    message: TerminateTrainingResponse\n  ): void {\n    const updatedNetwork = deserializeNetwork(message.networkBuffer);\n    listeners.onTerminate(updatedNetwork);\n\n    worker.terminate();\n  }\n\n  function startTraining(): void {\n    const message: StartTrainingRequest = {\n      messageType: WorkerMessageType.StartTrainingRequest,\n      networkBuffer: serializeNetwork(network),\n      hyperParams,\n    };\n    worker.postMessage(message, [message.networkBuffer]);\n  }\n\n  function stopTrainingAfterThisEpoch(): void {\n    const message: TerminateTrainingRequest = {\n      messageType: WorkerMessageType.TerminateTrainingRequest,\n    };\n    worker.postMessage(message);\n  }\n}\n\nexport function testNetwork(\n  network: Network,\n  listeners: NetworkTesterListeners\n): NetworkTrainer {\n  const worker = new NetworkTesterWorker();\n\n  worker.addEventListener(\"message\", (event) => {\n    const { data } = event;\n    if (data !== null && \"object\" === typeof data && \"messageType\" in data) {\n      const message: TestCompleteNotification = data;\n      notifyListenersOfTestingCompletion(message);\n    }\n  });\n\n  return { start: startTesting, terminate: terminateWorker };\n\n  function notifyListenersOfTestingCompletion(\n    message: TestCompleteNotification\n  ): void {\n    listeners.onComplete(message.accuracyRate);\n\n    worker.terminate();\n  }\n\n  function startTesting(): void {\n    const message: StartTestingRequest = {\n      messageType: WorkerMessageType.StartTestingRequest,\n      networkBuffer: serializeNetwork(network),\n    };\n    worker.postMessage(message, [message.networkBuffer]);\n  }\n\n  function terminateWorker(): void {\n    worker.terminate();\n  }\n}\n","import React from \"react\";\nimport { option, Option, result } from \"rusty-ts\";\nimport \"./App.css\";\nimport { AccuracyRate, LabeledImage } from \"./data\";\nimport { MnistData, mnistProm } from \"./data/mnist\";\nimport { Matrix } from \"./matrix\";\nimport {\n  Network,\n  StochasticGradientDescentHyperParameters,\n  WeightInitializationMethod,\n} from \"./network\";\nimport { networkFactory } from \"./network/networkFactory\";\nimport { testNetwork, trainNetwork } from \"./networkServices\";\nimport {\n  AppState,\n  Corner,\n  CreateNetworkState,\n  CropState,\n  CustomImage,\n  Draggable,\n  HyperParameterMenuState,\n  MnistLoadingErrorState,\n  NetworkMainMenuState,\n  Square,\n  SquareAdjustment,\n  StateMap,\n  StateType,\n  TestState,\n  TrainingInProgressState,\n  ViewState,\n} from \"./state\";\nimport { imageSaver, networkSaver } from \"./stateSavers\";\n\ninterface Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface CornerAdjustment extends SquareAdjustment {\n  dragged: Corner;\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  private viewImageCanvasRef: React.RefObject<HTMLCanvasElement>;\n  private customImageInputRef: React.RefObject<HTMLInputElement>;\n  private cropImageCanvasRef: React.RefObject<HTMLCanvasElement>;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = getInitialState();\n\n    this.viewImageCanvasRef = React.createRef();\n    this.customImageInputRef = React.createRef();\n    this.cropImageCanvasRef = React.createRef();\n\n    this.bindMethods();\n\n    (window as any).app = this;\n  }\n\n  bindMethods(): void {\n    this.onWeightInitializationMethodChange = this.onWeightInitializationMethodChange.bind(\n      this\n    );\n    this.onCreateNetworkClick = this.onCreateNetworkClick.bind(this);\n    this.onTrainClick = this.onTrainClick.bind(this);\n    this.onTestClick = this.onTestClick.bind(this);\n    this.onViewClick = this.onViewClick.bind(this);\n    this.onResetClick = this.onResetClick.bind(this);\n    this.onBatchSizeInputValueChange = this.onBatchSizeInputValueChange.bind(\n      this\n    );\n    this.onEpochsInputValueChange = this.onEpochsInputValueChange.bind(this);\n    this.onLearningRateInputValueChange = this.onLearningRateInputValueChange.bind(\n      this\n    );\n    this.onRegularizationRateInputValueChange = this.onRegularizationRateInputValueChange.bind(\n      this\n    );\n    this.onStartTrainingClick = this.onStartTrainingClick.bind(this);\n    this.onEpochComplete = this.onEpochComplete.bind(this);\n    this.onTrainerTerminate = this.onTrainerTerminate.bind(this);\n    this.onExitHyperParameterMenuClick = this.onExitHyperParameterMenuClick.bind(\n      this\n    );\n    this.onStopTrainingClick = this.onStopTrainingClick.bind(this);\n    this.onTestMenuExitClick = this.onTestMenuExitClick.bind(this);\n    this.onExitViewMenuClick = this.onExitViewMenuClick.bind(this);\n    this.onPreviousImageClick = this.onPreviousImageClick.bind(this);\n    this.onNextImageClick = this.onNextImageClick.bind(this);\n    this.onCustomImageInputChange = this.onCustomImageInputChange.bind(this);\n    this.enterCropMenu = this.enterCropMenu.bind(this);\n    this.onCropImageCanvasPointerDown = this.onCropImageCanvasPointerDown.bind(\n      this\n    );\n    this.onCropImageCanvasPointerMove = this.onCropImageCanvasPointerMove.bind(\n      this\n    );\n    this.onCropImageCanvasPointerUp = this.onCropImageCanvasPointerUp.bind(\n      this\n    );\n    this.onShouldInvertInputChange = this.onShouldInvertInputChange.bind(this);\n    this.onDarknessThresholdChange = this.onDarknessThresholdChange.bind(this);\n    this.onCustomImageLabelInputValueChange = this.onCustomImageLabelInputValueChange.bind(\n      this\n    );\n    this.onDeleteCustomImageClick = this.onDeleteCustomImageClick.bind(this);\n    this.onAddCustomImageClick = this.onAddCustomImageClick.bind(this);\n  }\n\n  componentDidMount(): void {\n    mnistProm.then(\n      (mnist) => {\n        this.setState({ mnist: option.some(mnist) });\n      },\n\n      (error: Error) => {\n        const newState: MnistLoadingErrorState = {\n          mnist: option.none(),\n          stateType: StateType.MnistLoadingError,\n          errorMessage: error.message,\n        };\n        this.saveState(newState);\n      }\n    );\n  }\n\n  saveState(state: AppState): void {\n    this.setState(state);\n\n    if (\"network\" in state) {\n      const { network } = state;\n      networkSaver.saveState(network);\n    }\n\n    if (\"customImages\" in state) {\n      const { customImages } = state;\n      imageSaver.saveState(customImages);\n    }\n  }\n\n  render(): React.ReactElement {\n    const { state } = this;\n    switch (state.stateType) {\n      case StateType.CreateNetwork:\n        return this.renderCreateNetworkMenu(state);\n      case StateType.NetworkMainMenu:\n        return this.renderNetworkMainMenu(state);\n      case StateType.HyperParameterMenu:\n        return this.renderHyperParameterMenu(state);\n      case StateType.TrainingInProgress:\n        return this.renderTrainingInProgressMenu(state);\n      case StateType.Test:\n        return this.renderTestMenu(state);\n      case StateType.View:\n        return this.renderViewMenu(state);\n      case StateType.Crop:\n        return this.renderCropMenu(state);\n\n      case StateType.MnistLoadingError:\n        return this.renderMnistLoadingErrorScreen(state);\n    }\n  }\n\n  renderCreateNetworkMenu(state: CreateNetworkState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>\n          {state.previousNetwork.match({\n            none: () => \"Create network\",\n            some: () => \"Reset network\",\n          })}\n        </h1>\n\n        {state.previousNetwork.match({\n          none: () => null,\n          some: (network) => (\n            <button onClick={() => this.cancelNetworkReset(network)}>\n              Cancel\n            </button>\n          ),\n        })}\n\n        <h2>Layers:</h2>\n        <ol>\n          <li>\n            Input layer: 784 neurons\n            <button onClick={() => this.addLayerBelow(0, state)}>\n              Add layer below\n            </button>\n          </li>\n\n          {state.hiddenLayerSizeInputValues.map((value, hiddenLayerIndex) => {\n            const layerIndex = hiddenLayerIndex + 1;\n            return (\n              <li key={layerIndex}>\n                <label>\n                  Hidden layer:{\" \"}\n                  <input\n                    type=\"text\"\n                    className={isPositiveIntStr(value) ? \"\" : \"InvalidInput\"}\n                    value={value}\n                    onChange={(e) =>\n                      this.changeLayerSizeValue(\n                        layerIndex,\n                        e.target.value,\n                        state\n                      )\n                    }\n                  />{\" \"}\n                  neurons\n                </label>\n                <button onClick={() => this.addLayerBelow(layerIndex, state)}>\n                  Add layer below\n                </button>\n                <button onClick={() => this.deleteLayer(layerIndex, state)}>\n                  Delete layer\n                </button>\n              </li>\n            );\n          })}\n\n          <li>Output layer: 10 neurons</li>\n        </ol>\n\n        <label>\n          Weight initialization method:{\" \"}\n          <select\n            value={state.weightInitializationMethod}\n            onChange={this.onWeightInitializationMethodChange}\n          >\n            <option value={WeightInitializationMethod.Uniform}>\n              Uniform random on [-1, 1)\n            </option>\n            <option value={WeightInitializationMethod.LargeGaussian}>\n              Large Gaussian\n            </option>\n            <option value={WeightInitializationMethod.SmallGaussian}>\n              Small Gaussian\n            </option>\n          </select>\n        </label>\n\n        <button\n          onClick={this.onCreateNetworkClick}\n          disabled={state.hiddenLayerSizeInputValues.some(\n            (value) => !isPositiveIntStr(value)\n          )}\n        >\n          Create network\n        </button>\n      </div>\n    );\n  }\n\n  renderNetworkMainMenu(state: NetworkMainMenuState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Explore your neural network</h1>\n        <h2>Neurons in each layer: {state.network.layerSizes.join(\", \")}</h2>\n\n        <button onClick={this.onTrainClick}>Train</button>\n        <button onClick={this.onTestClick}>Test</button>\n        <button onClick={this.onViewClick}>View</button>\n        <button onClick={this.onResetClick}>Reset</button>\n      </div>\n    );\n  }\n\n  renderHyperParameterMenu(state: HyperParameterMenuState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Train (stochastic gradient descent)</h1>\n\n        <button onClick={this.onExitHyperParameterMenuClick}>Cancel</button>\n\n        <h2>Hyperparameters:</h2>\n\n        <label>\n          Batch size:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveIntStr(state.batchSizeInputValue) ? \"\" : \"InvalidInput\"\n            }\n            value={state.batchSizeInputValue}\n            onChange={this.onBatchSizeInputValueChange}\n          />\n        </label>\n\n        <label>\n          Epochs:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveIntStr(state.epochsInputValue) ? \"\" : \"InvalidInput\"\n            }\n            value={state.epochsInputValue}\n            onChange={this.onEpochsInputValueChange}\n          />\n        </label>\n\n        <label>\n          Learning rate:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveNumStr(state.learningRateInputValue)\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            value={state.learningRateInputValue}\n            onChange={this.onLearningRateInputValueChange}\n          />\n        </label>\n\n        <label>\n          Regularization rate:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveNumStr(state.regularizationRateInputValue)\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            value={state.regularizationRateInputValue}\n            onChange={this.onRegularizationRateInputValueChange}\n          />\n        </label>\n\n        <button\n          onClick={this.onStartTrainingClick}\n          disabled={\n            !(\n              isPositiveIntStr(state.batchSizeInputValue) &&\n              isPositiveIntStr(state.epochsInputValue) &&\n              isPositiveNumStr(state.learningRateInputValue) &&\n              isPositiveNumStr(state.regularizationRateInputValue)\n            )\n          }\n        >\n          Start\n        </button>\n      </div>\n    );\n  }\n\n  renderTrainingInProgressMenu(\n    state: TrainingInProgressState\n  ): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Training in progress...</h1>\n\n        <h2>Logs:</h2>\n        {state.epochAccuracyRates\n          .slice()\n          .sort((a, b) => a.epoch - b.epoch)\n          .map((rate) => (\n            <div key={rate.epoch}>\n              Epoch {rate.epoch}: {rate.correct} / {rate.total}\n            </div>\n          ))}\n\n        <button onClick={this.onStopTrainingClick}>\n          Stop training after current epoch\n        </button>\n      </div>\n    );\n  }\n\n  renderTestMenu(state: TestState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Test results:</h1>\n\n        {state.accuracyRate.match({\n          err: () => <p>Running tests...</p>,\n          ok: (rate) => (\n            <p>\n              {rate.correct} / {rate.total} correct\n            </p>\n          ),\n        })}\n\n        <button onClick={this.onTestMenuExitClick}>Back</button>\n      </div>\n    );\n  }\n\n  renderViewMenu(state: ViewState): React.ReactElement {\n    return state.mnist.match({\n      none: () => (\n        <div className=\"App\">\n          <p>Loading...</p>\n        </div>\n      ),\n      some: (mnist) => {\n        const viewedImage: LabeledImage = getViewedImage(state, mnist);\n        const guess = guessDigit(state.network, viewedImage.inputs);\n\n        return (\n          <div className=\"App\">\n            <h1>View classifications</h1>\n            <button onClick={this.onExitViewMenuClick}>Back</button>\n\n            <div>\n              <button onClick={this.onPreviousImageClick}>Previous</button>{\" \"}\n              Image {state.viewedIndex + 1} /{\" \"}\n              {mnist.test.length + state.customImages.length}{\" \"}\n              <button onClick={this.onNextImageClick}>Next</button>\n            </div>\n\n            <canvas ref={this.viewImageCanvasRef}></canvas>\n\n            <div\n              className={\n                guess.digit === viewedImage.label ? \"\" : \"IncorrectGuess\"\n              }\n            >\n              Guess: {guess.digit} ({(guess.confidence * 100).toFixed(2)}%\n              confident)\n            </div>\n\n            <div>Actual: {viewedImage.label}</div>\n\n            {state.viewedIndex >= mnist.test.length && (\n              <div>\n                <button onClick={this.onDeleteCustomImageClick}>\n                  Delete this image\n                </button>\n              </div>\n            )}\n\n            <div>\n              <label>\n                Upload your own image:{\" \"}\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  ref={this.customImageInputRef}\n                  onChange={this.onCustomImageInputChange}\n                />\n              </label>\n            </div>\n          </div>\n        );\n      },\n    });\n  }\n\n  renderCropMenu(state: CropState): React.ReactElement {\n    return (\n      <div\n        className=\"App\"\n        onMouseMove={this.onCropImageCanvasPointerMove}\n        onTouchMove={this.onCropImageCanvasPointerMove}\n        onMouseUp={this.onCropImageCanvasPointerUp}\n        onTouchEnd={this.onCropImageCanvasPointerUp}\n      >\n        <h1>Crop image</h1>\n\n        <div>\n          <canvas\n            ref={this.cropImageCanvasRef}\n            className={\n              \"CropImageCanvas WhiteBackground\" +\n              state.hoveredOverDraggable.match({\n                none: () => \"\",\n                some: (draggable): string => {\n                  switch (draggable) {\n                    case Draggable.TopLeftCorner:\n                    case Draggable.BottomRightCorner:\n                      return \" NwseResizeCursor\";\n                    case Draggable.TopRightCorner:\n                    case Draggable.BottomLeftCorner:\n                      return \" NeswResizeCursor\";\n                    case Draggable.EntireSquare:\n                      return \" MoveCursor\";\n                  }\n                },\n              })\n            }\n            onMouseDown={this.onCropImageCanvasPointerDown}\n            onTouchStart={this.onCropImageCanvasPointerDown}\n          ></canvas>\n        </div>\n\n        <div>\n          <label>\n            Invert{\" \"}\n            <input\n              type=\"checkbox\"\n              checked={state.shouldInvertImage}\n              onChange={this.onShouldInvertInputChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label>\n            Darkness threshold:{\" \"}\n            <input\n              type=\"range\"\n              value={state.darknessThreshold}\n              min={0}\n              max={1}\n              step={0.001}\n              onChange={this.onDarknessThresholdChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label>\n            Label:{\" \"}\n            <input\n              type=\"text\"\n              className={isDigit(state.labelInputValue) ? \"\" : \"InvalidInput\"}\n              value={state.labelInputValue}\n              onChange={this.onCustomImageLabelInputValueChange}\n            />\n          </label>\n        </div>\n\n        <button\n          disabled={!isDigit(state.labelInputValue)}\n          onClick={this.onAddCustomImageClick}\n        >\n          Add\n        </button>\n      </div>\n    );\n  }\n\n  renderMnistLoadingErrorScreen(\n    state: MnistLoadingErrorState\n  ): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Error loading MNIST data set:</h1>\n        <p>{state.errorMessage}</p>\n      </div>\n    );\n  }\n\n  componentDidUpdate(): void {\n    const { state } = this;\n    state.mnist.ifSome((mnist) => {\n      if (state.stateType === StateType.View) {\n        const canvas = this.viewImageCanvasRef.current;\n        if (canvas !== null) {\n          const viewedImage = getViewedImage(state, mnist);\n          paintImage(viewedImage, canvas);\n        }\n      } else if (state.stateType === StateType.Crop) {\n        const canvas = this.cropImageCanvasRef.current;\n        if (canvas !== null) {\n          const adjustedCropSquare = state.pendingCropAdjustment.match({\n            none: () => state.cropSquare,\n            some: (adjustment) => {\n              return applyPendingAdjustment(\n                state.cropSquare,\n                adjustment,\n                canvas.width,\n                canvas.height\n              );\n            },\n          });\n          paintImageAndCropSquare(\n            state.uploadedImage,\n            adjustedCropSquare,\n            canvas,\n            state.shouldInvertImage,\n            state.darknessThreshold\n          );\n        }\n      }\n    });\n  }\n\n  cancelNetworkReset(network: Network): void {\n    const newState: NetworkMainMenuState = {\n      mnist: this.state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network,\n    };\n    this.saveState(newState);\n  }\n\n  changeLayerSizeValue(\n    changedLayerIndex: number,\n    newValue: string,\n    state: CreateNetworkState\n  ): void {\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues.map(\n        (value, hiddenLayerIndex) => {\n          const layerIndex = hiddenLayerIndex + 1;\n          if (layerIndex === changedLayerIndex) {\n            return newValue;\n          } else {\n            return value;\n          }\n        }\n      ),\n    });\n  }\n\n  addLayerBelow(layerIndex: number, state: CreateNetworkState): void {\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues\n        .slice(0, layerIndex)\n        .concat([\"16\"], state.hiddenLayerSizeInputValues.slice(layerIndex)),\n    });\n  }\n\n  deleteLayer(layerIndex: number, state: CreateNetworkState): void {\n    const hiddenLayerIndex = layerIndex - 1;\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues\n        .slice(0, hiddenLayerIndex)\n        .concat(state.hiddenLayerSizeInputValues.slice(hiddenLayerIndex + 1)),\n    });\n  }\n\n  onWeightInitializationMethodChange(\n    event: React.ChangeEvent<HTMLSelectElement>\n  ): void {\n    const state = this.expectState(StateType.CreateNetwork);\n    const newState: CreateNetworkState = {\n      ...state,\n      weightInitializationMethod: event.target\n        .value as WeightInitializationMethod,\n    };\n    this.saveState(newState);\n  }\n\n  onCreateNetworkClick(): void {\n    const state = this.expectState(StateType.CreateNetwork);\n    if (state.hiddenLayerSizeInputValues.every(isPositiveIntStr)) {\n      const hiddenLayerSizes: number[] = state.hiddenLayerSizeInputValues.map(\n        (str) => +str\n      );\n      const layerSizes = [784, ...hiddenLayerSizes, 10];\n\n      const newState: NetworkMainMenuState = {\n        mnist: this.state.mnist,\n\n        stateType: StateType.NetworkMainMenu,\n\n        network: networkFactory.fromLayerSizes(\n          layerSizes,\n          state.weightInitializationMethod\n        ),\n      };\n\n      this.saveState(newState);\n    }\n  }\n\n  expectState<T extends StateType>(stateType: T): StateMap[T] {\n    const { state } = this;\n    if (state.stateType === stateType) {\n      return state as StateMap[T];\n    }\n    throw new Error(\n      \"Expecting a state of type \" +\n        StateType[stateType] +\n        \" but got state of type \" +\n        StateType[state.stateType]\n    );\n  }\n\n  onTrainClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: HyperParameterMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.HyperParameterMenu,\n\n      network: state.network,\n\n      batchSizeInputValue: \"10\",\n      epochsInputValue: \"30\",\n      learningRateInputValue: \"0.5\",\n      regularizationRateInputValue: \"5.0\",\n    };\n    this.saveState(newState);\n  }\n\n  onTestClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n\n    const networkTester = testNetwork(state.network, {\n      onComplete: (accuracyRate) => {\n        this.updateState(StateType.Test, {\n          accuracyRate: result.ok(accuracyRate),\n        });\n      },\n    });\n\n    const newState: TestState = {\n      mnist: state.mnist,\n\n      stateType: StateType.Test,\n\n      network: state.network,\n\n      accuracyRate: result.err(networkTester),\n    };\n\n    this.saveState(newState);\n\n    networkTester.start();\n  }\n\n  updateState<T extends StateType>(\n    stateType: T,\n    updateOrUpdater:\n      | Partial<StateMap[T]>\n      | ((prevState: StateMap[T]) => Partial<StateMap[T]>)\n  ): void {\n    const { state } = this;\n    if (state.stateType === stateType) {\n      if (\"function\" === typeof updateOrUpdater) {\n        this.saveState({ ...state, ...updateOrUpdater(state as StateMap[T]) });\n      } else {\n        this.saveState({ ...state, ...updateOrUpdater });\n      }\n    }\n  }\n\n  onViewClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: ViewState = {\n      mnist: state.mnist,\n\n      stateType: StateType.View,\n\n      network: state.network,\n\n      viewedIndex: 0,\n      customImages: imageSaver.getState().unwrapOr([]),\n    };\n    this.saveState(newState);\n  }\n\n  onResetClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: CreateNetworkState = {\n      mnist: state.mnist,\n\n      stateType: StateType.CreateNetwork,\n\n      hiddenLayerSizeInputValues: [\"30\"],\n      weightInitializationMethod: WeightInitializationMethod.SmallGaussian,\n      previousNetwork: option.some(state.network),\n    };\n    this.saveState(newState);\n  }\n\n  onBatchSizeInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      batchSizeInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onEpochsInputValueChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      epochsInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onLearningRateInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      learningRateInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onRegularizationRateInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      regularizationRateInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onStartTrainingClick(): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n\n    const hyperParams: StochasticGradientDescentHyperParameters = {\n      batchSize: +state.batchSizeInputValue,\n      epochs: +state.epochsInputValue,\n      learningRate: +state.learningRateInputValue,\n      regularizationRate: +state.regularizationRateInputValue,\n    };\n\n    const networkTrainer = trainNetwork(state.network, hyperParams, {\n      onEpochComplete: this.onEpochComplete,\n\n      onTerminate: this.onTrainerTerminate,\n    });\n\n    const newState: TrainingInProgressState = {\n      mnist: state.mnist,\n\n      stateType: StateType.TrainingInProgress,\n\n      network: state.network,\n\n      networkTrainer,\n      epochAccuracyRates: [],\n    };\n\n    this.saveState(newState);\n\n    networkTrainer.start();\n  }\n\n  onEpochComplete(accuracyRate: AccuracyRate, epoch: number): void {\n    this.updateState(StateType.TrainingInProgress, (prevState) => ({\n      epochAccuracyRates: prevState.epochAccuracyRates.concat([\n        { ...accuracyRate, epoch },\n      ]),\n    }));\n  }\n\n  onTrainerTerminate(updatedNetwork: Network): void {\n    const state = this.expectState(StateType.TrainingInProgress);\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: updatedNetwork,\n    };\n    this.saveState(newState);\n  }\n\n  onExitHyperParameterMenuClick(): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onStopTrainingClick(): void {\n    const state = this.expectState(StateType.TrainingInProgress);\n    state.networkTrainer.terminate();\n  }\n\n  onTestMenuExitClick(): void {\n    const state = this.expectState(StateType.Test);\n\n    state.accuracyRate.ifErr((tester) => {\n      tester.terminate();\n    });\n\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onExitViewMenuClick(): void {\n    const state = this.expectState(StateType.View);\n\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onPreviousImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const numberOfImages = mnist.test.length + state.customImages.length;\n      const newIndex =\n        state.viewedIndex === 0 ? numberOfImages - 1 : state.viewedIndex - 1;\n      this.saveState({ ...state, viewedIndex: newIndex });\n    });\n  }\n\n  onNextImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const numberOfImages = mnist.test.length + state.customImages.length;\n      const newIndex =\n        state.viewedIndex === numberOfImages - 1 ? 0 : state.viewedIndex + 1;\n      this.saveState({ ...state, viewedIndex: newIndex });\n    });\n  }\n\n  onCustomImageInputChange(): void {\n    const input = this.customImageInputRef.current;\n    if (input !== null && input.files !== null && input.files.length > 0) {\n      readFileAsHtmlImage(input.files[0]).then(this.enterCropMenu);\n    }\n  }\n\n  enterCropMenu(uploadedImage: HTMLImageElement): void {\n    const state = this.expectState(StateType.View);\n    const newState: CropState = {\n      mnist: state.mnist,\n\n      stateType: StateType.Crop,\n\n      network: state.network,\n      customImages: state.customImages,\n\n      uploadedImage,\n      darknessThreshold: getAverageDarkness(uploadedImage),\n      cropSquare: {\n        x: 0,\n        y: 0,\n        size: Math.min(uploadedImage.width, uploadedImage.height),\n      },\n      pendingCropAdjustment: option.none(),\n      hoveredOverDraggable: option.none(),\n      shouldInvertImage: false,\n      labelInputValue: \"\",\n    };\n    this.saveState(newState);\n  }\n\n  onCropImageCanvasPointerDown(\n    event:\n      | React.MouseEvent<HTMLCanvasElement>\n      | React.TouchEvent<HTMLCanvasElement>\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const square = state.cropSquare;\n\n    const canvas = this.cropImageCanvasRef.current!;\n    const { x, y } = getLocalPointerCoordinates(event, canvas);\n    const rect = canvas.getBoundingClientRect();\n    const scale = canvas.width / rect.width;\n    const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n\n    const optDragged: Option<Draggable> = (() => {\n      if (Math.hypot(x - square.x, y - square.y) <= localRadius) {\n        return option.some(Draggable.TopLeftCorner);\n      } else if (\n        Math.hypot(x - (square.x + square.size), y - square.y) <= localRadius\n      ) {\n        return option.some(Draggable.TopRightCorner);\n      } else if (\n        Math.hypot(\n          x - (square.x + square.size),\n          y - (square.y + square.size)\n        ) <= localRadius\n      ) {\n        return option.some(Draggable.BottomRightCorner);\n      } else if (\n        Math.hypot(x - square.x, y - (square.y + square.size)) <= localRadius\n      ) {\n        return option.some(Draggable.BottomLeftCorner);\n      } else if (\n        x > square.x &&\n        x < square.x + square.size &&\n        y > square.y &&\n        y < square.y + square.size\n      ) {\n        return option.some(Draggable.EntireSquare);\n      } else {\n        return option.none();\n      }\n    })();\n\n    this.saveState({\n      ...state,\n      pendingCropAdjustment: optDragged.map((dragged) => ({\n        dragged,\n        startX: x,\n        startY: y,\n        currentX: x,\n        currentY: y,\n      })),\n    });\n  }\n\n  onCropImageCanvasPointerMove(\n    event: React.MouseEvent | React.TouchEvent\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const canvas = this.cropImageCanvasRef.current!;\n    const current = getLocalPointerCoordinates(event, canvas);\n\n    state.pendingCropAdjustment.match({\n      some: (oldAdjustment) => {\n        const updatedAdjustment: SquareAdjustment = {\n          ...oldAdjustment,\n          currentX: current.x,\n          currentY: current.y,\n        };\n\n        this.saveState({\n          ...state,\n          pendingCropAdjustment: option.some(updatedAdjustment),\n        });\n\n        const adjustedCropSquare = applyPendingAdjustment(\n          state.cropSquare,\n          updatedAdjustment,\n          canvas.width,\n          canvas.height\n        );\n        paintImageAndCropSquare(\n          state.uploadedImage,\n          adjustedCropSquare,\n          canvas,\n          state.shouldInvertImage,\n          state.darknessThreshold\n        );\n      },\n\n      none: () => {\n        const rect = canvas.getBoundingClientRect();\n        const scale = canvas.width / rect.width;\n        const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n        this.saveState({\n          ...state,\n          hoveredOverDraggable: getHoveredOverDraggable(\n            state.cropSquare,\n            current.x,\n            current.y,\n            localRadius\n          ),\n        });\n      },\n    });\n  }\n\n  onCropImageCanvasPointerUp(): void {\n    const state = this.expectState(StateType.Crop);\n    const canvas = this.cropImageCanvasRef.current!;\n    const updatedCropSquare = state.pendingCropAdjustment.match({\n      none: () => state.cropSquare,\n      some: (adjustment) =>\n        applyPendingAdjustment(\n          state.cropSquare,\n          adjustment,\n          canvas.width,\n          canvas.height\n        ),\n    });\n\n    this.saveState({\n      ...state,\n      pendingCropAdjustment: option.none(),\n      cropSquare: updatedCropSquare,\n    });\n  }\n\n  onShouldInvertInputChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Crop);\n    const newState: CropState = {\n      ...state,\n      shouldInvertImage: event.target.checked,\n    };\n    this.saveState(newState);\n  }\n\n  onDarknessThresholdChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Crop);\n    const newThreshold = +event.target.value;\n    const newState: CropState = { ...state, darknessThreshold: newThreshold };\n    this.saveState(newState);\n    paintImageAndCropSquare(\n      state.uploadedImage,\n      state.cropSquare,\n      this.cropImageCanvasRef.current!,\n      state.shouldInvertImage,\n      newThreshold\n    );\n  }\n\n  onCustomImageLabelInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const newState: CropState = {\n      ...state,\n      labelInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onAddCustomImageClick(): void {\n    const state = this.expectState(StateType.Crop);\n\n    if (!isDigit(state.labelInputValue)) {\n      return;\n    }\n\n    state.mnist.ifSome((mnist) => {\n      const label = +state.labelInputValue;\n      const newImage = getCustomImage(\n        state,\n        label,\n        state.shouldInvertImage,\n        state.darknessThreshold\n      );\n      const updatedCustomImages = state.customImages.concat([newImage]);\n      const newImageIndex = mnist.test.length + updatedCustomImages.length - 1;\n      const newState: ViewState = {\n        mnist: state.mnist,\n\n        stateType: StateType.View,\n\n        network: state.network,\n\n        viewedIndex: newImageIndex,\n        customImages: updatedCustomImages,\n      };\n      this.saveState(newState);\n    });\n  }\n\n  onDeleteCustomImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const customImageIndex = state.viewedIndex - mnist.test.length;\n      const newCustomImages = state.customImages\n        .slice(0, customImageIndex)\n        .concat(state.customImages.slice(customImageIndex + 1));\n      const newState: ViewState = {\n        ...state,\n        customImages: newCustomImages,\n        viewedIndex: state.viewedIndex - 1,\n      };\n      this.saveState(newState);\n    });\n  }\n}\n\nfunction getInitialState(): AppState {\n  return networkSaver.getState().match({\n    none: (): CreateNetworkState => ({\n      mnist: option.none(),\n\n      stateType: StateType.CreateNetwork,\n\n      hiddenLayerSizeInputValues: [\"30\"],\n      weightInitializationMethod: WeightInitializationMethod.SmallGaussian,\n      previousNetwork: option.none(),\n    }),\n\n    some: (network): NetworkMainMenuState => ({\n      mnist: option.none(),\n\n      stateType: StateType.NetworkMainMenu,\n\n      network,\n    }),\n  });\n}\n\nfunction isPositiveIntStr(s: string): boolean {\n  return Number.isFinite(+s) && +s === Math.floor(+s) && +s > 0;\n}\n\nfunction isPositiveNumStr(s: string): boolean {\n  return Number.isFinite(+s) && +s > 0;\n}\n\nfunction getViewedImage(state: ViewState, mnist: MnistData): LabeledImage {\n  return state.viewedIndex < mnist.test.length\n    ? mnist.test[state.viewedIndex]\n    : normalizeU8Image(\n        state.customImages[state.viewedIndex - mnist.test.length]\n      );\n}\n\nfunction normalizeU8Image(image: CustomImage): LabeledImage {\n  return {\n    rows: 28,\n    columns: 28,\n    inputs: image.u8Matrix.immutApplyElementwise((x) => x / 255),\n    label: image.label,\n  };\n}\n\nfunction guessDigit(\n  network: Network,\n  inputs: Matrix\n): { digit: number; confidence: number } {\n  const { activations } = network.performForwardPass(inputs);\n  const outputActivations = activations[\n    activations.length - 1\n  ].rowMajorOrderEntries();\n\n  let maxIndex = 0;\n  let maxConfidence = outputActivations[maxIndex];\n  for (let i = 1; i < outputActivations.length; i++) {\n    const confidence = outputActivations[i];\n    if (confidence > maxConfidence) {\n      maxConfidence = confidence;\n      maxIndex = i;\n    }\n  }\n\n  return { digit: maxIndex, confidence: maxConfidence };\n}\n\nfunction paintImage(image: LabeledImage, canvas: HTMLCanvasElement): void {\n  canvas.width = image.columns;\n  canvas.height = image.rows;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  const imageData = getImageData(image);\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction getImageData(image: LabeledImage): ImageData {\n  const entries = image.inputs.rowMajorOrderEntries();\n  const imageBytes = new Uint8ClampedArray(entries.length * 4);\n  for (let i = 0; i < entries.length; i++) {\n    const lightness = 255 - Math.floor(entries[i] * 255);\n    imageBytes[i * 4] = lightness;\n    imageBytes[i * 4 + 1] = lightness;\n    imageBytes[i * 4 + 2] = lightness;\n    imageBytes[i * 4 + 3] = 255;\n  }\n  return new ImageData(imageBytes, image.columns, image.rows);\n}\n\nfunction readFileAsHtmlImage(file: File): Promise<HTMLImageElement> {\n  return readFileAsDataUrl(file).then(\n    (url) =>\n      new Promise((resolve, reject) => {\n        const img = document.createElement(\"img\");\n        img.src = url;\n        img.addEventListener(\"load\", () => resolve(img));\n        img.addEventListener(\"error\", reject);\n      })\n  );\n}\n\nfunction readFileAsDataUrl(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => resolve(reader.result as string));\n    reader.addEventListener(\"error\", () => reject(reader.error));\n    reader.readAsDataURL(file);\n  });\n}\n\nconst CropMenuConfig = {\n  OverlayColor: \"#000a\",\n\n  CropSquareColor: \"#08b\",\n  CropSquareLineWidth: 3,\n  GlobalCornerHandleRadius: 10,\n} as const;\n\nfunction paintImageAndCropSquare(\n  image: HTMLImageElement,\n  crop: Square,\n  canvas: HTMLCanvasElement,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): void {\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const rect = canvas.getBoundingClientRect();\n  const scale = canvas.width / rect.width;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(image, 0, 0);\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  paintOverlay();\n  paintCompressedImage();\n  paintCropSquare();\n\n  return;\n\n  function paintOverlay(): void {\n    const cropBottom = crop.y + crop.size;\n    const cropRight = crop.x + crop.size;\n    ctx.fillStyle = CropMenuConfig.OverlayColor;\n    ctx.fillRect(0, 0, canvas.width, crop.y);\n    ctx.fillRect(0, cropBottom, canvas.width, canvas.height - cropBottom);\n    ctx.fillRect(0, crop.y, crop.x, crop.size);\n    ctx.fillRect(cropRight, crop.y, canvas.width - cropRight, crop.size);\n  }\n\n  function paintCompressedImage(): void {\n    ctx.clearRect(crop.x, crop.y, crop.size, crop.size);\n\n    const compressed = cropAndCompress(\n      image,\n      crop,\n      shouldInvert,\n      darknessThreshold\n    );\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(compressed, crop.x, crop.y, crop.size, crop.size);\n  }\n\n  function paintCropSquare(): void {\n    ctx.strokeStyle = CropMenuConfig.CropSquareColor;\n    ctx.lineWidth = CropMenuConfig.CropSquareLineWidth;\n    ctx.strokeRect(crop.x, crop.y, crop.size, crop.size);\n\n    drawCropSquareCircle(crop.x, crop.y);\n    drawCropSquareCircle(crop.x + crop.size, crop.y);\n    drawCropSquareCircle(crop.x + crop.size, crop.y + crop.size);\n    drawCropSquareCircle(crop.x, crop.y + crop.size);\n  }\n\n  function drawCropSquareCircle(x: number, y: number): void {\n    const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n    ctx.moveTo(x, y);\n    ctx.beginPath();\n    ctx.arc(x, y, localRadius, 0, 2 * Math.PI);\n    ctx.closePath();\n\n    ctx.fillStyle = CropMenuConfig.CropSquareColor;\n    ctx.fill();\n  }\n}\n\nfunction applyWhiteBackground(srcCtx: CanvasRenderingContext2D): void {\n  const { width, height } = srcCtx.canvas;\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.fillStyle = \"#ffffff\";\n  ctx.fillRect(0, 0, width, height);\n  ctx.drawImage(srcCtx.canvas, 0, 0);\n\n  const imageData = ctx.getImageData(0, 0, width, height);\n  srcCtx.putImageData(imageData, 0, 0);\n}\n\nfunction getLocalPointerCoordinates(\n  event: React.MouseEvent | React.TouchEvent,\n  canvas: HTMLCanvasElement\n): { x: number; y: number } {\n  const boundingRect = canvas.getBoundingClientRect();\n  const { x, y } = getGlobalPointerCoordinates(event);\n  const xScale = canvas.width / boundingRect.width;\n  const yScale = canvas.height / boundingRect.height;\n  return {\n    x: xScale * (x - boundingRect.left),\n    y: yScale * (y - boundingRect.top),\n  };\n}\n\nfunction getGlobalPointerCoordinates(\n  event: React.MouseEvent | React.TouchEvent\n): { x: number; y: number } {\n  if (\"clientX\" in event) {\n    return { x: event.clientX, y: event.clientY };\n  } else {\n    return { x: event.touches[0].clientX, y: event.touches[0].clientY };\n  }\n}\n\nfunction applyPendingAdjustment(\n  square: Square,\n  adjustment: SquareAdjustment,\n  canvasWidth: number,\n  canvasHeight: number\n): Square {\n  const possiblyOutOfBounds = applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare(\n    square,\n    adjustment\n  );\n  return transformBackIntoBoundsIfNeeded(\n    possiblyOutOfBounds,\n    canvasWidth,\n    canvasHeight,\n    adjustment.dragged === Draggable.EntireSquare\n  );\n}\n\nfunction applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare(\n  square: Square,\n  adjustment: SquareAdjustment\n): Square {\n  if (isCornerAdjustment(adjustment)) {\n    const rect = {\n      x: square.x,\n      y: square.y,\n      width: square.size,\n      height: square.size,\n    };\n    const adjustedRect = applyPendingCornerAdjustmentToRect(rect, adjustment);\n    return clamp(adjustedRect, adjustment.dragged);\n  } else {\n    const dx = adjustment.currentX - adjustment.startX;\n    const dy = adjustment.currentY - adjustment.startY;\n    return applyTranslation(square, dx, dy);\n  }\n}\n\nfunction isCornerAdjustment(\n  adjustment: SquareAdjustment\n): adjustment is CornerAdjustment {\n  return adjustment.dragged !== Draggable.EntireSquare;\n}\n\nfunction applyPendingCornerAdjustmentToRect(\n  rect: Rect,\n  adjustment: CornerAdjustment\n): Rect {\n  const corner = adjustment.dragged;\n  const { currentX, currentY } = adjustment;\n\n  let left = rect.x;\n  let right = rect.x + rect.width;\n  let top = rect.y;\n  let bottom = rect.y + rect.height;\n\n  switch (corner) {\n    case Draggable.TopLeftCorner:\n      top = Math.min(currentY, bottom);\n      left = Math.min(currentX, right);\n      break;\n    case Draggable.TopRightCorner:\n      top = Math.min(currentY, bottom);\n      right = Math.max(currentX, left);\n      break;\n    case Draggable.BottomRightCorner:\n      bottom = Math.max(currentY, top);\n      right = Math.max(currentX, left);\n      break;\n    case Draggable.BottomLeftCorner:\n      bottom = Math.max(currentY, top);\n      left = Math.min(currentX, right);\n      break;\n  }\n\n  if (left > right) {\n    [left, right] = [right, left];\n  }\n  if (top > bottom) {\n    [top, bottom] = [bottom, top];\n  }\n\n  return {\n    x: left,\n    y: top,\n    width: right - left,\n    height: bottom - top,\n  };\n}\n\nfunction clamp(rect: Rect, dragged: Corner): Square {\n  const anchor = getDiagonal(dragged);\n  switch (anchor) {\n    case Draggable.TopLeftCorner:\n      return clampToTopLeft(rect);\n    case Draggable.TopRightCorner:\n      return clampToTopRight(rect);\n    case Draggable.BottomRightCorner:\n      return clampToBottomRight(rect);\n    case Draggable.BottomLeftCorner:\n      return clampToBottomLeft(rect);\n  }\n}\n\nfunction clampToTopLeft(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x, y, size };\n}\n\nfunction clampToTopRight(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x: width > height ? x + width - size : x, y, size };\n}\n\nfunction clampToBottomRight(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return {\n    x: width > height ? x + width - size : x,\n    y: height > width ? y + height - size : y,\n    size,\n  };\n}\n\nfunction clampToBottomLeft(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x, y: height > width ? y + height - size : y, size };\n}\n\nfunction getDiagonal(corner: Corner): Corner {\n  switch (corner) {\n    case Draggable.TopLeftCorner:\n      return Draggable.BottomRightCorner;\n    case Draggable.TopRightCorner:\n      return Draggable.BottomLeftCorner;\n    case Draggable.BottomRightCorner:\n      return Draggable.TopLeftCorner;\n    case Draggable.BottomLeftCorner:\n      return Draggable.TopRightCorner;\n  }\n}\n\nfunction applyTranslation(square: Square, dx: number, dy: number): Square {\n  return { x: square.x + dx, y: square.y + dy, size: square.size };\n}\n\nfunction getHoveredOverDraggable(\n  square: Square,\n  x: number,\n  y: number,\n  localRadius: number\n): Option<Draggable> {\n  if (Math.hypot(x - square.x, y - square.y) <= localRadius) {\n    return option.some(Draggable.TopLeftCorner);\n  } else if (\n    Math.hypot(x - (square.x + square.size), y - square.y) <= localRadius\n  ) {\n    return option.some(Draggable.TopRightCorner);\n  } else if (\n    Math.hypot(x - (square.x + square.size), y - (square.y + square.size)) <=\n    localRadius\n  ) {\n    return option.some(Draggable.BottomRightCorner);\n  } else if (\n    Math.hypot(x - square.x, y - (square.y + square.size)) <= localRadius\n  ) {\n    return option.some(Draggable.BottomLeftCorner);\n  } else if (\n    x > square.x &&\n    x < square.x + square.size &&\n    y > square.y &&\n    y < square.y + square.size\n  ) {\n    return option.some(Draggable.EntireSquare);\n  } else {\n    return option.none();\n  }\n}\n\nfunction transformBackIntoBoundsIfNeeded(\n  square: Square,\n  width: number,\n  height: number,\n  preserveSize: boolean\n): Square {\n  if (preserveSize) {\n    const { x, y, size } = square;\n\n    const maxX = width - size;\n    const maxY = height - size;\n\n    return {\n      x: Math.max(0, Math.min(x, maxX)),\n      y: Math.max(0, Math.min(y, maxY)),\n      size,\n    };\n  } else {\n    let { x, y, size } = square;\n\n    x = Math.max(0, Math.min(x, width));\n    y = Math.max(0, Math.min(y, height));\n\n    const maxSize = Math.min(width - x, height - y);\n    size = Math.min(size, maxSize);\n\n    return { x, y, size };\n  }\n}\n\nfunction cropAndCompress(\n  image: HTMLImageElement,\n  crop: Square,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): HTMLCanvasElement {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 28;\n  canvas.height = 28;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.drawImage(image, crop.x, crop.y, crop.size, crop.size, 0, 0, 28, 28);\n\n  applyGrayscale(ctx);\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  applyDarknessThreshold(ctx, darknessThreshold);\n\n  return canvas;\n}\n\nfunction invertContext(ctx: CanvasRenderingContext2D): void {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const bytes = imageData.data;\n  for (let i = 0; i < bytes.length; i += 4) {\n    bytes[i] = 255 - bytes[i];\n    bytes[i + 1] = 255 - bytes[i + 1];\n    bytes[i + 2] = 255 - bytes[i + 2];\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction applyGrayscale(ctx: CanvasRenderingContext2D): void {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const pixels = imageData.data;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const averageLightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    pixels[i] = averageLightness;\n    pixels[i + 1] = averageLightness;\n    pixels[i + 2] = averageLightness;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction applyDarknessThreshold(\n  ctx: CanvasRenderingContext2D,\n  darknessThreshold: number\n): void {\n  const lightnessThreshold = 1 - darknessThreshold;\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const pixels = imageData.data;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const averageLightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    const normalizedLightness = averageLightness / 255;\n    const roundedLightness = normalizedLightness < lightnessThreshold ? 0 : 255;\n    pixels[i] = roundedLightness;\n    pixels[i + 1] = roundedLightness;\n    pixels[i + 2] = roundedLightness;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction isDigit(s: string): boolean {\n  return /^\\d$/.test(s);\n}\n\nfunction getCustomImage(\n  state: CropState,\n  label: number,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): CustomImage {\n  const { cropSquare, uploadedImage } = state;\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 28;\n  canvas.height = 28;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(\n    uploadedImage,\n    cropSquare.x,\n    cropSquare.y,\n    cropSquare.size,\n    cropSquare.size,\n    0,\n    0,\n    28,\n    28\n  );\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  applyWhiteBackground(ctx);\n\n  const u8Matrix = getU8Matrix(\n    ctx.getImageData(0, 0, 28, 28),\n    darknessThreshold\n  );\n  return { u8Matrix, label };\n}\n\nfunction getU8Matrix(imageData: ImageData, darknessThreshold: number): Matrix {\n  const lightnessThreshold = 1 - darknessThreshold;\n\n  const { data } = imageData;\n  const u8s = new Array(data.length / 4);\n  for (let i = 0; i < data.length; i += 4) {\n    const averageLightness = Math.floor(\n      (data[i] + data[i + 1] + data[i + 2]) / 3\n    );\n    const normalizedLightness = averageLightness / 255;\n    const roundedLightness = normalizedLightness < lightnessThreshold ? 0 : 255;\n    const roundedDarkness = 255 - roundedLightness;\n    u8s[i / 4] = roundedDarkness;\n  }\n  return Matrix.columnVector(u8s);\n}\n\n/** Returns a float between 0 and 1. */\nfunction getAverageDarkness(image: HTMLImageElement): number {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.fillStyle = \"#ffffff\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  ctx.drawImage(image, 0, 0);\n\n  const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n  let totalLightness = 0;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const lightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    totalLightness += lightness;\n  }\n  const numberOfPixels = pixels.length / 4;\n  const averageLightness = Math.floor(totalLightness / numberOfPixels);\n  const averageDarkness = 255 - averageLightness;\n  return averageDarkness / 255;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { networkFactory } from \"./network/networkFactory\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n(window as any).networkFactory = networkFactory;\n"],"sourceRoot":""}