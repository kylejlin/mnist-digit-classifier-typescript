{"version":3,"sources":["workers/networkTester.ts","workers/networkTrainer.ts","matrix.ts","data/index.ts","data/mnist.ts","workerMessages.ts","network.ts","networkSerializer.ts","state.ts","stateSavers.ts","workers/networkTester.importable.js","workers/networkTrainer.importable.js","networkServices.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","Matrix","rows","columns","data","this","size","Array","i","Math","random","fill","length","some","row","Error","JSON","stringify","flat","entries","slice","n","other","TypeError","clone","product","zeros","thisData","otherData","productData","thisRows","otherColumns","thisColumns","productColumns","thisR","otherC","dot","thisC","transposed","r","c","f","cloneData","decimals","entryStrings","rowMajorOrderEntries","map","entry","toFixed","entryStringLengths","s","maxLength","max","topAndBottomBorder","repeat","str","leftpad","minLength","fillCharacter","diff","Idx3FileFormat","offset","requiredValue","Idx1FileFormat","getLabeledImages","imagesBuffer","labelsBuffer","images","buffer","bytes","Uint8Array","actual","getInt32MsbFirst","expected","toString","assertIdx3MagicNumberIsCorrect","numberOfImages","imagesParsed","firstPixelIndex","vectorEntries","j","matrix","columnVector","getImages","labels","assertIdx1MagicNumberIsCorrect","numberOfLabels","firstLabelIndex","getLabels","labeledImages","inputs","label","convertLabelToVector","image","outputs","location","self","TRAINING_IMAGES_URL","url","resolve","href","TRAINING_LABELS_URL","TEST_IMAGES_URL","TEST_LABELS_URL","trainingImagesProm","getArrayBuffer","trainingLabelsProm","testImagesProm","testLabelsProm","fetch","then","response","status","arrayBuffer","statusText","text","getErrorMessage","errorMessage","Promise","reject","WorkerMessageType","mnistProm","all","trainingImagesBuffer","trainingLabelsBuffer","testImagesBuffer","testLabelsBuffer","training","test","Network1","sizes","log","layers","weights","biases","outputLayer","inputLayer","outputLayerSize","inputLayerSize","randomUniform","push","network","trainingData","hyperparams","testData","batchSize","epochs","learningRate","epoch","miniBatches","divideIntoMiniBatches","miniBatch","getAverageGradients","weightGradients","biasGradients","mutMultiplyScalar","mutSubtract","undefined","accuracyRate","getZeroMatricesForWeightGradients","getZeroMatricesForBiasGradients","imageGradients","getGradients","mutAdd","matrices","weightMatrix","biasMatrix","performForwardPass","weightedSums","activations","errors","lastLayerError","immutApplyElementwise","sigmaPrime","mutHadamard","getLastLayerCostDerivative","immutMultiply","immutTranspose","error","weightedSum","sigma","actualOutput","expectedOutput","immutSubtract","correctClassifications","argmax","correct","total","miniBatchSize","arr","exclMax","floor","temp","shuffle","z","exp","sigmaZ","maxIndex","value","serializeNetwork","getWeights","getBiases","entryCount","weightMatrixSize","biasMatrixSize","Float64Array","cursor","weightMatrixEntries","set","biasMatrixEntries","getEntries","numberOfBytesForSizes","Uint32Array","BYTES_PER_ELEMENT","ArrayBuffer","uints","deserializeNetwork","numberOfLayers","layerSizes","fromRowMajorOrderEntries","toArray","subarray","fromWeightsAndBiases","floats","StateType","Draggable","LocalStorageKeys","NetworkTesterWorker","NetworkTrainerWorker","trainNetwork","hyperParams","listeners","worker","addEventListener","event","message","messageType","TrainingEpochCompleteNotification","onEpochComplete","notifyListenersOfEpochCompletion","TerminateTrainingResponse","updatedNetwork","networkBuffer","onTerminate","terminate","notifyListenersOfTermination","start","StartTrainingRequest","postMessage","TerminateTrainingRequest","testNetwork","onComplete","notifyListenersOfTestingCompletion","StartTestingRequest","imageSaver","stateStr","localStorage","getItem","CustomImages","option","none","decodeBytes","byteVectors","imageBytes","u8Matrix","encodeBytes","setItem","networkSaver","NeuralNetwork","numberOfBytes","toU32","charCodeAt","code","byte","u8s","u16s","ceil","String","fromCharCode","App","props","viewImageCanvasRef","customImageInputRef","cropImageCanvasRef","state","match","mnist","stateType","CreateNetwork","hiddenLayerSizeInputValues","previousNetwork","NetworkMainMenu","React","createRef","bindMethods","window","app","onCreateNetworkClick","bind","onTrainClick","onTestClick","onViewClick","onResetClick","onBatchSizeInputValueChange","onEpochsInputValueChange","onLearningRateInputValueChange","onStartTrainingClick","onTrainerTerminate","onExitHyperParameterMenuClick","onStopTrainingClick","onTestMenuExitClick","onExitViewMenuClick","onPreviousImageClick","onNextImageClick","onCustomImageInputChange","enterCropMenu","onCropImageCanvasPointerDown","onCropImageCanvasPointerMove","onCropImageCanvasPointerUp","onShouldInvertInputChange","onDarknessThresholdChange","onCustomImageLabelInputValueChange","onDeleteCustomImageClick","onAddCustomImageClick","setState","newState","MnistLoadingError","saveState","customImages","renderCreateNetworkMenu","renderNetworkMainMenu","HyperParameterMenu","renderHyperParameterMenu","TrainingInProgress","renderTrainingInProgressMenu","Test","renderTestMenu","View","renderViewMenu","Crop","renderCropMenu","renderMnistLoadingErrorScreen","className","onClick","cancelNetworkReset","addLayerBelow","hiddenLayerIndex","layerIndex","key","type","isPositiveIntStr","onChange","e","changeLayerSizeValue","target","deleteLayer","disabled","join","batchSizeInputValue","epochsInputValue","isPositiveNumStr","learningRateInputValue","epochAccuracyRates","sort","a","b","rate","err","ok","viewedImage","getViewedImage","guess","outputActivations","maxConfidence","confidence","digit","guessDigit","viewedIndex","ref","accept","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","hoveredOverDraggable","draggable","TopLeftCorner","BottomRightCorner","TopRightCorner","BottomLeftCorner","EntireSquare","onMouseDown","onTouchStart","checked","shouldInvertImage","darknessThreshold","min","step","isDigit","labelInputValue","ifSome","canvas","current","width","height","ctx","getContext","imageData","Uint8ClampedArray","lightness","ImageData","getImageData","putImageData","paintImage","adjustedCropSquare","pendingCropAdjustment","cropSquare","adjustment","applyPendingAdjustment","paintImageAndCropSquare","uploadedImage","changedLayerIndex","newValue","concat","expectState","every","hiddenLayerSizes","networkTester","updateState","result","updateOrUpdater","unwrapOr","networkTrainer","prevState","ifErr","tester","newIndex","file","input","files","reader","FileReader","readAsDataURL","readFileAsDataUrl","img","document","createElement","src","getAverageDarkness","x","y","square","getLocalPointerCoordinates","rect","getBoundingClientRect","scale","localRadius","CropMenuConfig","GlobalCornerHandleRadius","optDragged","hypot","dragged","startX","startY","currentX","currentY","oldAdjustment","updatedAdjustment","getHoveredOverDraggable","updatedCropSquare","newThreshold","newImage","shouldInvert","imageSmoothingEnabled","drawImage","invertContext","srcCtx","fillStyle","fillRect","applyWhiteBackground","getU8Matrix","getCustomImage","updatedCustomImages","newImageIndex","customImageIndex","newCustomImages","Component","Number","isFinite","OverlayColor","CropSquareColor","CropSquareLineWidth","crop","clearRect","cropBottom","cropRight","paintOverlay","compressed","pixels","averageLightness","applyGrayscale","lightnessThreshold","roundedLightness","applyDarknessThreshold","cropAndCompress","paintCompressedImage","strokeStyle","lineWidth","strokeRect","drawCropSquareCircle","moveTo","beginPath","arc","PI","closePath","boundingRect","clientX","clientY","touches","getGlobalPointerCoordinates","xScale","yScale","left","top","canvasWidth","canvasHeight","preserveSize","maxX","maxY","maxSize","transformBackIntoBoundsIfNeeded","isCornerAdjustment","corner","getDiagonal","clampToTopLeft","clampToTopRight","clampToBottomRight","clampToBottomLeft","clamp","right","bottom","applyPendingCornerAdjustmentToRect","dx","dy","applyTranslation","applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare","roundedDarkness","totalLightness","numberOfPixels","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b8e4e968.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"47a272850bbded72f26d.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"d8550a6f7a1d57fa356a.worker.js\");\n};","export class Matrix {\n  static randomUniform(rows: number, columns: number): Matrix {\n    const size = rows * columns;\n    const data = new Array(size);\n    for (let i = 0; i < size; i++) {\n      data[i] = Math.random() * 2 - 1;\n    }\n    return new Matrix(rows, columns, data);\n  }\n\n  static zeros(rows: number, columns: number): Matrix {\n    const data = new Array(rows * columns).fill(0);\n    return new Matrix(rows, columns, data);\n  }\n\n  static fromRows(rows: number[][]): Matrix {\n    const columns = rows[0].length;\n    if (rows.some((row) => row.length !== columns)) {\n      throw new Error(\n        \"Cannot create a matrix from a jagged array: \" + JSON.stringify(rows)\n      );\n    }\n\n    return new Matrix(rows.length, columns, rows.flat());\n  }\n\n  static columnVector(entries: number[]): Matrix {\n    return new Matrix(entries.length, 1, entries);\n  }\n\n  static fromRowMajorOrderEntries(\n    rows: number,\n    columns: number,\n    entries: number[]\n  ): Matrix {\n    if (entries.length !== rows * columns) {\n      throw new Error(\n        \"Expected \" +\n          rows * columns +\n          \" entries but instead got \" +\n          entries.length +\n          \".\"\n      );\n    }\n\n    return new Matrix(rows, columns, entries);\n  }\n\n  public readonly rows: number;\n  public readonly columns: number;\n  private data: number[];\n\n  private constructor(rows: number, columns: number, data: number[]) {\n    this.rows = rows;\n    this.columns = columns;\n    this.data = data;\n  }\n\n  clone(): Matrix {\n    return new Matrix(this.rows, this.columns, this.data.slice());\n  }\n\n  mutMultiplyScalar(n: number): void {\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] *= n;\n    }\n  }\n\n  mutAdd(other: Matrix): void {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] += other.data[i];\n    }\n  }\n\n  mutSubtract(other: Matrix): void {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] -= other.data[i];\n    }\n  }\n\n  immutSubtract(other: Matrix): Matrix {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot add a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix to a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const clone = this.clone();\n    const size = clone.data.length;\n    for (let i = 0; i < size; i++) {\n      clone.data[i] -= other.data[i];\n    }\n    return clone;\n  }\n\n  immutMultiply(other: Matrix): Matrix {\n    if (this.columns !== other.rows) {\n      throw new TypeError(\n        \"Cannot multiply a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix with a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const product = Matrix.zeros(this.rows, other.columns);\n\n    const thisData = this.data;\n    const otherData = other.data;\n    const productData = product.data;\n    const thisRows = this.rows;\n    const otherColumns = other.columns;\n    const thisColumns = this.columns;\n    const productColumns = product.columns;\n\n    for (let thisR = 0; thisR < thisRows; thisR++) {\n      for (let otherC = 0; otherC < otherColumns; otherC++) {\n        let dot = 0;\n        for (let thisC = 0; thisC < thisColumns; thisC++) {\n          dot +=\n            thisData[thisR * thisColumns + thisC] *\n            otherData[thisC * otherColumns + otherC];\n        }\n        productData[thisR * productColumns + otherC] = dot;\n      }\n    }\n    return product;\n  }\n\n  mutHadamard(other: Matrix): void {\n    if (!(other.rows === this.rows && other.columns === this.columns)) {\n      throw new TypeError(\n        \"Cannot take the Hadamard product of a \" +\n          this.rows +\n          \"x\" +\n          this.columns +\n          \" matrix and a \" +\n          other.rows +\n          \"x\" +\n          other.columns +\n          \" matrix.\"\n      );\n    }\n\n    const size = this.data.length;\n    for (let i = 0; i < size; i++) {\n      this.data[i] *= other.data[i];\n    }\n  }\n\n  immutTranspose(): Matrix {\n    const transposed = new Matrix(this.columns, this.rows, this.data.slice());\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        transposed.data[c * transposed.columns + r] = this.data[\n          r * this.columns + c\n        ];\n      }\n    }\n    return transposed;\n  }\n\n  rowMajorOrderEntries(): readonly number[] {\n    return this.data;\n  }\n\n  immutApplyElementwise(f: (entry: number) => number): Matrix {\n    const clone = this.clone();\n    const cloneData = clone.data;\n    const size = cloneData.length;\n    for (let i = 0; i < size; i++) {\n      cloneData[i] = f(cloneData[i]);\n    }\n    return clone;\n  }\n\n  print(decimals: number): string {\n    const entries = this.rowMajorOrderEntries();\n    const entryStrings = entries.map((entry) => entry.toFixed(decimals));\n    const entryStringLengths = entryStrings.map((s) => s.length);\n    const maxLength = Math.max(...entryStringLengths);\n\n    const topAndBottomBorder = \"-\".repeat(\n      this.columns * (maxLength + \" | \".length) - \" | \".length\n    );\n\n    let str = topAndBottomBorder + \"\\n\";\n\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        str +=\n          leftpad(entryStrings[r * this.columns + c], maxLength, \" \") + \" | \";\n      }\n\n      str = str.slice(0, -\" | \".length);\n\n      str += \"\\n\";\n    }\n\n    str += topAndBottomBorder;\n    return str;\n  }\n}\n\nfunction leftpad(s: string, minLength: number, fillCharacter: string): string {\n  const diff = minLength - s.length;\n  if (diff <= 0) {\n    return s;\n  }\n\n  return fillCharacter.repeat(diff) + s;\n}\n","import { Matrix } from \"../matrix\";\n\nexport interface LabeledImage {\n  rows: number;\n  columns: number;\n  inputs: Matrix;\n  label: number;\n}\n\nexport interface VectorLabeledImage {\n  rows: number;\n  columns: number;\n  inputs: Matrix;\n  outputs: Matrix;\n}\n\ninterface ImageMatrix {\n  rows: number;\n  columns: number;\n  matrix: Matrix;\n}\n\nexport interface AccuracyRate {\n  correct: number;\n  total: number;\n}\n\nconst Idx3FileFormat = {\n  MagicNumber: { offset: 0, requiredValue: 0x00000803 },\n  NumberOfImages: { offset: 4 },\n  NumberOfRows: { offset: 8 },\n  NumberOfColumns: { offset: 12 },\n} as const;\n\nconst Idx1FileFormat = {\n  MagicNumber: { offset: 0, requiredValue: 0x00000801 },\n  NumberOfLabels: { offset: 4 },\n} as const;\n\nexport function getLabeledImages(\n  imagesBuffer: ArrayBuffer,\n  labelsBuffer: ArrayBuffer\n): LabeledImage[] {\n  const images = getImages(imagesBuffer);\n  const labels = getLabels(labelsBuffer);\n\n  if (images.length !== labels.length) {\n    throw new Error(\n      \"There are \" +\n        images.length +\n        \" images, but \" +\n        labels.length +\n        \" labels. There must be the same amount of images and labels.\"\n    );\n  }\n\n  const labeledImages: LabeledImage[] = new Array(images.length);\n  for (let i = 0; i < images.length; i++) {\n    const { rows, columns, matrix } = images[i];\n    labeledImages[i] = { rows, columns, inputs: matrix, label: labels[i] };\n  }\n  return labeledImages;\n}\n\nfunction getImages(buffer: ArrayBuffer): ImageMatrix[] {\n  const bytes = new Uint8Array(buffer);\n\n  assertIdx3MagicNumberIsCorrect(bytes);\n\n  const numberOfImages = getInt32MsbFirst(\n    bytes,\n    Idx3FileFormat.NumberOfImages.offset\n  );\n  const rows = getInt32MsbFirst(bytes, Idx3FileFormat.NumberOfRows.offset);\n  const columns = getInt32MsbFirst(\n    bytes,\n    Idx3FileFormat.NumberOfColumns.offset\n  );\n  const size = rows * columns;\n\n  let imagesParsed = 0;\n  const images: ImageMatrix[] = new Array(numberOfImages);\n  const firstPixelIndex = Idx3FileFormat.NumberOfColumns.offset + 4;\n\n  while (imagesParsed < numberOfImages) {\n    const vectorEntries: number[] = new Array(size);\n    for (let j = 0; j < size; j++) {\n      vectorEntries[j] = bytes[firstPixelIndex + imagesParsed * size + j] / 255;\n    }\n\n    images[imagesParsed] = {\n      rows,\n      columns,\n      matrix: Matrix.columnVector(vectorEntries),\n    };\n    imagesParsed++;\n  }\n\n  return images;\n}\n\nfunction assertIdx3MagicNumberIsCorrect(bytes: Uint8Array): void {\n  const actual = getInt32MsbFirst(bytes, Idx3FileFormat.MagicNumber.offset);\n  const expected = Idx3FileFormat.MagicNumber.requiredValue;\n  if (actual !== expected) {\n    throw new Error(\n      \"The first 4 bytes of an idx3 file must be 0x\" +\n        expected.toString(16) +\n        \", but the first 4 bytes of the provided file were 0x\" +\n        actual.toString(16)\n    );\n  }\n}\n\nfunction getInt32MsbFirst(bytes: Uint8Array, offset: number): number {\n  return (\n    (bytes[offset] << 24) |\n    (bytes[offset + 1] << 16) |\n    (bytes[offset + 2] << 8) |\n    bytes[offset + 3]\n  );\n}\n\nfunction getLabels(buffer: ArrayBuffer): number[] {\n  const bytes = new Uint8Array(buffer);\n\n  assertIdx1MagicNumberIsCorrect(bytes);\n\n  const numberOfLabels = getInt32MsbFirst(\n    bytes,\n    Idx1FileFormat.NumberOfLabels.offset\n  );\n  const labels: number[] = new Array(numberOfLabels);\n  const firstLabelIndex = Idx1FileFormat.NumberOfLabels.offset + 4;\n  for (let i = 0; i < numberOfLabels; i++) {\n    labels[i] = bytes[firstLabelIndex + i];\n  }\n  return labels;\n}\n\nfunction assertIdx1MagicNumberIsCorrect(bytes: Uint8Array): void {\n  const actual = getInt32MsbFirst(bytes, Idx1FileFormat.MagicNumber.offset);\n  const expected = Idx1FileFormat.MagicNumber.requiredValue;\n  if (actual !== expected) {\n    throw new Error(\n      \"The first 4 bytes of an idx1 file must be 0x\" +\n        expected.toString(16) +\n        \", but the first 4 bytes of the provided file were 0x\" +\n        actual.toString(16)\n    );\n  }\n}\n\nexport function convertLabelToVector(image: LabeledImage): VectorLabeledImage {\n  const entries: number[] = new Array(10).fill(0);\n  entries[image.label] = 1;\n  const outputs = Matrix.columnVector(entries);\n  return {\n    rows: image.rows,\n    columns: image.columns,\n    inputs: image.inputs,\n    outputs,\n  };\n}\n","import url from \"url\";\nimport {\n  convertLabelToVector,\n  getLabeledImages,\n  LabeledImage,\n  VectorLabeledImage,\n} from \".\";\n\nexport interface MnistData {\n  training: VectorLabeledImage[];\n  test: LabeledImage[];\n}\n\ndeclare const self: { location: Window[\"location\"] };\n\nconst { location } = self;\n\nconst TRAINING_IMAGES_URL = url.resolve(\n  location.href,\n  \"./assets/train60k-images-idx3-ubyte\"\n);\nconst TRAINING_LABELS_URL = url.resolve(\n  location.href,\n  \"./assets/train60k-labels-idx1-ubyte\"\n);\nconst TEST_IMAGES_URL = url.resolve(\n  location.href,\n  \"./assets/test10k-images-idx3-ubyte\"\n);\nconst TEST_LABELS_URL = url.resolve(\n  location.href,\n  \"./assets/test10k-labels-idx1-ubyte\"\n);\nconst trainingImagesProm: Promise<ArrayBuffer> = getArrayBuffer(\n  TRAINING_IMAGES_URL\n);\nconst trainingLabelsProm: Promise<ArrayBuffer> = getArrayBuffer(\n  TRAINING_LABELS_URL\n);\nconst testImagesProm: Promise<ArrayBuffer> = getArrayBuffer(TEST_IMAGES_URL);\nconst testLabelsProm: Promise<ArrayBuffer> = getArrayBuffer(TEST_LABELS_URL);\n\nfunction getArrayBuffer(url: string): Promise<ArrayBuffer> {\n  return fetch(url).then((response) => {\n    if (200 <= response.status && response.status <= 299) {\n      return response.arrayBuffer();\n    } else {\n      return getErrorMessage(response).then((errorMessage) =>\n        Promise.reject(\n          new Error(\n            \"Tried to fetch \" +\n              url +\n              \" but got the following error: \" +\n              errorMessage\n          )\n        )\n      );\n    }\n  });\n}\n\nfunction getErrorMessage(response: Response): Promise<string> {\n  const { status, statusText } = response;\n  return response\n    .text()\n    .then((text) => status + \" (\" + statusText + \"): \" + text);\n}\n\nexport const mnistProm: Promise<MnistData> = Promise.all([\n  trainingImagesProm,\n  trainingLabelsProm,\n  testImagesProm,\n  testLabelsProm,\n]).then(\n  ([\n    trainingImagesBuffer,\n    trainingLabelsBuffer,\n    testImagesBuffer,\n    testLabelsBuffer,\n  ]) => {\n    return {\n      training: getLabeledImages(\n        trainingImagesBuffer,\n        trainingLabelsBuffer\n      ).map(convertLabelToVector),\n      test: getLabeledImages(testImagesBuffer, testLabelsBuffer),\n    };\n  }\n);\n","import { AccuracyRate } from \"./data\";\nimport { StochasticGradientDescentHyperParameters } from \"./network\";\n\nexport enum WorkerMessageType {\n  StartTrainingRequest,\n  TrainingEpochCompleteNotification,\n  TerminateTrainingRequest,\n  TerminateTrainingResponse,\n\n  StartTestingRequest,\n  TestCompleteNotification,\n}\n\nexport type NetworkTrainerRequest =\n  | StartTrainingRequest\n  | TerminateTrainingRequest;\n\nexport type NetworkTrainerNotification =\n  | TrainingEpochCompleteNotification\n  | TerminateTrainingResponse;\n\nexport interface StartTrainingRequest {\n  messageType: WorkerMessageType.StartTrainingRequest;\n\n  networkBuffer: ArrayBuffer;\n  hyperParams: StochasticGradientDescentHyperParameters;\n}\n\nexport interface TrainingEpochCompleteNotification {\n  messageType: WorkerMessageType.TrainingEpochCompleteNotification;\n\n  accuracyRate: AccuracyRate;\n  epoch: number;\n}\n\nexport interface TerminateTrainingRequest {\n  messageType: WorkerMessageType.TerminateTrainingRequest;\n}\n\nexport interface TerminateTrainingResponse {\n  messageType: WorkerMessageType.TerminateTrainingResponse;\n\n  networkBuffer: ArrayBuffer;\n}\n\nexport interface StartTestingRequest {\n  messageType: WorkerMessageType.StartTestingRequest;\n\n  networkBuffer: ArrayBuffer;\n}\n\nexport interface TestCompleteNotification {\n  messageType: WorkerMessageType.TestCompleteNotification;\n  accuracyRate: AccuracyRate;\n}\n","import { LabeledImage, VectorLabeledImage, AccuracyRate } from \"./data\";\nimport { Matrix } from \"./matrix\";\nimport { DeepReadonly } from \"./deepReadonly\";\n\nexport interface Network {\n  readonly sizes: number[];\n\n  stochasticGradientDescent(\n    trainingData: VectorLabeledImage[],\n    hyperparams: StochasticGradientDescentHyperParameters,\n    evaluationData?: LabeledImage[]\n  ): void;\n\n  performForwardPass(inputColumnVector: Matrix): WeightedSumsAndActivations;\n\n  test(testData: LabeledImage[]): AccuracyRate;\n\n  getWeights(): DeepReadonly<MatrixMap>;\n\n  getBiases(): DeepReadonly<MatrixMap>;\n}\n\nexport interface WeightedSumsAndActivations {\n  weightedSums: MatrixMap;\n  activations: MatrixMap;\n}\n\nexport interface MatrixMap {\n  [layer: number]: Matrix;\n  length: number;\n}\n\nexport interface StochasticGradientDescentHyperParameters {\n  batchSize: number;\n  epochs: number;\n  learningRate: number;\n}\n\nexport class Network1 implements Network {\n  private layers: number;\n  private weights: MatrixMap;\n  private biases: MatrixMap;\n  private log: (accuracyRate: AccuracyRate, epoch: number) => void;\n\n  public readonly sizes: number[];\n\n  static fromWeightsAndBiases(weights: MatrixMap, biases: MatrixMap): Network {\n    const sizes = [weights[1].columns];\n    for (let i = 1; i < weights.length; i++) {\n      sizes.push(weights[i].rows);\n    }\n\n    const network = new Network1(sizes);\n\n    for (let i = 1; i < weights.length; i++) {\n      network.weights[i] = weights[i];\n      network.biases[i] = biases[i];\n    }\n\n    return network;\n  }\n\n  constructor(\n    sizes: number[],\n    log?: (accuracyRate: AccuracyRate, epoch: number) => void\n  ) {\n    this.layers = sizes.length;\n\n    this.weights = [];\n    this.biases = [];\n    for (let outputLayer = 1; outputLayer < sizes.length; outputLayer++) {\n      const inputLayer = outputLayer - 1;\n      const outputLayerSize = sizes[outputLayer];\n      const inputLayerSize = sizes[inputLayer];\n      this.weights[outputLayer] = Matrix.randomUniform(\n        outputLayerSize,\n        inputLayerSize\n      );\n      this.biases[outputLayer] = Matrix.randomUniform(outputLayerSize, 1);\n    }\n\n    this.log = log || (() => {});\n\n    this.sizes = sizes;\n  }\n\n  stochasticGradientDescent(\n    trainingData: VectorLabeledImage[],\n    hyperparams: StochasticGradientDescentHyperParameters,\n    testData?: LabeledImage[]\n  ): void {\n    const { batchSize, epochs, learningRate } = hyperparams;\n\n    for (let epoch = 0; epoch < epochs; epoch++) {\n      const miniBatches = divideIntoMiniBatches(trainingData, batchSize);\n      for (const miniBatch of miniBatches) {\n        const { weightGradients, biasGradients } = this.getAverageGradients(\n          miniBatch\n        );\n\n        for (let i = 1; i < this.layers; i++) {\n          weightGradients[i].mutMultiplyScalar(learningRate);\n          biasGradients[i].mutMultiplyScalar(learningRate);\n\n          this.weights[i].mutSubtract(weightGradients[i]);\n          this.biases[i].mutSubtract(biasGradients[i]);\n        }\n      }\n\n      if (testData !== undefined) {\n        const accuracyRate = this.test(testData);\n        this.log(accuracyRate, epoch);\n      }\n    }\n  }\n\n  private getAverageGradients(miniBatch: VectorLabeledImage[]): Gradients {\n    const weightGradients = this.getZeroMatricesForWeightGradients();\n    const biasGradients = this.getZeroMatricesForBiasGradients();\n\n    for (const image of miniBatch) {\n      const imageGradients = this.getGradients(image);\n      for (let i = 1; i < this.layers; i++) {\n        weightGradients[i].mutAdd(imageGradients.weightGradients[i]);\n        biasGradients[i].mutAdd(imageGradients.biasGradients[i]);\n      }\n    }\n\n    for (let i = 1; i < this.layers; i++) {\n      weightGradients[i].mutMultiplyScalar(1 / miniBatch.length);\n      biasGradients[i].mutMultiplyScalar(1 / miniBatch.length);\n    }\n\n    return { weightGradients, biasGradients };\n  }\n\n  private getZeroMatricesForWeightGradients(): MatrixMap {\n    const matrices: MatrixMap = [];\n    for (let i = 1; i < this.layers; i++) {\n      const weightMatrix = this.weights[i];\n      matrices[i] = Matrix.zeros(weightMatrix.rows, weightMatrix.columns);\n    }\n    return matrices;\n  }\n\n  private getZeroMatricesForBiasGradients(): MatrixMap {\n    const matrices: MatrixMap = [];\n    for (let i = 1; i < this.layers; i++) {\n      const biasMatrix = this.biases[i];\n      matrices[i] = Matrix.zeros(biasMatrix.rows, biasMatrix.columns);\n    }\n    return matrices;\n  }\n\n  private getGradients(image: VectorLabeledImage): Gradients {\n    const { weightedSums, activations } = this.performForwardPass(image.inputs);\n    const errors: MatrixMap = [];\n    const weightGradients: MatrixMap = [];\n    const biasGradients: MatrixMap = [];\n\n    const lastLayerError = weightedSums[this.layers - 1].immutApplyElementwise(\n      sigmaPrime\n    );\n    lastLayerError.mutHadamard(\n      this.getLastLayerCostDerivative(\n        activations[this.layers - 1],\n        image.outputs\n      )\n    );\n\n    errors[this.layers - 1] = lastLayerError;\n    weightGradients[this.layers - 1] = lastLayerError.immutMultiply(\n      activations[this.layers - 2].immutTranspose()\n    );\n    biasGradients[this.layers - 1] = lastLayerError;\n\n    for (let i = this.layers - 2; i >= 1; i--) {\n      const error = this.weights[i + 1]\n        .immutTranspose()\n        .immutMultiply(errors[i + 1]);\n      error.mutHadamard(weightedSums[i].immutApplyElementwise(sigmaPrime));\n\n      errors[i] = error;\n      weightGradients[i] = error.immutMultiply(\n        activations[i - 1].immutTranspose()\n      );\n      biasGradients[i] = error;\n    }\n\n    return { weightGradients, biasGradients };\n  }\n\n  performForwardPass(inputs: Matrix): WeightedSumsAndActivations {\n    const weightedSums: MatrixMap = [];\n    const activations: MatrixMap = [inputs];\n\n    for (let outputLayer = 1; outputLayer < this.layers; outputLayer++) {\n      const inputLayer = outputLayer - 1;\n      const weightedSum = this.weights[outputLayer].immutMultiply(\n        activations[inputLayer]\n      );\n      weightedSum.mutAdd(this.biases[outputLayer]);\n      weightedSums[outputLayer] = weightedSum;\n      activations[outputLayer] = weightedSum.immutApplyElementwise(sigma);\n    }\n    return { weightedSums, activations };\n  }\n\n  private getLastLayerCostDerivative(\n    actualOutput: Matrix,\n    expectedOutput: Matrix\n  ): Matrix {\n    return actualOutput.immutSubtract(expectedOutput);\n  }\n\n  test(testData: LabeledImage[]): AccuracyRate {\n    let correctClassifications = 0;\n    for (const image of testData) {\n      const { activations } = this.performForwardPass(image.inputs);\n      const prediction = argmax(\n        activations[this.layers - 1].rowMajorOrderEntries()\n      );\n      if (prediction === image.label) {\n        correctClassifications++;\n      }\n    }\n    return { correct: correctClassifications, total: testData.length };\n  }\n\n  getWeights(): DeepReadonly<MatrixMap> {\n    return this.weights;\n  }\n\n  getBiases(): DeepReadonly<MatrixMap> {\n    return this.biases;\n  }\n}\n\nexport interface Gradients {\n  weightGradients: MatrixMap;\n  biasGradients: MatrixMap;\n}\n\nfunction divideIntoMiniBatches(\n  trainingData: VectorLabeledImage[],\n  miniBatchSize: number\n): VectorLabeledImage[][] {\n  shuffle(trainingData);\n  const miniBatches: VectorLabeledImage[][] = [];\n  for (let i = 0; i < trainingData.length; i += miniBatchSize) {\n    miniBatches.push(trainingData.slice(i, i + miniBatchSize));\n  }\n  return miniBatches;\n}\n\nfunction shuffle(arr: unknown[]): void {\n  const SHUFFLE_TIMES = 512;\n\n  for (let n = 0; n < SHUFFLE_TIMES; n++) {\n    for (let i = arr.length - 1; i >= 1; i--) {\n      let j = randInt(i + 1);\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n}\n\nfunction randInt(exclMax: number): number {\n  return Math.floor(Math.random() * exclMax);\n}\n\nfunction sigma(z: number): number {\n  return 1 / (1 + Math.exp(-z));\n}\n\nfunction sigmaPrime(z: number): number {\n  const sigmaZ = sigma(z);\n  return sigmaZ * (1 - sigmaZ);\n}\n\nfunction argmax(arr: readonly number[]): number {\n  let maxIndex = 0;\n  let max = arr[maxIndex];\n  for (let i = 1; i < arr.length; i++) {\n    const value = arr[i];\n    if (value > max) {\n      max = value;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n","import { Matrix } from \"./matrix\";\nimport { MatrixMap, Network, Network1 } from \"./network\";\n\nexport function serializeNetwork(network: Network): ArrayBuffer {\n  const entries = getEntries(network);\n\n  const numberOfBytesForSizes =\n    (1 + network.sizes.length) * Uint32Array.BYTES_PER_ELEMENT;\n\n  const buffer = new ArrayBuffer(\n    numberOfBytesForSizes + entries.length * entries.BYTES_PER_ELEMENT\n  );\n\n  const uints = new Uint32Array(\n    buffer,\n    0,\n    numberOfBytesForSizes / Uint32Array.BYTES_PER_ELEMENT\n  );\n\n  uints[0] = network.sizes.length;\n\n  for (let i = 0; i < network.sizes.length; i++) {\n    uints[1 + i] = network.sizes[i];\n  }\n\n  const floats = new Float64Array(buffer, numberOfBytesForSizes);\n  floats.set(entries);\n\n  return buffer;\n}\n\nfunction getEntries(network: Network): Float64Array {\n  const weights = network.getWeights();\n  const biases = network.getBiases();\n\n  let entryCount = 0;\n\n  for (let i = 1; i < weights.length; i++) {\n    const weightMatrix = weights[i];\n    const weightMatrixSize = weightMatrix.rows * weightMatrix.columns;\n    entryCount += weightMatrixSize;\n\n    const biasMatrix = biases[i];\n    const biasMatrixSize = biasMatrix.rows * biasMatrix.columns;\n    entryCount += biasMatrixSize;\n  }\n\n  const entries = new Float64Array(entryCount);\n\n  let cursor = 0;\n  for (let i = 1; i < weights.length; i++) {\n    const weightMatrixEntries = weights[i].rowMajorOrderEntries();\n    entries.set(weightMatrixEntries, cursor);\n    cursor += weightMatrixEntries.length;\n\n    const biasMatrixEntries = biases[i].rowMajorOrderEntries();\n    entries.set(biasMatrixEntries, cursor);\n    cursor += biasMatrixEntries.length;\n  }\n\n  return entries;\n}\n\nexport function deserializeNetwork(buffer: ArrayBuffer): Network {\n  const numberOfLayers = new Uint32Array(buffer, 0, 1)[0];\n  const layerSizes = new Uint32Array(buffer, 4, numberOfLayers);\n  const entries = new Float64Array(\n    buffer.slice(Uint32Array.BYTES_PER_ELEMENT * (1 + numberOfLayers))\n  );\n\n  const weights: MatrixMap = [];\n  const biases: MatrixMap = [];\n\n  let cursor = 0;\n  for (let i = 1; i < layerSizes.length; i++) {\n    const outputLayerSize = layerSizes[i];\n    const inputLayerSize = layerSizes[i - 1];\n\n    {\n      const rows = outputLayerSize;\n      const columns = inputLayerSize;\n      const size = rows * columns;\n      weights[i] = Matrix.fromRowMajorOrderEntries(\n        rows,\n        columns,\n        toArray(entries.subarray(cursor, cursor + size))\n      );\n\n      cursor += size;\n    }\n\n    {\n      const rows = outputLayerSize;\n      biases[i] = Matrix.fromRowMajorOrderEntries(\n        rows,\n        1,\n        toArray(entries.subarray(cursor, cursor + rows))\n      );\n\n      cursor += rows;\n    }\n  }\n\n  return Network1.fromWeightsAndBiases(weights, biases);\n}\n\nfunction toArray(floats: Float64Array): number[] {\n  const arr = new Array(floats.length);\n  for (let i = 0; i < floats.length; i++) {\n    arr[i] = floats[i];\n  }\n  return arr;\n}\n","import { Option, Result } from \"rusty-ts\";\nimport { AccuracyRate } from \"./data\";\nimport { MnistData } from \"./data/mnist\";\nimport { Network } from \"./network\";\nimport { NetworkTester, NetworkTrainer } from \"./networkServices\";\nimport { Matrix } from \"./matrix\";\n\nexport type AppState =\n  | CreateNetworkState\n  | NetworkMainMenuState\n  | HyperParameterMenuState\n  | TrainingInProgressState\n  | TestState\n  | ViewState\n  | CropState\n  | MnistLoadingErrorState;\n\nexport enum StateType {\n  CreateNetwork,\n  NetworkMainMenu,\n  HyperParameterMenu,\n  TrainingInProgress,\n  Test,\n  View,\n  Crop,\n\n  MnistLoadingError,\n}\n\nexport interface StateMap {\n  [StateType.CreateNetwork]: CreateNetworkState;\n  [StateType.NetworkMainMenu]: NetworkMainMenuState;\n  [StateType.HyperParameterMenu]: HyperParameterMenuState;\n  [StateType.TrainingInProgress]: TrainingInProgressState;\n  [StateType.Test]: TestState;\n  [StateType.View]: ViewState;\n  [StateType.Crop]: CropState;\n\n  [StateType.MnistLoadingError]: MnistLoadingErrorState;\n}\n\nexport interface CreateNetworkState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.CreateNetwork;\n\n  hiddenLayerSizeInputValues: string[];\n  previousNetwork: Option<Network>;\n}\n\nexport interface NetworkMainMenuState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.NetworkMainMenu;\n\n  network: Network;\n}\n\nexport interface HyperParameterMenuState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.HyperParameterMenu;\n\n  network: Network;\n\n  batchSizeInputValue: string;\n  epochsInputValue: string;\n  learningRateInputValue: string;\n}\n\nexport interface TrainingInProgressState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.TrainingInProgress;\n\n  network: Network;\n\n  networkTrainer: NetworkTrainer;\n  epochAccuracyRates: EpochAccuracyRate[];\n}\n\nexport interface EpochAccuracyRate extends AccuracyRate {\n  epoch: number;\n}\n\nexport interface TestState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.Test;\n\n  network: Network;\n\n  accuracyRate: Result<AccuracyRate, NetworkTester>;\n}\n\nexport interface ViewState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.View;\n\n  network: Network;\n\n  viewedIndex: number;\n  customImages: CustomImage[];\n}\n\nexport interface CustomImage {\n  u8Matrix: Matrix;\n  label: number;\n}\n\nexport interface CropState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.Crop;\n\n  network: Network;\n  customImages: CustomImage[];\n\n  uploadedImage: HTMLImageElement;\n  darknessThreshold: number;\n  cropSquare: Square;\n  pendingCropAdjustment: Option<SquareAdjustment>;\n  hoveredOverDraggable: Option<Draggable>;\n  shouldInvertImage: boolean;\n  labelInputValue: string;\n}\n\nexport interface Square {\n  x: number;\n  y: number;\n  size: number;\n}\n\nexport interface SquareAdjustment {\n  dragged: Draggable;\n  startX: number;\n  startY: number;\n  currentX: number;\n  currentY: number;\n}\n\nexport enum Draggable {\n  TopLeftCorner,\n  TopRightCorner,\n  BottomRightCorner,\n  BottomLeftCorner,\n\n  EntireSquare,\n}\n\nexport type Corner =\n  | Draggable.TopLeftCorner\n  | Draggable.TopRightCorner\n  | Draggable.BottomRightCorner\n  | Draggable.BottomLeftCorner;\n\nexport interface MnistLoadingErrorState {\n  mnist: Option<MnistData>;\n\n  stateType: StateType.MnistLoadingError;\n\n  errorMessage: string;\n}\n","import { Option, option } from \"rusty-ts\";\nimport { Matrix } from \"./matrix\";\nimport { Network } from \"./network\";\nimport { CustomImage } from \"./state\";\nimport { deserializeNetwork, serializeNetwork } from \"./networkSerializer\";\n\nexport interface StateSaver<T> {\n  getState(): Option<T>;\n  saveState(state: T): void;\n}\n\nenum LocalStorageKeys {\n  CustomImages = \"CustomImages\",\n  NeuralNetwork = \"NeuralNetwork\",\n}\n\n// 28*28 pixels plus 1 label\nconst BYTES_PER_IMAGE = 28 * 28 + 1;\n\nexport const imageSaver: StateSaver<CustomImage[]> = {\n  getState(): Option<CustomImage[]> {\n    const stateStr = localStorage.getItem(LocalStorageKeys.CustomImages);\n    if (stateStr === null) {\n      return option.none();\n    } else {\n      const bytes = decodeBytes(stateStr);\n\n      if (bytes.length % BYTES_PER_IMAGE !== 0) {\n        throw new Error(\n          \"Cannot decode image bytes because there are \" +\n            bytes.length +\n            \" bytes, and that number is not a multiple of 784.\"\n        );\n      }\n\n      const numberOfImages = bytes.length / BYTES_PER_IMAGE;\n\n      const byteVectors: CustomImage[] = new Array(numberOfImages);\n      for (let i = 0; i < numberOfImages; i++) {\n        const imageBytes = bytes.subarray(\n          i * BYTES_PER_IMAGE,\n          i * BYTES_PER_IMAGE + 784\n        );\n        const u8Matrix = Matrix.columnVector(toArray(imageBytes));\n        byteVectors[i] = { u8Matrix, label: bytes[i * BYTES_PER_IMAGE + 784] };\n      }\n      return option.some(byteVectors);\n    }\n  },\n\n  saveState(images: CustomImage[]): void {\n    const bytes = new Uint8Array(images.length * BYTES_PER_IMAGE);\n    for (let i = 0; i < images.length; i++) {\n      const image = images[i];\n      bytes.set(image.u8Matrix.rowMajorOrderEntries(), i * BYTES_PER_IMAGE);\n      bytes[i * BYTES_PER_IMAGE + 784] = image.label;\n    }\n\n    const stateStr = encodeBytes(bytes);\n    localStorage.setItem(LocalStorageKeys.CustomImages, stateStr);\n  },\n};\n\nexport const networkSaver: StateSaver<Network> = {\n  getState(): Option<Network> {\n    const stateStr = localStorage.getItem(LocalStorageKeys.NeuralNetwork);\n    if (stateStr === null) {\n      return option.none();\n    } else {\n      const bytes = decodeBytes(stateStr);\n      const network = deserializeNetwork(bytes.buffer);\n      return option.some(network);\n    }\n  },\n\n  saveState(network: Network): void {\n    const buffer = serializeNetwork(network);\n    const stateStr = encodeBytes(new Uint8Array(buffer));\n    localStorage.setItem(LocalStorageKeys.NeuralNetwork, stateStr);\n  },\n};\n\nfunction decodeBytes(str: string): Uint8Array {\n  const numberOfBytes = toU32((str.charCodeAt(0) << 16) | str.charCodeAt(1));\n  const bytes = new Uint8Array(numberOfBytes);\n\n  for (let i = 0; i < numberOfBytes; i++) {\n    const code = str.charCodeAt(2 + Math.floor(i / 2));\n\n    const byte = i % 2 === 0 ? code >>> 8 : code;\n\n    bytes[i] = byte;\n  }\n  return bytes;\n}\n\nfunction toU32(n: number): number {\n  const arr = new Uint32Array(1);\n  arr[0] = n;\n  return arr[0];\n}\n\nfunction toArray(u8s: Uint8Array): number[] {\n  const arr: number[] = new Array(u8s.length);\n  for (let i = 0; i < u8s.length; i++) {\n    arr[i] = u8s[i];\n  }\n  return arr;\n}\n\nfunction encodeBytes(bytes: Uint8Array): string {\n  const numberOfBytes = bytes.length;\n  const u16s = new Array(Math.ceil(numberOfBytes / 2));\n\n  for (let i = 0; i < bytes.length; i++) {\n    const byte = bytes[i];\n    if (i % 2 === 0) {\n      u16s[i / 2] = byte << 8;\n    } else {\n      u16s[(i - 1) / 2] |= byte;\n    }\n  }\n\n  return String.fromCharCode(\n    numberOfBytes >>> 16,\n    numberOfBytes & 0b0000_0000_0000_0000_1111_1111_1111_1111,\n    ...u16s\n  );\n}\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport NetworkTesterWorker from \"worker-loader!./networkTester\";\n\nexport default NetworkTesterWorker;\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport NetworkTrainerWorker from \"worker-loader!./networkTrainer\";\n\nexport default NetworkTrainerWorker;\n","import { AccuracyRate } from \"./data\";\nimport { Network, StochasticGradientDescentHyperParameters } from \"./network\";\nimport { deserializeNetwork, serializeNetwork } from \"./networkSerializer\";\nimport {\n  NetworkTrainerNotification,\n  StartTestingRequest,\n  StartTrainingRequest,\n  TerminateTrainingRequest,\n  TerminateTrainingResponse,\n  TestCompleteNotification,\n  TrainingEpochCompleteNotification,\n  WorkerMessageType,\n} from \"./workerMessages\";\nimport NetworkTesterWorker from \"./workers/networkTester.importable\";\nimport NetworkTrainerWorker from \"./workers/networkTrainer.importable\";\n\nexport interface NetworkTrainer {\n  start(): void;\n  terminate(): void;\n}\n\nexport interface NetworkTester {\n  start(): void;\n  terminate(): void;\n}\n\nexport interface NetworkTrainerListeners {\n  onEpochComplete(accuracyRate: AccuracyRate, epoch: number): void;\n  onTerminate(network: Network): void;\n}\n\nexport interface NetworkTesterListeners {\n  onComplete(rate: AccuracyRate): void;\n}\n\nexport function trainNetwork(\n  network: Network,\n  hyperParams: StochasticGradientDescentHyperParameters,\n  listeners: NetworkTrainerListeners\n): NetworkTrainer {\n  const worker = new NetworkTrainerWorker();\n\n  worker.addEventListener(\"message\", (event) => {\n    const { data } = event;\n    if (data !== null && \"object\" === typeof data && \"messageType\" in data) {\n      const message: NetworkTrainerNotification = data;\n      switch (message.messageType) {\n        case WorkerMessageType.TrainingEpochCompleteNotification:\n          notifyListenersOfEpochCompletion(message);\n          break;\n        case WorkerMessageType.TerminateTrainingResponse:\n          notifyListenersOfTermination(message);\n          break;\n\n        default: {\n          // Force exhaustive matching\n\n          // eslint-disable-next-line\n          const unreachable: never = message;\n        }\n      }\n    }\n  });\n\n  return { start: startTraining, terminate: stopTrainingAfterThisEpoch };\n\n  function notifyListenersOfEpochCompletion(\n    message: TrainingEpochCompleteNotification\n  ): void {\n    listeners.onEpochComplete(message.accuracyRate, message.epoch);\n  }\n\n  function notifyListenersOfTermination(\n    message: TerminateTrainingResponse\n  ): void {\n    const updatedNetwork = deserializeNetwork(message.networkBuffer);\n    listeners.onTerminate(updatedNetwork);\n\n    worker.terminate();\n  }\n\n  function startTraining(): void {\n    const message: StartTrainingRequest = {\n      messageType: WorkerMessageType.StartTrainingRequest,\n      networkBuffer: serializeNetwork(network),\n      hyperParams,\n    };\n    worker.postMessage(message, [message.networkBuffer]);\n  }\n\n  function stopTrainingAfterThisEpoch(): void {\n    const message: TerminateTrainingRequest = {\n      messageType: WorkerMessageType.TerminateTrainingRequest,\n    };\n    worker.postMessage(message);\n  }\n}\n\nexport function testNetwork(\n  network: Network,\n  listeners: NetworkTesterListeners\n): NetworkTrainer {\n  const worker = new NetworkTesterWorker();\n\n  worker.addEventListener(\"message\", (event) => {\n    const { data } = event;\n    if (data !== null && \"object\" === typeof data && \"messageType\" in data) {\n      const message: TestCompleteNotification = data;\n      notifyListenersOfTestingCompletion(message);\n    }\n  });\n\n  return { start: startTesting, terminate: terminateWorker };\n\n  function notifyListenersOfTestingCompletion(\n    message: TestCompleteNotification\n  ): void {\n    listeners.onComplete(message.accuracyRate);\n\n    worker.terminate();\n  }\n\n  function startTesting(): void {\n    const message: StartTestingRequest = {\n      messageType: WorkerMessageType.StartTestingRequest,\n      networkBuffer: serializeNetwork(network),\n    };\n    worker.postMessage(message, [message.networkBuffer]);\n  }\n\n  function terminateWorker(): void {\n    worker.terminate();\n  }\n}\n","import React from \"react\";\nimport { option, Option, result } from \"rusty-ts\";\nimport \"./App.css\";\nimport { AccuracyRate, LabeledImage } from \"./data\";\nimport { MnistData, mnistProm } from \"./data/mnist\";\nimport { Matrix } from \"./matrix\";\nimport {\n  Network,\n  Network1,\n  StochasticGradientDescentHyperParameters,\n} from \"./network\";\nimport { testNetwork, trainNetwork } from \"./networkServices\";\nimport {\n  AppState,\n  Corner,\n  CreateNetworkState,\n  CropState,\n  CustomImage,\n  Draggable,\n  HyperParameterMenuState,\n  MnistLoadingErrorState,\n  NetworkMainMenuState,\n  Square,\n  SquareAdjustment,\n  StateMap,\n  StateType,\n  TestState,\n  TrainingInProgressState,\n  ViewState,\n} from \"./state\";\nimport { imageSaver, networkSaver } from \"./stateSavers\";\n\ninterface Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface CornerAdjustment extends SquareAdjustment {\n  dragged: Corner;\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  private viewImageCanvasRef: React.RefObject<HTMLCanvasElement>;\n  private customImageInputRef: React.RefObject<HTMLInputElement>;\n  private cropImageCanvasRef: React.RefObject<HTMLCanvasElement>;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = getInitialState();\n\n    this.viewImageCanvasRef = React.createRef();\n    this.customImageInputRef = React.createRef();\n    this.cropImageCanvasRef = React.createRef();\n\n    this.bindMethods();\n\n    (window as any).app = this;\n  }\n\n  bindMethods(): void {\n    this.onCreateNetworkClick = this.onCreateNetworkClick.bind(this);\n    this.onTrainClick = this.onTrainClick.bind(this);\n    this.onTestClick = this.onTestClick.bind(this);\n    this.onViewClick = this.onViewClick.bind(this);\n    this.onResetClick = this.onResetClick.bind(this);\n    this.onBatchSizeInputValueChange = this.onBatchSizeInputValueChange.bind(\n      this\n    );\n    this.onEpochsInputValueChange = this.onEpochsInputValueChange.bind(this);\n    this.onLearningRateInputValueChange = this.onLearningRateInputValueChange.bind(\n      this\n    );\n    this.onStartTrainingClick = this.onStartTrainingClick.bind(this);\n    this.onEpochComplete = this.onEpochComplete.bind(this);\n    this.onTrainerTerminate = this.onTrainerTerminate.bind(this);\n    this.onExitHyperParameterMenuClick = this.onExitHyperParameterMenuClick.bind(\n      this\n    );\n    this.onStopTrainingClick = this.onStopTrainingClick.bind(this);\n    this.onTestMenuExitClick = this.onTestMenuExitClick.bind(this);\n    this.onExitViewMenuClick = this.onExitViewMenuClick.bind(this);\n    this.onPreviousImageClick = this.onPreviousImageClick.bind(this);\n    this.onNextImageClick = this.onNextImageClick.bind(this);\n    this.onCustomImageInputChange = this.onCustomImageInputChange.bind(this);\n    this.enterCropMenu = this.enterCropMenu.bind(this);\n    this.onCropImageCanvasPointerDown = this.onCropImageCanvasPointerDown.bind(\n      this\n    );\n    this.onCropImageCanvasPointerMove = this.onCropImageCanvasPointerMove.bind(\n      this\n    );\n    this.onCropImageCanvasPointerUp = this.onCropImageCanvasPointerUp.bind(\n      this\n    );\n    this.onShouldInvertInputChange = this.onShouldInvertInputChange.bind(this);\n    this.onDarknessThresholdChange = this.onDarknessThresholdChange.bind(this);\n    this.onCustomImageLabelInputValueChange = this.onCustomImageLabelInputValueChange.bind(\n      this\n    );\n    this.onDeleteCustomImageClick = this.onDeleteCustomImageClick.bind(this);\n    this.onAddCustomImageClick = this.onAddCustomImageClick.bind(this);\n  }\n\n  componentDidMount(): void {\n    mnistProm.then(\n      (mnist) => {\n        this.setState({ mnist: option.some(mnist) });\n      },\n\n      (error: Error) => {\n        const newState: MnistLoadingErrorState = {\n          mnist: option.none(),\n          stateType: StateType.MnistLoadingError,\n          errorMessage: error.message,\n        };\n        this.saveState(newState);\n      }\n    );\n  }\n\n  saveState(state: AppState): void {\n    this.setState(state);\n\n    if (\"network\" in state) {\n      const { network } = state;\n      networkSaver.saveState(network);\n    }\n\n    if (\"customImages\" in state) {\n      const { customImages } = state;\n      imageSaver.saveState(customImages);\n    }\n  }\n\n  render(): React.ReactElement {\n    const { state } = this;\n    switch (state.stateType) {\n      case StateType.CreateNetwork:\n        return this.renderCreateNetworkMenu(state);\n      case StateType.NetworkMainMenu:\n        return this.renderNetworkMainMenu(state);\n      case StateType.HyperParameterMenu:\n        return this.renderHyperParameterMenu(state);\n      case StateType.TrainingInProgress:\n        return this.renderTrainingInProgressMenu(state);\n      case StateType.Test:\n        return this.renderTestMenu(state);\n      case StateType.View:\n        return this.renderViewMenu(state);\n      case StateType.Crop:\n        return this.renderCropMenu(state);\n\n      case StateType.MnistLoadingError:\n        return this.renderMnistLoadingErrorScreen(state);\n    }\n  }\n\n  renderCreateNetworkMenu(state: CreateNetworkState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>\n          {state.previousNetwork.match({\n            none: () => \"Create network\",\n            some: () => \"Reset network\",\n          })}\n        </h1>\n\n        {state.previousNetwork.match({\n          none: () => null,\n          some: (network) => (\n            <button onClick={() => this.cancelNetworkReset(network)}>\n              Cancel\n            </button>\n          ),\n        })}\n\n        <h2>Layers:</h2>\n        <ol>\n          <li>\n            Input layer: 784 neurons\n            <button onClick={() => this.addLayerBelow(0, state)}>\n              Add layer below\n            </button>\n          </li>\n\n          {state.hiddenLayerSizeInputValues.map((value, hiddenLayerIndex) => {\n            const layerIndex = hiddenLayerIndex + 1;\n            return (\n              <li key={layerIndex}>\n                <label>\n                  Hidden layer:{\" \"}\n                  <input\n                    type=\"text\"\n                    className={isPositiveIntStr(value) ? \"\" : \"InvalidInput\"}\n                    value={value}\n                    onChange={(e) =>\n                      this.changeLayerSizeValue(\n                        layerIndex,\n                        e.target.value,\n                        state\n                      )\n                    }\n                  />{\" \"}\n                  neurons\n                </label>\n                <button onClick={() => this.addLayerBelow(layerIndex, state)}>\n                  Add layer below\n                </button>\n                <button onClick={() => this.deleteLayer(layerIndex, state)}>\n                  Delete layer\n                </button>\n              </li>\n            );\n          })}\n\n          <li>Output layer: 10 neurons</li>\n        </ol>\n\n        <button\n          onClick={this.onCreateNetworkClick}\n          disabled={state.hiddenLayerSizeInputValues.some(\n            (value) => !isPositiveIntStr(value)\n          )}\n        >\n          Create network\n        </button>\n      </div>\n    );\n  }\n\n  renderNetworkMainMenu(state: NetworkMainMenuState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Explore your neural network</h1>\n        <h2>Neurons in each layer: {state.network.sizes.join(\", \")}</h2>\n\n        <button onClick={this.onTrainClick}>Train</button>\n        <button onClick={this.onTestClick}>Test</button>\n        <button onClick={this.onViewClick}>View</button>\n        <button onClick={this.onResetClick}>Reset</button>\n      </div>\n    );\n  }\n\n  renderHyperParameterMenu(state: HyperParameterMenuState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Train (stochastic gradient descent)</h1>\n\n        <button onClick={this.onExitHyperParameterMenuClick}>Cancel</button>\n\n        <h2>Hyperparameters:</h2>\n\n        <label>\n          Batch size:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveIntStr(state.batchSizeInputValue) ? \"\" : \"InvalidInput\"\n            }\n            value={state.batchSizeInputValue}\n            onChange={this.onBatchSizeInputValueChange}\n          />\n        </label>\n\n        <label>\n          Epochs:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveIntStr(state.epochsInputValue) ? \"\" : \"InvalidInput\"\n            }\n            value={state.epochsInputValue}\n            onChange={this.onEpochsInputValueChange}\n          />\n        </label>\n\n        <label>\n          Learning rate:{\" \"}\n          <input\n            type=\"text\"\n            className={\n              isPositiveNumStr(state.learningRateInputValue)\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            value={state.learningRateInputValue}\n            onChange={this.onLearningRateInputValueChange}\n          />\n        </label>\n\n        <button\n          onClick={this.onStartTrainingClick}\n          disabled={\n            !(\n              isPositiveIntStr(state.batchSizeInputValue) &&\n              isPositiveIntStr(state.epochsInputValue) &&\n              isPositiveNumStr(state.learningRateInputValue)\n            )\n          }\n        >\n          Start\n        </button>\n      </div>\n    );\n  }\n\n  renderTrainingInProgressMenu(\n    state: TrainingInProgressState\n  ): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Training in progress...</h1>\n\n        <h2>Logs:</h2>\n        {state.epochAccuracyRates\n          .slice()\n          .sort((a, b) => a.epoch - b.epoch)\n          .map((rate) => (\n            <div key={rate.epoch}>\n              Epoch {rate.epoch}: {rate.correct} / {rate.total}\n            </div>\n          ))}\n\n        <button onClick={this.onStopTrainingClick}>\n          Stop training after current epoch\n        </button>\n      </div>\n    );\n  }\n\n  renderTestMenu(state: TestState): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Test results:</h1>\n\n        {state.accuracyRate.match({\n          err: () => <p>Running tests...</p>,\n          ok: (rate) => (\n            <p>\n              {rate.correct} / {rate.total} correct\n            </p>\n          ),\n        })}\n\n        <button onClick={this.onTestMenuExitClick}>Back</button>\n      </div>\n    );\n  }\n\n  renderViewMenu(state: ViewState): React.ReactElement {\n    return state.mnist.match({\n      none: () => (\n        <div className=\"App\">\n          <p>Loading...</p>\n        </div>\n      ),\n      some: (mnist) => {\n        const viewedImage: LabeledImage = getViewedImage(state, mnist);\n        const guess = guessDigit(state.network, viewedImage.inputs);\n\n        return (\n          <div className=\"App\">\n            <h1>View classifications</h1>\n            <button onClick={this.onExitViewMenuClick}>Back</button>\n\n            <div>\n              <button onClick={this.onPreviousImageClick}>Previous</button>{\" \"}\n              Image {state.viewedIndex + 1} /{\" \"}\n              {mnist.test.length + state.customImages.length}{\" \"}\n              <button onClick={this.onNextImageClick}>Next</button>\n            </div>\n\n            <canvas ref={this.viewImageCanvasRef}></canvas>\n\n            <div\n              className={\n                guess.digit === viewedImage.label ? \"\" : \"IncorrectGuess\"\n              }\n            >\n              Guess: {guess.digit} ({(guess.confidence * 100).toFixed(2)}%\n              confident)\n            </div>\n\n            <div>Actual: {viewedImage.label}</div>\n\n            {state.viewedIndex >= mnist.test.length && (\n              <div>\n                <button onClick={this.onDeleteCustomImageClick}>\n                  Delete this image\n                </button>\n              </div>\n            )}\n\n            <div>\n              <label>\n                Upload your own image:{\" \"}\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  ref={this.customImageInputRef}\n                  onChange={this.onCustomImageInputChange}\n                />\n              </label>\n            </div>\n          </div>\n        );\n      },\n    });\n  }\n\n  renderCropMenu(state: CropState): React.ReactElement {\n    return (\n      <div\n        className=\"App\"\n        onMouseMove={this.onCropImageCanvasPointerMove}\n        onTouchMove={this.onCropImageCanvasPointerMove}\n        onMouseUp={this.onCropImageCanvasPointerUp}\n        onTouchEnd={this.onCropImageCanvasPointerUp}\n      >\n        <h1>Crop image</h1>\n\n        <div>\n          <canvas\n            ref={this.cropImageCanvasRef}\n            className={\n              \"CropImageCanvas WhiteBackground\" +\n              state.hoveredOverDraggable.match({\n                none: () => \"\",\n                some: (draggable): string => {\n                  switch (draggable) {\n                    case Draggable.TopLeftCorner:\n                    case Draggable.BottomRightCorner:\n                      return \" NwseResizeCursor\";\n                    case Draggable.TopRightCorner:\n                    case Draggable.BottomLeftCorner:\n                      return \" NeswResizeCursor\";\n                    case Draggable.EntireSquare:\n                      return \" MoveCursor\";\n                  }\n                },\n              })\n            }\n            onMouseDown={this.onCropImageCanvasPointerDown}\n            onTouchStart={this.onCropImageCanvasPointerDown}\n          ></canvas>\n        </div>\n\n        <div>\n          <label>\n            Invert{\" \"}\n            <input\n              type=\"checkbox\"\n              checked={state.shouldInvertImage}\n              onChange={this.onShouldInvertInputChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label>\n            Darkness threshold:{\" \"}\n            <input\n              type=\"range\"\n              value={state.darknessThreshold}\n              min={0}\n              max={1}\n              step={0.001}\n              onChange={this.onDarknessThresholdChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <label>\n            Label:{\" \"}\n            <input\n              type=\"text\"\n              className={isDigit(state.labelInputValue) ? \"\" : \"InvalidInput\"}\n              value={state.labelInputValue}\n              onChange={this.onCustomImageLabelInputValueChange}\n            />\n          </label>\n        </div>\n\n        <button\n          disabled={!isDigit(state.labelInputValue)}\n          onClick={this.onAddCustomImageClick}\n        >\n          Add\n        </button>\n      </div>\n    );\n  }\n\n  renderMnistLoadingErrorScreen(\n    state: MnistLoadingErrorState\n  ): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <h1>Error loading MNIST data set:</h1>\n        <p>{state.errorMessage}</p>\n      </div>\n    );\n  }\n\n  componentDidUpdate(): void {\n    const { state } = this;\n    state.mnist.ifSome((mnist) => {\n      if (state.stateType === StateType.View) {\n        const canvas = this.viewImageCanvasRef.current;\n        if (canvas !== null) {\n          const viewedImage = getViewedImage(state, mnist);\n          paintImage(viewedImage, canvas);\n        }\n      } else if (state.stateType === StateType.Crop) {\n        const canvas = this.cropImageCanvasRef.current;\n        if (canvas !== null) {\n          const adjustedCropSquare = state.pendingCropAdjustment.match({\n            none: () => state.cropSquare,\n            some: (adjustment) => {\n              return applyPendingAdjustment(\n                state.cropSquare,\n                adjustment,\n                canvas.width,\n                canvas.height\n              );\n            },\n          });\n          paintImageAndCropSquare(\n            state.uploadedImage,\n            adjustedCropSquare,\n            canvas,\n            state.shouldInvertImage,\n            state.darknessThreshold\n          );\n        }\n      }\n    });\n  }\n\n  cancelNetworkReset(network: Network): void {\n    const newState: NetworkMainMenuState = {\n      mnist: this.state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network,\n    };\n    this.saveState(newState);\n  }\n\n  changeLayerSizeValue(\n    changedLayerIndex: number,\n    newValue: string,\n    state: CreateNetworkState\n  ): void {\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues.map(\n        (value, hiddenLayerIndex) => {\n          const layerIndex = hiddenLayerIndex + 1;\n          if (layerIndex === changedLayerIndex) {\n            return newValue;\n          } else {\n            return value;\n          }\n        }\n      ),\n    });\n  }\n\n  addLayerBelow(layerIndex: number, state: CreateNetworkState): void {\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues\n        .slice(0, layerIndex)\n        .concat([\"16\"], state.hiddenLayerSizeInputValues.slice(layerIndex)),\n    });\n  }\n\n  deleteLayer(layerIndex: number, state: CreateNetworkState): void {\n    const hiddenLayerIndex = layerIndex - 1;\n    this.saveState({\n      ...state,\n      hiddenLayerSizeInputValues: state.hiddenLayerSizeInputValues\n        .slice(0, hiddenLayerIndex)\n        .concat(state.hiddenLayerSizeInputValues.slice(hiddenLayerIndex + 1)),\n    });\n  }\n\n  onCreateNetworkClick(): void {\n    const state = this.expectState(StateType.CreateNetwork);\n    if (state.hiddenLayerSizeInputValues.every(isPositiveIntStr)) {\n      const hiddenLayerSizes: number[] = state.hiddenLayerSizeInputValues.map(\n        (str) => +str\n      );\n      const layerSizes = [784, ...hiddenLayerSizes, 10];\n\n      const newState: NetworkMainMenuState = {\n        mnist: this.state.mnist,\n\n        stateType: StateType.NetworkMainMenu,\n\n        network: new Network1(layerSizes),\n      };\n\n      this.saveState(newState);\n    }\n  }\n\n  expectState<T extends StateType>(stateType: T): StateMap[T] {\n    const { state } = this;\n    if (state.stateType === stateType) {\n      return state as StateMap[T];\n    }\n    throw new Error(\n      \"Expecting a state of type \" +\n        StateType[stateType] +\n        \" but got state of type \" +\n        StateType[state.stateType]\n    );\n  }\n\n  onTrainClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: HyperParameterMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.HyperParameterMenu,\n\n      network: state.network,\n\n      batchSizeInputValue: \"10\",\n      epochsInputValue: \"30\",\n      learningRateInputValue: \"3.0\",\n    };\n    this.saveState(newState);\n  }\n\n  onTestClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n\n    const networkTester = testNetwork(state.network, {\n      onComplete: (accuracyRate) => {\n        this.updateState(StateType.Test, {\n          accuracyRate: result.ok(accuracyRate),\n        });\n      },\n    });\n\n    const newState: TestState = {\n      mnist: state.mnist,\n\n      stateType: StateType.Test,\n\n      network: state.network,\n\n      accuracyRate: result.err(networkTester),\n    };\n\n    this.saveState(newState);\n\n    networkTester.start();\n  }\n\n  updateState<T extends StateType>(\n    stateType: T,\n    updateOrUpdater:\n      | Partial<StateMap[T]>\n      | ((prevState: StateMap[T]) => Partial<StateMap[T]>)\n  ): void {\n    const { state } = this;\n    if (state.stateType === stateType) {\n      if (\"function\" === typeof updateOrUpdater) {\n        this.saveState({ ...state, ...updateOrUpdater(state as StateMap[T]) });\n      } else {\n        this.saveState({ ...state, ...updateOrUpdater });\n      }\n    }\n  }\n\n  onViewClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: ViewState = {\n      mnist: state.mnist,\n\n      stateType: StateType.View,\n\n      network: state.network,\n\n      viewedIndex: 0,\n      customImages: imageSaver.getState().unwrapOr([]),\n    };\n    this.saveState(newState);\n  }\n\n  onResetClick(): void {\n    const state = this.expectState(StateType.NetworkMainMenu);\n    const newState: CreateNetworkState = {\n      mnist: state.mnist,\n\n      stateType: StateType.CreateNetwork,\n\n      hiddenLayerSizeInputValues: [\"30\"],\n      previousNetwork: option.some(state.network),\n    };\n    this.saveState(newState);\n  }\n\n  onBatchSizeInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      batchSizeInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onEpochsInputValueChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      epochsInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onLearningRateInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: HyperParameterMenuState = {\n      ...state,\n      learningRateInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onStartTrainingClick(): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n\n    const hyperParams: StochasticGradientDescentHyperParameters = {\n      batchSize: +state.batchSizeInputValue,\n      epochs: +state.epochsInputValue,\n      learningRate: +state.learningRateInputValue,\n    };\n\n    const networkTrainer = trainNetwork(state.network, hyperParams, {\n      onEpochComplete: this.onEpochComplete,\n\n      onTerminate: this.onTrainerTerminate,\n    });\n\n    const newState: TrainingInProgressState = {\n      mnist: state.mnist,\n\n      stateType: StateType.TrainingInProgress,\n\n      network: state.network,\n\n      networkTrainer,\n      epochAccuracyRates: [],\n    };\n\n    this.saveState(newState);\n\n    networkTrainer.start();\n  }\n\n  onEpochComplete(accuracyRate: AccuracyRate, epoch: number): void {\n    this.updateState(StateType.TrainingInProgress, (prevState) => ({\n      epochAccuracyRates: prevState.epochAccuracyRates.concat([\n        { ...accuracyRate, epoch },\n      ]),\n    }));\n  }\n\n  onTrainerTerminate(updatedNetwork: Network): void {\n    const state = this.expectState(StateType.TrainingInProgress);\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: updatedNetwork,\n    };\n    this.saveState(newState);\n  }\n\n  onExitHyperParameterMenuClick(): void {\n    const state = this.expectState(StateType.HyperParameterMenu);\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onStopTrainingClick(): void {\n    const state = this.expectState(StateType.TrainingInProgress);\n    state.networkTrainer.terminate();\n  }\n\n  onTestMenuExitClick(): void {\n    const state = this.expectState(StateType.Test);\n\n    state.accuracyRate.ifErr((tester) => {\n      tester.terminate();\n    });\n\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onExitViewMenuClick(): void {\n    const state = this.expectState(StateType.View);\n\n    const newState: NetworkMainMenuState = {\n      mnist: state.mnist,\n\n      stateType: StateType.NetworkMainMenu,\n\n      network: state.network,\n    };\n    this.saveState(newState);\n  }\n\n  onPreviousImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const numberOfImages = mnist.test.length + state.customImages.length;\n      const newIndex =\n        state.viewedIndex === 0 ? numberOfImages - 1 : state.viewedIndex - 1;\n      this.saveState({ ...state, viewedIndex: newIndex });\n    });\n  }\n\n  onNextImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const numberOfImages = mnist.test.length + state.customImages.length;\n      const newIndex =\n        state.viewedIndex === numberOfImages - 1 ? 0 : state.viewedIndex + 1;\n      this.saveState({ ...state, viewedIndex: newIndex });\n    });\n  }\n\n  onCustomImageInputChange(): void {\n    const input = this.customImageInputRef.current;\n    if (input !== null && input.files !== null && input.files.length > 0) {\n      readFileAsHtmlImage(input.files[0]).then(this.enterCropMenu);\n    }\n  }\n\n  enterCropMenu(uploadedImage: HTMLImageElement): void {\n    const state = this.expectState(StateType.View);\n    const newState: CropState = {\n      mnist: state.mnist,\n\n      stateType: StateType.Crop,\n\n      network: state.network,\n      customImages: state.customImages,\n\n      uploadedImage,\n      darknessThreshold: getAverageDarkness(uploadedImage),\n      cropSquare: {\n        x: 0,\n        y: 0,\n        size: Math.min(uploadedImage.width, uploadedImage.height),\n      },\n      pendingCropAdjustment: option.none(),\n      hoveredOverDraggable: option.none(),\n      shouldInvertImage: false,\n      labelInputValue: \"\",\n    };\n    this.saveState(newState);\n  }\n\n  onCropImageCanvasPointerDown(\n    event:\n      | React.MouseEvent<HTMLCanvasElement>\n      | React.TouchEvent<HTMLCanvasElement>\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const square = state.cropSquare;\n\n    const canvas = this.cropImageCanvasRef.current!;\n    const { x, y } = getLocalPointerCoordinates(event, canvas);\n    const rect = canvas.getBoundingClientRect();\n    const scale = canvas.width / rect.width;\n    const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n\n    const optDragged: Option<Draggable> = (() => {\n      if (Math.hypot(x - square.x, y - square.y) <= localRadius) {\n        return option.some(Draggable.TopLeftCorner);\n      } else if (\n        Math.hypot(x - (square.x + square.size), y - square.y) <= localRadius\n      ) {\n        return option.some(Draggable.TopRightCorner);\n      } else if (\n        Math.hypot(\n          x - (square.x + square.size),\n          y - (square.y + square.size)\n        ) <= localRadius\n      ) {\n        return option.some(Draggable.BottomRightCorner);\n      } else if (\n        Math.hypot(x - square.x, y - (square.y + square.size)) <= localRadius\n      ) {\n        return option.some(Draggable.BottomLeftCorner);\n      } else if (\n        x > square.x &&\n        x < square.x + square.size &&\n        y > square.y &&\n        y < square.y + square.size\n      ) {\n        return option.some(Draggable.EntireSquare);\n      } else {\n        return option.none();\n      }\n    })();\n\n    this.saveState({\n      ...state,\n      pendingCropAdjustment: optDragged.map((dragged) => ({\n        dragged,\n        startX: x,\n        startY: y,\n        currentX: x,\n        currentY: y,\n      })),\n    });\n  }\n\n  onCropImageCanvasPointerMove(\n    event: React.MouseEvent | React.TouchEvent\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const canvas = this.cropImageCanvasRef.current!;\n    const current = getLocalPointerCoordinates(event, canvas);\n\n    state.pendingCropAdjustment.match({\n      some: (oldAdjustment) => {\n        const updatedAdjustment: SquareAdjustment = {\n          ...oldAdjustment,\n          currentX: current.x,\n          currentY: current.y,\n        };\n\n        this.saveState({\n          ...state,\n          pendingCropAdjustment: option.some(updatedAdjustment),\n        });\n\n        const adjustedCropSquare = applyPendingAdjustment(\n          state.cropSquare,\n          updatedAdjustment,\n          canvas.width,\n          canvas.height\n        );\n        paintImageAndCropSquare(\n          state.uploadedImage,\n          adjustedCropSquare,\n          canvas,\n          state.shouldInvertImage,\n          state.darknessThreshold\n        );\n      },\n\n      none: () => {\n        const rect = canvas.getBoundingClientRect();\n        const scale = canvas.width / rect.width;\n        const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n        this.saveState({\n          ...state,\n          hoveredOverDraggable: getHoveredOverDraggable(\n            state.cropSquare,\n            current.x,\n            current.y,\n            localRadius\n          ),\n        });\n      },\n    });\n  }\n\n  onCropImageCanvasPointerUp(): void {\n    const state = this.expectState(StateType.Crop);\n    const canvas = this.cropImageCanvasRef.current!;\n    const updatedCropSquare = state.pendingCropAdjustment.match({\n      none: () => state.cropSquare,\n      some: (adjustment) =>\n        applyPendingAdjustment(\n          state.cropSquare,\n          adjustment,\n          canvas.width,\n          canvas.height\n        ),\n    });\n\n    this.saveState({\n      ...state,\n      pendingCropAdjustment: option.none(),\n      cropSquare: updatedCropSquare,\n    });\n  }\n\n  onShouldInvertInputChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Crop);\n    const newState: CropState = {\n      ...state,\n      shouldInvertImage: event.target.checked,\n    };\n    this.saveState(newState);\n  }\n\n  onDarknessThresholdChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Crop);\n    const newThreshold = +event.target.value;\n    const newState: CropState = { ...state, darknessThreshold: newThreshold };\n    this.saveState(newState);\n    paintImageAndCropSquare(\n      state.uploadedImage,\n      state.cropSquare,\n      this.cropImageCanvasRef.current!,\n      state.shouldInvertImage,\n      newThreshold\n    );\n  }\n\n  onCustomImageLabelInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Crop);\n    const newState: CropState = {\n      ...state,\n      labelInputValue: event.target.value,\n    };\n    this.saveState(newState);\n  }\n\n  onAddCustomImageClick(): void {\n    const state = this.expectState(StateType.Crop);\n\n    if (!isDigit(state.labelInputValue)) {\n      return;\n    }\n\n    state.mnist.ifSome((mnist) => {\n      const label = +state.labelInputValue;\n      const newImage = getCustomImage(\n        state,\n        label,\n        state.shouldInvertImage,\n        state.darknessThreshold\n      );\n      const updatedCustomImages = state.customImages.concat([newImage]);\n      const newImageIndex = mnist.test.length + updatedCustomImages.length - 1;\n      const newState: ViewState = {\n        mnist: state.mnist,\n\n        stateType: StateType.View,\n\n        network: state.network,\n\n        viewedIndex: newImageIndex,\n        customImages: updatedCustomImages,\n      };\n      this.saveState(newState);\n    });\n  }\n\n  onDeleteCustomImageClick(): void {\n    const state = this.expectState(StateType.View);\n    state.mnist.ifSome((mnist) => {\n      const customImageIndex = state.viewedIndex - mnist.test.length;\n      const newCustomImages = state.customImages\n        .slice(0, customImageIndex)\n        .concat(state.customImages.slice(customImageIndex + 1));\n      const newState: ViewState = {\n        ...state,\n        customImages: newCustomImages,\n        viewedIndex: state.viewedIndex - 1,\n      };\n      this.saveState(newState);\n    });\n  }\n}\n\nfunction getInitialState(): AppState {\n  return networkSaver.getState().match({\n    none: (): CreateNetworkState => ({\n      mnist: option.none(),\n\n      stateType: StateType.CreateNetwork,\n\n      hiddenLayerSizeInputValues: [\"30\"],\n      previousNetwork: option.none(),\n    }),\n\n    some: (network): NetworkMainMenuState => ({\n      mnist: option.none(),\n\n      stateType: StateType.NetworkMainMenu,\n\n      network,\n    }),\n  });\n}\n\nfunction isPositiveIntStr(s: string): boolean {\n  return Number.isFinite(+s) && +s === Math.floor(+s) && +s > 0;\n}\n\nfunction isPositiveNumStr(s: string): boolean {\n  return Number.isFinite(+s) && +s > 0;\n}\n\nfunction getViewedImage(state: ViewState, mnist: MnistData): LabeledImage {\n  return state.viewedIndex < mnist.test.length\n    ? mnist.test[state.viewedIndex]\n    : normalizeU8Image(\n        state.customImages[state.viewedIndex - mnist.test.length]\n      );\n}\n\nfunction normalizeU8Image(image: CustomImage): LabeledImage {\n  return {\n    rows: 28,\n    columns: 28,\n    inputs: image.u8Matrix.immutApplyElementwise((x) => x / 255),\n    label: image.label,\n  };\n}\n\nfunction guessDigit(\n  network: Network,\n  inputs: Matrix\n): { digit: number; confidence: number } {\n  const { activations } = network.performForwardPass(inputs);\n  const outputActivations = activations[\n    activations.length - 1\n  ].rowMajorOrderEntries();\n\n  let maxIndex = 0;\n  let maxConfidence = outputActivations[maxIndex];\n  for (let i = 1; i < outputActivations.length; i++) {\n    const confidence = outputActivations[i];\n    if (confidence > maxConfidence) {\n      maxConfidence = confidence;\n      maxIndex = i;\n    }\n  }\n\n  return { digit: maxIndex, confidence: maxConfidence };\n}\n\nfunction paintImage(image: LabeledImage, canvas: HTMLCanvasElement): void {\n  canvas.width = image.columns;\n  canvas.height = image.rows;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  const imageData = getImageData(image);\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction getImageData(image: LabeledImage): ImageData {\n  const entries = image.inputs.rowMajorOrderEntries();\n  const imageBytes = new Uint8ClampedArray(entries.length * 4);\n  for (let i = 0; i < entries.length; i++) {\n    const lightness = 255 - Math.floor(entries[i] * 255);\n    imageBytes[i * 4] = lightness;\n    imageBytes[i * 4 + 1] = lightness;\n    imageBytes[i * 4 + 2] = lightness;\n    imageBytes[i * 4 + 3] = 255;\n  }\n  return new ImageData(imageBytes, image.columns, image.rows);\n}\n\nfunction readFileAsHtmlImage(file: File): Promise<HTMLImageElement> {\n  return readFileAsDataUrl(file).then(\n    (url) =>\n      new Promise((resolve, reject) => {\n        const img = document.createElement(\"img\");\n        img.src = url;\n        img.addEventListener(\"load\", () => resolve(img));\n        img.addEventListener(\"error\", reject);\n      })\n  );\n}\n\nfunction readFileAsDataUrl(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => resolve(reader.result as string));\n    reader.addEventListener(\"error\", () => reject(reader.error));\n    reader.readAsDataURL(file);\n  });\n}\n\nconst CropMenuConfig = {\n  OverlayColor: \"#000a\",\n\n  CropSquareColor: \"#08b\",\n  CropSquareLineWidth: 3,\n  GlobalCornerHandleRadius: 10,\n} as const;\n\nfunction paintImageAndCropSquare(\n  image: HTMLImageElement,\n  crop: Square,\n  canvas: HTMLCanvasElement,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): void {\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const rect = canvas.getBoundingClientRect();\n  const scale = canvas.width / rect.width;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(image, 0, 0);\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  paintOverlay();\n  paintCompressedImage();\n  paintCropSquare();\n\n  return;\n\n  function paintOverlay(): void {\n    const cropBottom = crop.y + crop.size;\n    const cropRight = crop.x + crop.size;\n    ctx.fillStyle = CropMenuConfig.OverlayColor;\n    ctx.fillRect(0, 0, canvas.width, crop.y);\n    ctx.fillRect(0, cropBottom, canvas.width, canvas.height - cropBottom);\n    ctx.fillRect(0, crop.y, crop.x, crop.size);\n    ctx.fillRect(cropRight, crop.y, canvas.width - cropRight, crop.size);\n  }\n\n  function paintCompressedImage(): void {\n    ctx.clearRect(crop.x, crop.y, crop.size, crop.size);\n\n    const compressed = cropAndCompress(\n      image,\n      crop,\n      shouldInvert,\n      darknessThreshold\n    );\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(compressed, crop.x, crop.y, crop.size, crop.size);\n  }\n\n  function paintCropSquare(): void {\n    ctx.strokeStyle = CropMenuConfig.CropSquareColor;\n    ctx.lineWidth = CropMenuConfig.CropSquareLineWidth;\n    ctx.strokeRect(crop.x, crop.y, crop.size, crop.size);\n\n    drawCropSquareCircle(crop.x, crop.y);\n    drawCropSquareCircle(crop.x + crop.size, crop.y);\n    drawCropSquareCircle(crop.x + crop.size, crop.y + crop.size);\n    drawCropSquareCircle(crop.x, crop.y + crop.size);\n  }\n\n  function drawCropSquareCircle(x: number, y: number): void {\n    const localRadius = CropMenuConfig.GlobalCornerHandleRadius * scale;\n    ctx.moveTo(x, y);\n    ctx.beginPath();\n    ctx.arc(x, y, localRadius, 0, 2 * Math.PI);\n    ctx.closePath();\n\n    ctx.fillStyle = CropMenuConfig.CropSquareColor;\n    ctx.fill();\n  }\n}\n\nfunction applyWhiteBackground(srcCtx: CanvasRenderingContext2D): void {\n  const { width, height } = srcCtx.canvas;\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.fillStyle = \"#ffffff\";\n  ctx.fillRect(0, 0, width, height);\n  ctx.drawImage(srcCtx.canvas, 0, 0);\n\n  const imageData = ctx.getImageData(0, 0, width, height);\n  srcCtx.putImageData(imageData, 0, 0);\n}\n\nfunction getLocalPointerCoordinates(\n  event: React.MouseEvent | React.TouchEvent,\n  canvas: HTMLCanvasElement\n): { x: number; y: number } {\n  const boundingRect = canvas.getBoundingClientRect();\n  const { x, y } = getGlobalPointerCoordinates(event);\n  const xScale = canvas.width / boundingRect.width;\n  const yScale = canvas.height / boundingRect.height;\n  return {\n    x: xScale * (x - boundingRect.left),\n    y: yScale * (y - boundingRect.top),\n  };\n}\n\nfunction getGlobalPointerCoordinates(\n  event: React.MouseEvent | React.TouchEvent\n): { x: number; y: number } {\n  if (\"clientX\" in event) {\n    return { x: event.clientX, y: event.clientY };\n  } else {\n    return { x: event.touches[0].clientX, y: event.touches[0].clientY };\n  }\n}\n\nfunction applyPendingAdjustment(\n  square: Square,\n  adjustment: SquareAdjustment,\n  canvasWidth: number,\n  canvasHeight: number\n): Square {\n  const possiblyOutOfBounds = applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare(\n    square,\n    adjustment\n  );\n  return transformBackIntoBoundsIfNeeded(\n    possiblyOutOfBounds,\n    canvasWidth,\n    canvasHeight,\n    adjustment.dragged === Draggable.EntireSquare\n  );\n}\n\nfunction applyPendingAdjustmentToGetPossiblyOutOfBoundsSquare(\n  square: Square,\n  adjustment: SquareAdjustment\n): Square {\n  if (isCornerAdjustment(adjustment)) {\n    const rect = {\n      x: square.x,\n      y: square.y,\n      width: square.size,\n      height: square.size,\n    };\n    const adjustedRect = applyPendingCornerAdjustmentToRect(rect, adjustment);\n    return clamp(adjustedRect, adjustment.dragged);\n  } else {\n    const dx = adjustment.currentX - adjustment.startX;\n    const dy = adjustment.currentY - adjustment.startY;\n    return applyTranslation(square, dx, dy);\n  }\n}\n\nfunction isCornerAdjustment(\n  adjustment: SquareAdjustment\n): adjustment is CornerAdjustment {\n  return adjustment.dragged !== Draggable.EntireSquare;\n}\n\nfunction applyPendingCornerAdjustmentToRect(\n  rect: Rect,\n  adjustment: CornerAdjustment\n): Rect {\n  const corner = adjustment.dragged;\n  const { currentX, currentY } = adjustment;\n\n  let left = rect.x;\n  let right = rect.x + rect.width;\n  let top = rect.y;\n  let bottom = rect.y + rect.height;\n\n  switch (corner) {\n    case Draggable.TopLeftCorner:\n      top = Math.min(currentY, bottom);\n      left = Math.min(currentX, right);\n      break;\n    case Draggable.TopRightCorner:\n      top = Math.min(currentY, bottom);\n      right = Math.max(currentX, left);\n      break;\n    case Draggable.BottomRightCorner:\n      bottom = Math.max(currentY, top);\n      right = Math.max(currentX, left);\n      break;\n    case Draggable.BottomLeftCorner:\n      bottom = Math.max(currentY, top);\n      left = Math.min(currentX, right);\n      break;\n  }\n\n  if (left > right) {\n    [left, right] = [right, left];\n  }\n  if (top > bottom) {\n    [top, bottom] = [bottom, top];\n  }\n\n  return {\n    x: left,\n    y: top,\n    width: right - left,\n    height: bottom - top,\n  };\n}\n\nfunction clamp(rect: Rect, dragged: Corner): Square {\n  const anchor = getDiagonal(dragged);\n  switch (anchor) {\n    case Draggable.TopLeftCorner:\n      return clampToTopLeft(rect);\n    case Draggable.TopRightCorner:\n      return clampToTopRight(rect);\n    case Draggable.BottomRightCorner:\n      return clampToBottomRight(rect);\n    case Draggable.BottomLeftCorner:\n      return clampToBottomLeft(rect);\n  }\n}\n\nfunction clampToTopLeft(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x, y, size };\n}\n\nfunction clampToTopRight(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x: width > height ? x + width - size : x, y, size };\n}\n\nfunction clampToBottomRight(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return {\n    x: width > height ? x + width - size : x,\n    y: height > width ? y + height - size : y,\n    size,\n  };\n}\n\nfunction clampToBottomLeft(rect: Rect): Square {\n  const { x, y, width, height } = rect;\n  const size = Math.min(width, height);\n  return { x, y: height > width ? y + height - size : y, size };\n}\n\nfunction getDiagonal(corner: Corner): Corner {\n  switch (corner) {\n    case Draggable.TopLeftCorner:\n      return Draggable.BottomRightCorner;\n    case Draggable.TopRightCorner:\n      return Draggable.BottomLeftCorner;\n    case Draggable.BottomRightCorner:\n      return Draggable.TopLeftCorner;\n    case Draggable.BottomLeftCorner:\n      return Draggable.TopRightCorner;\n  }\n}\n\nfunction applyTranslation(square: Square, dx: number, dy: number): Square {\n  return { x: square.x + dx, y: square.y + dy, size: square.size };\n}\n\nfunction getHoveredOverDraggable(\n  square: Square,\n  x: number,\n  y: number,\n  localRadius: number\n): Option<Draggable> {\n  if (Math.hypot(x - square.x, y - square.y) <= localRadius) {\n    return option.some(Draggable.TopLeftCorner);\n  } else if (\n    Math.hypot(x - (square.x + square.size), y - square.y) <= localRadius\n  ) {\n    return option.some(Draggable.TopRightCorner);\n  } else if (\n    Math.hypot(x - (square.x + square.size), y - (square.y + square.size)) <=\n    localRadius\n  ) {\n    return option.some(Draggable.BottomRightCorner);\n  } else if (\n    Math.hypot(x - square.x, y - (square.y + square.size)) <= localRadius\n  ) {\n    return option.some(Draggable.BottomLeftCorner);\n  } else if (\n    x > square.x &&\n    x < square.x + square.size &&\n    y > square.y &&\n    y < square.y + square.size\n  ) {\n    return option.some(Draggable.EntireSquare);\n  } else {\n    return option.none();\n  }\n}\n\nfunction transformBackIntoBoundsIfNeeded(\n  square: Square,\n  width: number,\n  height: number,\n  preserveSize: boolean\n): Square {\n  if (preserveSize) {\n    const { x, y, size } = square;\n\n    const maxX = width - size;\n    const maxY = height - size;\n\n    return {\n      x: Math.max(0, Math.min(x, maxX)),\n      y: Math.max(0, Math.min(y, maxY)),\n      size,\n    };\n  } else {\n    let { x, y, size } = square;\n\n    x = Math.max(0, Math.min(x, width));\n    y = Math.max(0, Math.min(y, height));\n\n    const maxSize = Math.min(width - x, height - y);\n    size = Math.min(size, maxSize);\n\n    return { x, y, size };\n  }\n}\n\nfunction cropAndCompress(\n  image: HTMLImageElement,\n  crop: Square,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): HTMLCanvasElement {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 28;\n  canvas.height = 28;\n\n  const ctx = canvas.getContext(\"2d\")!;\n  ctx.drawImage(image, crop.x, crop.y, crop.size, crop.size, 0, 0, 28, 28);\n\n  applyGrayscale(ctx);\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  applyDarknessThreshold(ctx, darknessThreshold);\n\n  return canvas;\n}\n\nfunction invertContext(ctx: CanvasRenderingContext2D): void {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const bytes = imageData.data;\n  for (let i = 0; i < bytes.length; i += 4) {\n    bytes[i] = 255 - bytes[i];\n    bytes[i + 1] = 255 - bytes[i + 1];\n    bytes[i + 2] = 255 - bytes[i + 2];\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction applyGrayscale(ctx: CanvasRenderingContext2D): void {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const pixels = imageData.data;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const averageLightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    pixels[i] = averageLightness;\n    pixels[i + 1] = averageLightness;\n    pixels[i + 2] = averageLightness;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction applyDarknessThreshold(\n  ctx: CanvasRenderingContext2D,\n  darknessThreshold: number\n): void {\n  const lightnessThreshold = 1 - darknessThreshold;\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const pixels = imageData.data;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const averageLightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    const normalizedLightness = averageLightness / 255;\n    const roundedLightness = normalizedLightness < lightnessThreshold ? 0 : 255;\n    pixels[i] = roundedLightness;\n    pixels[i + 1] = roundedLightness;\n    pixels[i + 2] = roundedLightness;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\nfunction isDigit(s: string): boolean {\n  return /^\\d$/.test(s);\n}\n\nfunction getCustomImage(\n  state: CropState,\n  label: number,\n  shouldInvert: boolean,\n  darknessThreshold: number\n): CustomImage {\n  const { cropSquare, uploadedImage } = state;\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 28;\n  canvas.height = 28;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(\n    uploadedImage,\n    cropSquare.x,\n    cropSquare.y,\n    cropSquare.size,\n    cropSquare.size,\n    0,\n    0,\n    28,\n    28\n  );\n\n  if (shouldInvert) {\n    invertContext(ctx);\n  }\n\n  applyWhiteBackground(ctx);\n\n  const u8Matrix = getU8Matrix(\n    ctx.getImageData(0, 0, 28, 28),\n    darknessThreshold\n  );\n  return { u8Matrix, label };\n}\n\nfunction getU8Matrix(imageData: ImageData, darknessThreshold: number): Matrix {\n  const lightnessThreshold = 1 - darknessThreshold;\n\n  const { data } = imageData;\n  const u8s = new Array(data.length / 4);\n  for (let i = 0; i < data.length; i += 4) {\n    const averageLightness = Math.floor(\n      (data[i] + data[i + 1] + data[i + 2]) / 3\n    );\n    const normalizedLightness = averageLightness / 255;\n    const roundedLightness = normalizedLightness < lightnessThreshold ? 0 : 255;\n    const roundedDarkness = 255 - roundedLightness;\n    u8s[i / 4] = roundedDarkness;\n  }\n  return Matrix.columnVector(u8s);\n}\n\n/** Returns a float between 0 and 1. */\nfunction getAverageDarkness(image: HTMLImageElement): number {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.fillStyle = \"#ffffff\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  ctx.drawImage(image, 0, 0);\n\n  const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n  let totalLightness = 0;\n  for (let i = 0; i < pixels.length; i += 4) {\n    const lightness = Math.floor(\n      (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3\n    );\n    totalLightness += lightness;\n  }\n  const numberOfPixels = pixels.length / 4;\n  const averageLightness = Math.floor(totalLightness / numberOfPixels);\n  const averageDarkness = 255 - averageLightness;\n  return averageDarkness / 255;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Network1 } from \"./network\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n(window as any).Network1 = Network1;\n"],"sourceRoot":""}